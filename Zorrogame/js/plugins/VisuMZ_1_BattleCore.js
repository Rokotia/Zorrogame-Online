//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.86;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.86] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x320868=_0x3e02;(function(_0x2e94b0,_0xa5539a){const _0x135ff6=_0x3e02,_0x480c5a=_0x2e94b0();while(!![]){try{const _0x2ce3b9=-parseInt(_0x135ff6(0xaf1))/0x1+-parseInt(_0x135ff6(0x911))/0x2+-parseInt(_0x135ff6(0x3d7))/0x3+-parseInt(_0x135ff6(0xab1))/0x4*(-parseInt(_0x135ff6(0x60c))/0x5)+-parseInt(_0x135ff6(0x46f))/0x6+parseInt(_0x135ff6(0x124))/0x7+parseInt(_0x135ff6(0x496))/0x8;if(_0x2ce3b9===_0xa5539a)break;else _0x480c5a['push'](_0x480c5a['shift']());}catch(_0x47cf00){_0x480c5a['push'](_0x480c5a['shift']());}}}(_0x536b,0x95112));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x320868(0x477)](function(_0x5a3342){const _0x3703da=_0x320868;return _0x5a3342[_0x3703da(0xb15)]&&_0x5a3342[_0x3703da(0x5b5)][_0x3703da(0x6d2)]('['+label+']');})[0x0];VisuMZ[label][_0x320868(0x1d7)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x320868(0x630)]=function(_0x36eba1,_0x5ea9e3){const _0x27569b=_0x320868;for(const _0x31fc46 in _0x5ea9e3){if(_0x31fc46[_0x27569b(0x2e0)](/(.*):(.*)/i)){const _0x13b70d=String(RegExp['$1']),_0xf43f7e=String(RegExp['$2'])[_0x27569b(0x2c8)]()['trim']();let _0x4ae190,_0x5c26a9,_0x9d5d62;switch(_0xf43f7e){case _0x27569b(0x859):_0x4ae190=_0x5ea9e3[_0x31fc46]!==''?Number(_0x5ea9e3[_0x31fc46]):0x0;break;case _0x27569b(0xc06):_0x5c26a9=_0x5ea9e3[_0x31fc46]!==''?JSON[_0x27569b(0x4fd)](_0x5ea9e3[_0x31fc46]):[],_0x4ae190=_0x5c26a9[_0x27569b(0x200)](_0x29ea3a=>Number(_0x29ea3a));break;case _0x27569b(0x18a):_0x4ae190=_0x5ea9e3[_0x31fc46]!==''?eval(_0x5ea9e3[_0x31fc46]):null;break;case'ARRAYEVAL':_0x5c26a9=_0x5ea9e3[_0x31fc46]!==''?JSON[_0x27569b(0x4fd)](_0x5ea9e3[_0x31fc46]):[],_0x4ae190=_0x5c26a9[_0x27569b(0x200)](_0x167873=>eval(_0x167873));break;case _0x27569b(0x1d4):_0x4ae190=_0x5ea9e3[_0x31fc46]!==''?JSON[_0x27569b(0x4fd)](_0x5ea9e3[_0x31fc46]):'';break;case'ARRAYJSON':_0x5c26a9=_0x5ea9e3[_0x31fc46]!==''?JSON[_0x27569b(0x4fd)](_0x5ea9e3[_0x31fc46]):[],_0x4ae190=_0x5c26a9[_0x27569b(0x200)](_0xae3fa6=>JSON['parse'](_0xae3fa6));break;case _0x27569b(0x410):_0x4ae190=_0x5ea9e3[_0x31fc46]!==''?new Function(JSON[_0x27569b(0x4fd)](_0x5ea9e3[_0x31fc46])):new Function(_0x27569b(0x934));break;case _0x27569b(0x623):_0x5c26a9=_0x5ea9e3[_0x31fc46]!==''?JSON[_0x27569b(0x4fd)](_0x5ea9e3[_0x31fc46]):[],_0x4ae190=_0x5c26a9['map'](_0x4748d7=>new Function(JSON['parse'](_0x4748d7)));break;case _0x27569b(0x63e):_0x4ae190=_0x5ea9e3[_0x31fc46]!==''?String(_0x5ea9e3[_0x31fc46]):'';break;case _0x27569b(0x16e):_0x5c26a9=_0x5ea9e3[_0x31fc46]!==''?JSON['parse'](_0x5ea9e3[_0x31fc46]):[],_0x4ae190=_0x5c26a9[_0x27569b(0x200)](_0xee011a=>String(_0xee011a));break;case _0x27569b(0x329):_0x9d5d62=_0x5ea9e3[_0x31fc46]!==''?JSON[_0x27569b(0x4fd)](_0x5ea9e3[_0x31fc46]):{},_0x36eba1[_0x13b70d]={},VisuMZ[_0x27569b(0x630)](_0x36eba1[_0x13b70d],_0x9d5d62);continue;case'ARRAYSTRUCT':_0x5c26a9=_0x5ea9e3[_0x31fc46]!==''?JSON[_0x27569b(0x4fd)](_0x5ea9e3[_0x31fc46]):[],_0x4ae190=_0x5c26a9[_0x27569b(0x200)](_0x1395cd=>VisuMZ['ConvertParams']({},JSON[_0x27569b(0x4fd)](_0x1395cd)));break;default:continue;}_0x36eba1[_0x13b70d]=_0x4ae190;}}return _0x36eba1;},(_0x4c2b92=>{const _0x441ba7=_0x320868,_0x49192f=_0x4c2b92[_0x441ba7(0x3e0)];for(const _0x10d9ae of dependencies){if(!Imported[_0x10d9ae]){alert(_0x441ba7(0xa53)[_0x441ba7(0x8b0)](_0x49192f,_0x10d9ae)),SceneManager[_0x441ba7(0x9d9)]();break;}}const _0x373ada=_0x4c2b92['description'];if(_0x373ada['match'](/\[Version[ ](.*?)\]/i)){const _0x4d14eb=Number(RegExp['$1']);_0x4d14eb!==VisuMZ[label][_0x441ba7(0x43b)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x441ba7(0x8b0)](_0x49192f,_0x4d14eb)),SceneManager[_0x441ba7(0x9d9)]());}if(_0x373ada['match'](/\[Tier[ ](\d+)\]/i)){const _0x5b76f5=Number(RegExp['$1']);_0x5b76f5<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0x49192f,_0x5b76f5,tier)),SceneManager[_0x441ba7(0x9d9)]()):tier=Math[_0x441ba7(0x382)](_0x5b76f5,tier);}VisuMZ[_0x441ba7(0x630)](VisuMZ[label]['Settings'],_0x4c2b92[_0x441ba7(0x556)]);})(pluginData),VisuMZ[_0x320868(0x6a8)]=function(_0x5b9aed){const _0x27a9aa=_0x320868;let _0xe79f2c=[];for(const _0x46b48d of _0x5b9aed){_0xe79f2c=_0xe79f2c[_0x27a9aa(0x1c0)](VisuMZ['ConvertActionSequenceTarget'](_0x46b48d));}return _0xe79f2c[_0x27a9aa(0x477)](_0x579196=>_0x579196);},VisuMZ[_0x320868(0x2f3)]=function(_0x2bd524){const _0x465e56=_0x320868,_0x105765=BattleManager['allBattleMembers']()[_0x465e56(0x477)](_0x4f711b=>_0x4f711b&&_0x4f711b['isAppeared']()),_0xde3c68=BattleManager[_0x465e56(0xaad)],_0x8220a9=BattleManager['_target'],_0x56174a=BattleManager[_0x465e56(0xaba)]?BattleManager[_0x465e56(0xaba)][_0x465e56(0xab5)](0x0):_0x105765;_0x2bd524=_0x2bd524[_0x465e56(0xc44)]()[_0x465e56(0x761)]();if(_0x2bd524===_0x465e56(0x367))return[_0xde3c68];else{if(_0x2bd524===_0x465e56(0x1a4))return[_0x8220a9];else{if(_0x2bd524===_0x465e56(0x96e)){if(_0x8220a9){const _0x276f94=_0x56174a[_0x465e56(0x77f)](_0x8220a9);return _0x276f94>=0x0?[_0x56174a[_0x276f94-0x1]||_0x8220a9]:[_0x8220a9];}}else{if(_0x2bd524===_0x465e56(0x240)){if(_0x8220a9){const _0x1f2120=_0x56174a[_0x465e56(0x77f)](_0x8220a9);return _0x1f2120>=0x0?[_0x56174a[_0x1f2120+0x1]||_0x8220a9]:[_0x8220a9];}}else{if(_0x2bd524===_0x465e56(0xbf6))return _0x56174a;else{if(_0x2bd524===_0x465e56(0x491))return[_0xde3c68][_0x465e56(0x1c0)](_0x56174a);else{if(_0x2bd524===_0x465e56(0x637))return _0x105765[_0x465e56(0x477)](_0x57aec6=>_0x57aec6!==_0xde3c68&&!_0x56174a[_0x465e56(0x6d2)](_0x57aec6)&&_0x57aec6[_0x465e56(0x624)]());else{if(_0x2bd524===_0x465e56(0x368))return[VisuMZ[_0x465e56(0x7d3)]()];else{if(_0x2bd524[_0x465e56(0x2e0)](/SPECIAL (.*)>/i)){const _0x1b80ea=String(RegExp['$1'])[_0x465e56(0x867)](',')[_0x465e56(0x200)](_0x1a8bd7=>_0x1a8bd7[_0x465e56(0x761)]());return[VisuMZ[_0x465e56(0x458)](_0x1b80ea)];}}}}}}}}}if(_0xde3c68){if(_0x2bd524===_0x465e56(0x741))return _0xde3c68['friendsUnit']()[_0x465e56(0x83b)]();else{if(_0x2bd524===_0x465e56(0xbd6))return _0xde3c68[_0x465e56(0xc67)]()[_0x465e56(0x83b)]()[_0x465e56(0x477)](_0x531540=>_0x531540!==_0xde3c68);else{if(_0x2bd524==='alive\x20friends\x20not\x20target')return _0xde3c68['friendsUnit']()[_0x465e56(0x83b)]()[_0x465e56(0x477)](_0x8b81f8=>_0x8b81f8!==_0x8220a9);else{if(_0x2bd524===_0x465e56(0x789))return _0xde3c68[_0x465e56(0xc67)]()[_0x465e56(0x1ee)]();else{if(_0x2bd524['match'](/FRIEND INDEX (\d+)/i)){const _0x350028=Number(RegExp['$1']);return[_0xde3c68[_0x465e56(0xc67)]()[_0x465e56(0xb0d)]()[_0x350028]];}}}}}if(_0x2bd524===_0x465e56(0xae2))return _0xde3c68[_0x465e56(0x7e4)]()[_0x465e56(0x83b)]();else{if(_0x2bd524===_0x465e56(0x8c6))return _0xde3c68['opponentsUnit']()[_0x465e56(0x83b)]()[_0x465e56(0x477)](_0x2ad842=>_0x2ad842!==_0x8220a9);else{if(_0x2bd524===_0x465e56(0x442))return _0xde3c68[_0x465e56(0x7e4)]()[_0x465e56(0x1ee)]();else{if(_0x2bd524[_0x465e56(0x2e0)](/OPPONENT INDEX (\d+)/i)){const _0x199956=Number(RegExp['$1']);return[_0xde3c68[_0x465e56(0x7e4)]()['members']()[_0x199956]];}}}}}if(_0x2bd524===_0x465e56(0xbf8))return $gameParty[_0x465e56(0x83b)]();else{if(_0x2bd524===_0x465e56(0x393))return $gameParty[_0x465e56(0x83b)]()[_0x465e56(0x477)](_0x15e05e=>_0x15e05e!==_0xde3c68);else{if(_0x2bd524===_0x465e56(0x1c7))return $gameParty[_0x465e56(0x83b)]()[_0x465e56(0x477)](_0x58213b=>_0x58213b!==_0x8220a9);else{if(_0x2bd524==='dead\x20actors')return $gameParty[_0x465e56(0x1ee)]();else{if(_0x2bd524[_0x465e56(0x2e0)](/ACTOR INDEX (\d+)/i)){const _0x180108=Number(RegExp['$1']);return[$gameParty[_0x465e56(0xb0d)]()[_0x180108]];}else{if(_0x2bd524['match'](/ACTOR ID (\d+)/i)){const _0x479600=Number(RegExp['$1']);return[$gameActors[_0x465e56(0xb94)](_0x479600)];}}}}}}if(_0x2bd524===_0x465e56(0x37f))return $gameTroop[_0x465e56(0x83b)]();else{if(_0x2bd524===_0x465e56(0x74f))return $gameTroop[_0x465e56(0x83b)]()[_0x465e56(0x477)](_0x2bc428=>_0x2bc428!==_0xde3c68);else{if(_0x2bd524==='alive\x20enemies\x20not\x20target')return $gameTroop['aliveMembers']()[_0x465e56(0x477)](_0xaa58fd=>_0xaa58fd!==_0x8220a9);else{if(_0x2bd524===_0x465e56(0x8a1))return $gameTroop['deadMembers']();else{if(_0x2bd524[_0x465e56(0x2e0)](/ENEMY INDEX (\d+)/i)){const _0x54edb5=Number(RegExp['$1']);return[$gameTroop['members']()[_0x54edb5]];}else{if(_0x2bd524[_0x465e56(0x2e0)](/ENEMY ID (\d+)/i)){const _0x5c1394=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x465e56(0x477)](_0x45b17a=>_0x45b17a['enemyId']()===_0x5c1394);}}}}}}if(_0x2bd524==='alive\x20battlers')return _0x105765[_0x465e56(0x477)](_0x46cbaa=>_0x46cbaa[_0x465e56(0x174)]());else{if(_0x2bd524===_0x465e56(0x5fb))return _0x105765[_0x465e56(0x477)](_0x5b909f=>_0x5b909f['isAlive']()&&_0x5b909f!==_0xde3c68);else{if(_0x2bd524==='alive\x20battlers\x20not\x20target')return _0x105765[_0x465e56(0x477)](_0xd00bd2=>_0xd00bd2[_0x465e56(0x174)]()&&_0xd00bd2!==_0x8220a9);else{if(_0x2bd524===_0x465e56(0x917))return _0x105765[_0x465e56(0x477)](_0x3a5827=>_0x3a5827[_0x465e56(0x3e3)]());}}}return[];},VisuMZ[_0x320868(0x7d3)]=function(){const _0x2775a1=_0x320868;return BattleManager[_0x2775a1(0x33d)];},VisuMZ['GetActionSequenceSpecialTargetWithFlags']=function(_0x205e61){const _0x426beb=_0x320868;return BattleManager[_0x426beb(0x33d)];},PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x6b2),_0x19ef42=>{const _0x25026d=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x25026d(0x630)](_0x19ef42,_0x19ef42);const _0x2e77c0=$gameTemp[_0x25026d(0x343)](),_0x2b1d7a=BattleManager[_0x25026d(0xba2)],_0x2e99e6=BattleManager[_0x25026d(0xaad)],_0x4fc280=BattleManager[_0x25026d(0xaba)]?BattleManager[_0x25026d(0xaba)]['slice'](0x0):[],_0x4366b6=BattleManager[_0x25026d(0x8f1)];if(!_0x2e77c0||!_0x2b1d7a||!_0x2e99e6)return;if(!_0x2b1d7a['item']())return;if(_0x19ef42['DisplayAction'])_0x4366b6[_0x25026d(0x459)](_0x2e99e6,_0x2b1d7a['item']());_0x19ef42[_0x25026d(0x68b)]&&_0x4366b6[_0x25026d(0x205)]('applyImmortal',_0x2e99e6,_0x4fc280,!![]);if(_0x19ef42[_0x25026d(0x14e)])_0x4366b6[_0x25026d(0x205)](_0x25026d(0xb03),_0x2e99e6,_0x2b1d7a);if(_0x19ef42[_0x25026d(0x82b)])_0x4366b6[_0x25026d(0x205)](_0x25026d(0x3a5));if(_0x19ef42['CastAnimation'])_0x4366b6[_0x25026d(0x205)](_0x25026d(0x5c9),_0x2e99e6,_0x2b1d7a);if(_0x19ef42[_0x25026d(0x6f2)])_0x4366b6[_0x25026d(0x205)]('waitForAnimation');_0x2e77c0[_0x25026d(0xa31)](_0x25026d(0xb22));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x902),_0x4c3666=>{const _0x41ef86=_0x320868;if(!SceneManager[_0x41ef86(0x96d)]())return;VisuMZ[_0x41ef86(0x630)](_0x4c3666,_0x4c3666);const _0x3ec6e1=$gameTemp[_0x41ef86(0x343)](),_0x48ca64=BattleManager[_0x41ef86(0xba2)],_0x5b134d=BattleManager['_subject'],_0x108620=BattleManager[_0x41ef86(0xaba)]?BattleManager[_0x41ef86(0xaba)][_0x41ef86(0xab5)](0x0):[],_0x83e7d=BattleManager[_0x41ef86(0x8f1)],_0x4629db=_0x4c3666[_0x41ef86(0x7e9)]??![];if(!_0x3ec6e1||!_0x48ca64||!_0x5b134d)return;if(!_0x48ca64[_0x41ef86(0xc47)]())return;let _0x57f98e=_0x4629db?_0x83e7d[_0x41ef86(0x1b3)](_0x5b134d):0x1;for(let _0x4021aa=0x0;_0x4021aa<_0x57f98e;_0x4021aa++){_0x4629db&&_0x5b134d[_0x41ef86(0x94e)]()&&_0x83e7d['push'](_0x41ef86(0xac4),_0x5b134d,_0x4021aa);if(_0x4c3666['PerformAction'])_0x83e7d['push'](_0x41ef86(0x63c),_0x5b134d,_0x48ca64);if(_0x4c3666[_0x41ef86(0x790)]>0x0)_0x83e7d[_0x41ef86(0x205)](_0x41ef86(0x5de),_0x4c3666[_0x41ef86(0x790)]);if(_0x4c3666[_0x41ef86(0x938)])_0x83e7d[_0x41ef86(0x205)](_0x41ef86(0xa04),_0x5b134d,_0x108620,_0x48ca64[_0x41ef86(0xc47)]()[_0x41ef86(0xb9b)]);if(_0x4c3666[_0x41ef86(0x6f2)])_0x83e7d['push']('waitForAnimation');for(const _0x4e5e39 of _0x108620){if(!_0x4e5e39)continue;if(_0x4c3666[_0x41ef86(0x7b1)])_0x83e7d[_0x41ef86(0x205)]('actionEffect',_0x5b134d,_0x4e5e39);}}_0x4629db&&_0x5b134d['isActor']()&&_0x83e7d['push']('clearActiveWeaponSet',_0x5b134d);if(_0x4c3666[_0x41ef86(0x68b)])_0x83e7d[_0x41ef86(0x205)](_0x41ef86(0x1a1),_0x5b134d,_0x108620,![]);_0x3ec6e1[_0x41ef86(0xa31)]('battlelog');}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x5e8),_0x498a34=>{const _0x304fe2=_0x320868;if(!SceneManager[_0x304fe2(0x96d)]())return;VisuMZ['ConvertParams'](_0x498a34,_0x498a34);const _0x49acbf=$gameTemp['getLastPluginCommandInterpreter'](),_0x1f347d=BattleManager[_0x304fe2(0xba2)],_0x4d3be3=BattleManager[_0x304fe2(0xaad)],_0x5f2cbd=BattleManager[_0x304fe2(0xaba)]?BattleManager[_0x304fe2(0xaba)]['slice'](0x0):[],_0x480fa8=BattleManager[_0x304fe2(0x8f1)],_0xcfa15b=_0x498a34[_0x304fe2(0x7e9)]??![];if(!_0x49acbf||!_0x1f347d||!_0x4d3be3)return;if(!_0x1f347d[_0x304fe2(0xc47)]())return;let _0x552b88=_0xcfa15b?_0x480fa8[_0x304fe2(0x1b3)](_0x4d3be3):0x1;for(let _0x24dec1=0x0;_0x24dec1<_0x552b88;_0x24dec1++){for(const _0x49b8ad of _0x5f2cbd){if(!_0x49b8ad)continue;_0xcfa15b&&_0x4d3be3[_0x304fe2(0x94e)]()&&_0x480fa8[_0x304fe2(0x205)](_0x304fe2(0xac4),_0x4d3be3,_0x24dec1);if(_0x498a34[_0x304fe2(0x803)])_0x480fa8['push'](_0x304fe2(0x63c),_0x4d3be3,_0x1f347d);if(_0x498a34['WaitCount1']>0x0)_0x480fa8[_0x304fe2(0x205)]('waitCount',_0x498a34[_0x304fe2(0xa3f)]);if(_0x498a34[_0x304fe2(0x938)])_0x480fa8[_0x304fe2(0x205)](_0x304fe2(0xa04),_0x4d3be3,[_0x49b8ad],_0x1f347d[_0x304fe2(0xc47)]()[_0x304fe2(0xb9b)]);if(_0x498a34[_0x304fe2(0x50f)]>0x0)_0x480fa8[_0x304fe2(0x205)](_0x304fe2(0x5de),_0x498a34['WaitCount2']);if(_0x498a34[_0x304fe2(0x7b1)])_0x480fa8['push'](_0x304fe2(0x4e2),_0x4d3be3,_0x49b8ad);}}_0xcfa15b&&_0x4d3be3['isActor']()&&_0x480fa8[_0x304fe2(0x205)](_0x304fe2(0x709),_0x4d3be3);if(_0x498a34[_0x304fe2(0x68b)])_0x480fa8[_0x304fe2(0x205)](_0x304fe2(0x1a1),_0x4d3be3,_0x5f2cbd,![]);_0x49acbf['setWaitMode'](_0x304fe2(0xb22));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x5dd),_0x22b0b2=>{const _0x1f0000=_0x320868;if(!SceneManager[_0x1f0000(0x96d)]())return;VisuMZ[_0x1f0000(0x630)](_0x22b0b2,_0x22b0b2);const _0x1c90ba=$gameTemp[_0x1f0000(0x343)](),_0x300d19=BattleManager['_action'],_0x48e527=BattleManager[_0x1f0000(0xaad)],_0x2294e7=BattleManager['_allTargets']?BattleManager[_0x1f0000(0xaba)][_0x1f0000(0xab5)](0x0):[],_0x1ed544=BattleManager[_0x1f0000(0x8f1)];if(!_0x1c90ba||!_0x300d19||!_0x48e527)return;if(!_0x300d19[_0x1f0000(0xc47)]())return;if(_0x22b0b2['ApplyImmortal'])_0x1ed544['push']('applyImmortal',_0x48e527,_0x2294e7,![]);if(_0x22b0b2[_0x1f0000(0xc33)])_0x1ed544[_0x1f0000(0x205)](_0x1f0000(0xc52));if(_0x22b0b2[_0x1f0000(0x471)])_0x1ed544[_0x1f0000(0x205)](_0x1f0000(0xbc5));if(_0x22b0b2[_0x1f0000(0x18f)])_0x1ed544[_0x1f0000(0x205)](_0x1f0000(0x927));if(_0x22b0b2[_0x1f0000(0x9d8)])_0x1ed544[_0x1f0000(0x205)](_0x1f0000(0x224),_0x48e527);if(_0x22b0b2['WaitForMovement'])_0x1ed544['push']('waitForMovement');_0x1c90ba[_0x1f0000(0xa31)](_0x1f0000(0xb22));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x9a7),_0x8416ef=>{const _0x403e2f=_0x320868;if(!SceneManager[_0x403e2f(0x96d)]())return;if(!Imported[_0x403e2f(0xa68)])return;VisuMZ[_0x403e2f(0x630)](_0x8416ef,_0x8416ef);const _0xfdb1f5=$gameTemp[_0x403e2f(0x343)](),_0x15df7f=_0x8416ef[_0x403e2f(0x3f5)];if(!_0xfdb1f5)return;$gameScreen[_0x403e2f(0xb1c)](_0x8416ef[_0x403e2f(0x4b4)],_0x8416ef[_0x403e2f(0xa89)],_0x8416ef[_0x403e2f(0xa32)]);if(_0x15df7f)_0xfdb1f5['setWaitMode'](_0x403e2f(0x727));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x5ac),_0x3375da=>{const _0x336775=_0x320868;if(!SceneManager[_0x336775(0x96d)]())return;if(!Imported[_0x336775(0xa68)])return;VisuMZ['ConvertParams'](_0x3375da,_0x3375da);const _0x346989=$gameTemp[_0x336775(0x343)](),_0x398ef4=_0x3375da['WaitForAngle'];if(!_0x346989)return;$gameScreen[_0x336775(0xb1c)](0x0,_0x3375da[_0x336775(0xa89)],_0x3375da['EasingType']);if(_0x398ef4)_0x346989[_0x336775(0xa31)](_0x336775(0x727));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x871),_0x378c8c=>{const _0x104008=_0x320868;if(!SceneManager[_0x104008(0x96d)]())return;if(!Imported[_0x104008(0xa68)])return;const _0x2af4cb=$gameTemp[_0x104008(0x343)]();if(!_0x2af4cb)return;_0x2af4cb[_0x104008(0xa31)](_0x104008(0x727));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x454),_0x3e287a=>{const _0x3f3146=_0x320868;if(!SceneManager[_0x3f3146(0x96d)]())return;VisuMZ[_0x3f3146(0x630)](_0x3e287a,_0x3e287a);const _0x2781d7=$gameTemp['getLastPluginCommandInterpreter'](),_0x1dbfa1=BattleManager[_0x3f3146(0xba2)],_0x333009=BattleManager[_0x3f3146(0xaad)],_0x3153fc=VisuMZ[_0x3f3146(0x6a8)](_0x3e287a[_0x3f3146(0xa6d)]),_0x4e4c42=_0x3e287a[_0x3f3146(0x95f)],_0x31d35c=BattleManager['_logWindow'];if(!_0x2781d7||!_0x1dbfa1||!_0x333009)return;if(!_0x1dbfa1[_0x3f3146(0xc47)]())return;let _0x3282c5=_0x1dbfa1[_0x3f3146(0xc47)]()[_0x3f3146(0xb9b)];if(_0x3282c5<0x0)_0x3282c5=_0x333009[_0x3f3146(0xa52)]();$gameTemp['requestAnimation'](_0x3153fc,_0x3282c5,_0x4e4c42),_0x3e287a['WaitForAnimation']&&_0x2781d7[_0x3f3146(0xa31)]('battleAnimation');}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Animation_AttackAnimation',_0x2b6cc6=>{const _0x7c6a89=_0x320868;if(!SceneManager[_0x7c6a89(0x96d)]())return;VisuMZ[_0x7c6a89(0x630)](_0x2b6cc6,_0x2b6cc6);const _0x2808bc=$gameTemp[_0x7c6a89(0x343)](),_0x4238f7=BattleManager['_subject'],_0x942561=VisuMZ['CreateActionSequenceTargets'](_0x2b6cc6[_0x7c6a89(0xa6d)]),_0x3601a0=_0x2b6cc6['Mirror'],_0x3aee8b=BattleManager[_0x7c6a89(0x8f1)];if(!_0x2808bc||!_0x4238f7)return;const _0x34615f=_0x4238f7[_0x7c6a89(0xa52)]();$gameTemp[_0x7c6a89(0x416)](_0x942561,_0x34615f,_0x3601a0),_0x2b6cc6['WaitForAnimation']&&_0x2808bc[_0x7c6a89(0xa31)]('battleAnimation');}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x7b5),_0x5e4463=>{const _0x93d308=_0x320868;if(!SceneManager[_0x93d308(0x96d)]())return;VisuMZ['ConvertParams'](_0x5e4463,_0x5e4463);const _0x388a7f=_0x316c63['attackAnimationIdSlot'](_0x5e4463['Slot']);if(_0x388a7f<=0x0)return;const _0x7ad2ba=$gameTemp['getLastPluginCommandInterpreter'](),_0x316c63=BattleManager[_0x93d308(0xaad)],_0x57e537=VisuMZ['CreateActionSequenceTargets'](_0x5e4463[_0x93d308(0xa6d)]),_0x3a9944=_0x5e4463[_0x93d308(0x95f)],_0x3ae60c=BattleManager[_0x93d308(0x8f1)];if(!_0x7ad2ba||!_0x316c63)return;$gameTemp[_0x93d308(0x416)](_0x57e537,_0x388a7f,_0x3a9944),_0x5e4463['WaitForAnimation']&&_0x7ad2ba[_0x93d308(0xa31)](_0x93d308(0x3c4));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x75a),_0x180d45=>{const _0x529467=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x180d45,_0x180d45);const _0x255186=$gameTemp['getLastPluginCommandInterpreter'](),_0xa90177=VisuMZ[_0x529467(0x6a8)](_0x180d45[_0x529467(0xa6d)]),_0x15edd8=_0x180d45[_0x529467(0x4f4)];let _0x5b3616=0x0;switch(_0x15edd8['toUpperCase']()[_0x529467(0x761)]()){case'!':case _0x529467(0x60a):_0x5b3616=0x1;break;case'?':case _0x529467(0xb3d):_0x5b3616=0x2;break;case _0x529467(0x755):case _0x529467(0x83f):case _0x529467(0xc25):case _0x529467(0xb33):case _0x529467(0x73e):_0x5b3616=0x3;break;case _0x529467(0xbfb):case _0x529467(0xab0):_0x5b3616=0x4;break;case _0x529467(0x9ba):case _0x529467(0x202):_0x5b3616=0x5;break;case'SWEAT':_0x5b3616=0x6;break;case'COBWEB':case _0x529467(0xc50):case _0x529467(0xb74):_0x5b3616=0x7;break;case _0x529467(0x5c2):case'...':_0x5b3616=0x8;break;case _0x529467(0x7b0):case _0x529467(0x309):case _0x529467(0x250):case'LIGHT-BULB':case'LIGHTBULB':_0x5b3616=0x9;break;case'Z':case'ZZ':case _0x529467(0x589):case _0x529467(0x1ab):_0x5b3616=0xa;break;case _0x529467(0x680):_0x5b3616=0xb;break;case'USER-DEFINED\x202':_0x5b3616=0xc;break;case _0x529467(0x9ff):_0x5b3616=0xd;break;case'USER-DEFINED\x204':_0x5b3616=0xe;break;case _0x529467(0x6d1):_0x5b3616=0xf;break;}for(const _0x2af710 of _0xa90177){if(!_0x2af710)continue;$gameTemp[_0x529467(0x33f)](_0x2af710,_0x5b3616);}_0x180d45[_0x529467(0x817)]&&_0x255186&&(_0x255186[_0x529467(0x419)](0x1),_0x255186['setWaitMode'](_0x529467(0xbab)));}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Animation_BalloonIcon',_0xfb9160=>{const _0x253c06=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x253c06(0xb30)])return;VisuMZ['ConvertParams'](_0xfb9160,_0xfb9160);const _0xba4e97=$gameTemp[_0x253c06(0x343)](),_0x1edaec=VisuMZ[_0x253c06(0x6a8)](_0xfb9160[_0x253c06(0xa6d)]),_0x1d812c=_0xfb9160[_0x253c06(0x2ab)];for(const _0x577d2c of _0x1edaec){if(!_0x577d2c)continue;$gameTemp[_0x253c06(0x33f)](_0x577d2c,[_0x1d812c]);}_0xfb9160['WaitComplete']&&_0xba4e97&&(_0xba4e97[_0x253c06(0x419)](0x1),_0xba4e97[_0x253c06(0xa31)](_0x253c06(0xbab)));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Animation_BalloonIconRange',_0x3cfc6b=>{const _0x493a13=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x493a13(0x630)](_0x3cfc6b,_0x3cfc6b);const _0x3b0aee=$gameTemp['getLastPluginCommandInterpreter'](),_0x1c3452=VisuMZ[_0x493a13(0x6a8)](_0x3cfc6b[_0x493a13(0xa6d)]),_0xbeaad6=Math[_0x493a13(0x24f)](Number(_0x3cfc6b[_0x493a13(0x39d)]||0x0),Number(_0x3cfc6b[_0x493a13(0x58e)]||0x0)),_0x2cc15c=Math[_0x493a13(0x382)](Number(_0x3cfc6b['startIcon']||0x0),Number(_0x3cfc6b[_0x493a13(0x58e)]||0x0)),_0x1ee3cd=[];for(let _0x252001=_0xbeaad6;_0x252001<=_0x2cc15c;_0x252001++){_0x1ee3cd[_0x493a13(0x205)](_0x252001);}for(const _0x3345c6 of _0x1c3452){if(!_0x3345c6)continue;$gameTemp['requestBattleBalloon'](_0x3345c6,_0x1ee3cd);}_0x3cfc6b[_0x493a13(0x817)]&&_0x3b0aee&&(_0x3b0aee[_0x493a13(0x419)](0x1),_0x3b0aee[_0x493a13(0xa31)](_0x493a13(0xbab)));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x44d),_0x5bcaf3=>{const _0x361a5f=_0x320868;if(!SceneManager[_0x361a5f(0x96d)]())return;if(!Imported[_0x361a5f(0xb30)])return;VisuMZ[_0x361a5f(0x630)](_0x5bcaf3,_0x5bcaf3);const _0x250755=$gameTemp[_0x361a5f(0x343)](),_0x1c7fce=VisuMZ[_0x361a5f(0x6a8)](_0x5bcaf3[_0x361a5f(0xa6d)]),_0x19cb75=_0x5bcaf3[_0x361a5f(0x8a4)];for(const _0x433c8d of _0x1c7fce){if(!_0x433c8d)continue;$gameTemp[_0x361a5f(0x33f)](_0x433c8d,_0x19cb75);}_0x5bcaf3[_0x361a5f(0x817)]&&_0x250755&&(_0x250755[_0x361a5f(0x419)](0x1),_0x250755[_0x361a5f(0xa31)](_0x361a5f(0xbab)));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x41f),_0x32e8a7=>{const _0x36a0f5=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x32e8a7,_0x32e8a7);const _0x2efa0e=$gameTemp[_0x36a0f5(0x343)](),_0xf19a36=BattleManager['_action'],_0x25bf06=_0x32e8a7[_0x36a0f5(0x95f)],_0x1d0fb8=VisuMZ[_0x36a0f5(0x6a8)](_0x32e8a7['Targets']);if(!_0x2efa0e||!_0xf19a36)return;if(!_0xf19a36[_0x36a0f5(0xc47)]())return;for(const _0x29a7ad of _0x1d0fb8){if(!_0x29a7ad)continue;_0x29a7ad[_0x36a0f5(0x5c9)](_0xf19a36,_0x25bf06);}if(_0x32e8a7['WaitForAnimation'])_0x2efa0e[_0x36a0f5(0xa31)]('battleAnimation');}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x9fe),_0x1605bb=>{const _0x1c584c=_0x320868;VisuMZ[_0x1c584c(0x630)](_0x1605bb,_0x1605bb);const _0x2954f6=$gameTemp['getLastPluginCommandInterpreter'](),_0x547362=VisuMZ[_0x1c584c(0x6a8)](_0x1605bb[_0x1c584c(0xa6d)]),_0x1c9273=_0x1605bb['Filename'];if(!_0x1c9273)return;for(const _0x5c0df4 of _0x547362){if(!_0x5c0df4)continue;if(!_0x5c0df4[_0x1c584c(0x94e)]())continue;_0x5c0df4[_0x1c584c(0x604)](_0x1c9273);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x2cc825=>{const _0x212e36=_0x320868;VisuMZ[_0x212e36(0x630)](_0x2cc825,_0x2cc825);const _0x44073d=_0x2cc825[_0x212e36(0x95e)](),_0x40f66b=$gameActors['actor'](_0x44073d)||null;if(!_0x40f66b){console[_0x212e36(0x718)]('NO\x20ACTOR\x20FOUND!');return;}const _0x36a943=_0x2cc825['FilenameJS']();_0x40f66b[_0x212e36(0x604)](_0x36a943);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x486),_0x123d64=>{const _0x1c27e4=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1c27e4(0x630)](_0x123d64,_0x123d64);const _0x51a3c2=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ca157=BattleManager[_0x1c27e4(0xaad)],_0x35b73a=VisuMZ[_0x1c27e4(0x6a8)](_0x123d64[_0x1c27e4(0xa6d)]),_0x279210=_0x123d64[_0x1c27e4(0x95f)];if(!_0x51a3c2||!_0x5ca157)return;const _0x3629d8=$dataSkilles[_0x5ca157['guardSkillId']()],_0x493af6=_0x3629d8[_0x1c27e4(0xb9b)];$gameTemp[_0x1c27e4(0x416)](_0x35b73a,_0x493af6,_0x279210),_0x123d64[_0x1c27e4(0x6f2)]&&_0x51a3c2['setWaitMode'](_0x1c27e4(0x3c4));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x868),_0x12846b=>{const _0x598cd5=_0x320868;if(!SceneManager[_0x598cd5(0x96d)]())return;VisuMZ['ConvertParams'](_0x12846b,_0x12846b);const _0x343ce9=$gameTemp[_0x598cd5(0x343)](),_0x3ad1bd=VisuMZ[_0x598cd5(0x6a8)](_0x12846b[_0x598cd5(0xa6d)]),_0x387d2b=Number(_0x12846b['ItemID']||0x1),_0x133bfa=$dataItems[_0x387d2b],_0x26c188=_0x12846b['Mirror'];if(!_0x343ce9)return;if(!_0x133bfa)return;let _0x47dd4e=_0x133bfa[_0x598cd5(0xb9b)];$gameTemp['requestAnimation'](_0x3ad1bd,_0x47dd4e,_0x26c188),_0x12846b[_0x598cd5(0x6f2)]&&_0x343ce9[_0x598cd5(0xa31)](_0x598cd5(0x3c4));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x7e2),_0x4028e2=>{const _0x5c081a=_0x320868;if(!SceneManager[_0x5c081a(0x64a)])return;if(!SceneManager[_0x5c081a(0x64a)]['_spriteset'])return;if(!Imported[_0x5c081a(0x1c8)])return;VisuMZ[_0x5c081a(0x630)](_0x4028e2,_0x4028e2);const _0x25e25e=$gameTemp[_0x5c081a(0x343)](),_0x5d44fd=Math[_0x5c081a(0xa8c)](_0x4028e2[_0x5c081a(0xae8)]),_0x3cc2a4=Math[_0x5c081a(0xa8c)](_0x4028e2[_0x5c081a(0xa3a)]);$gameTemp[_0x5c081a(0x4cd)](_0x5d44fd,_0x3cc2a4,_0x4028e2[_0x5c081a(0x70a)],_0x4028e2[_0x5c081a(0x95f)],_0x4028e2[_0x5c081a(0x2dc)]),_0x4028e2[_0x5c081a(0x817)]&&_0x25e25e&&(SceneManager[_0x5c081a(0x64a)]['_spriteset'][_0x5c081a(0x952)](),_0x25e25e['setWaitMode'](_0x5c081a(0x3c4)));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xc20),_0x239eb1=>{const _0x2c190a=_0x320868;if(!SceneManager[_0x2c190a(0x96d)]())return;VisuMZ['ConvertParams'](_0x239eb1,_0x239eb1);const _0x59875e=$gameTemp[_0x2c190a(0x343)](),_0x14807a=VisuMZ[_0x2c190a(0x6a8)](_0x239eb1[_0x2c190a(0xa6d)]),_0x2cb07d=_0x239eb1[_0x2c190a(0x70a)],_0x2bc151=_0x239eb1['Mirror'];if(!_0x59875e)return;$gameTemp[_0x2c190a(0x416)](_0x14807a,_0x2cb07d,_0x2bc151);if(_0x239eb1[_0x2c190a(0x6f2)])_0x59875e[_0x2c190a(0xa31)](_0x2c190a(0x3c4));}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Animation_ShowAnimationJS',_0x4fcbdb=>{const _0xbe7c22=_0x320868;if(!SceneManager[_0xbe7c22(0x96d)]())return;VisuMZ[_0xbe7c22(0x630)](_0x4fcbdb,_0x4fcbdb);const _0x14f6a2=$gameTemp[_0xbe7c22(0x343)](),_0x5d37b9=VisuMZ[_0xbe7c22(0x6a8)](_0x4fcbdb[_0xbe7c22(0xa6d)]),_0x3a8dbb=Number(_0x4fcbdb[_0xbe7c22(0x70a)])||0x1,_0x5d241c=_0x4fcbdb[_0xbe7c22(0x95f)];if(!_0x14f6a2)return;$gameTemp[_0xbe7c22(0x416)](_0x5d37b9,_0x3a8dbb,_0x5d241c);if(_0x4fcbdb[_0xbe7c22(0x6f2)])_0x14f6a2[_0xbe7c22(0xa31)](_0xbe7c22(0x3c4));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Animation_SkillAnimation',_0xc259f1=>{const _0x15c5a6=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x15c5a6(0x630)](_0xc259f1,_0xc259f1);const _0x58f4e0=$gameTemp[_0x15c5a6(0x343)](),_0x1297f0=VisuMZ[_0x15c5a6(0x6a8)](_0xc259f1[_0x15c5a6(0xa6d)]),_0x18e043=Number(_0xc259f1['SkillID']||0x1),_0x59f0eb=$dataSkills[_0x18e043],_0x516c9d=_0xc259f1['Mirror'];if(!_0x58f4e0)return;if(!_0x59f0eb)return;let _0x2fb58=_0x59f0eb[_0x15c5a6(0xb9b)];$gameTemp['requestAnimation'](_0x1297f0,_0x2fb58,_0x516c9d),_0xc259f1[_0x15c5a6(0x6f2)]&&_0x58f4e0['setWaitMode']('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Animation_WaitForAnimation',_0x35b20c=>{const _0x32b11a=_0x320868;if(!SceneManager[_0x32b11a(0x96d)]())return;const _0x18d3d4=$gameTemp[_0x32b11a(0x343)]();if(!_0x18d3d4)return;_0x18d3d4[_0x32b11a(0xa31)](_0x32b11a(0x3c4));}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0x914),_0x36647f=>{const _0x4fc047=_0x320868;if(!SceneManager[_0x4fc047(0x96d)]())return;VisuMZ[_0x4fc047(0x630)](_0x36647f,_0x36647f);const _0x1acf73=BattleManager[_0x4fc047(0x8f1)],_0x77a7ac=_0x36647f[_0x4fc047(0x17b)]&&Imported[_0x4fc047(0x899)];_0x1acf73['addText'](_0x36647f[_0x4fc047(0xb7b)]),_0x77a7ac&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x4fc047(0x4b9)](_0x36647f[_0x4fc047(0xb7b)]||'',_0x36647f[_0x4fc047(0x813)]||0x0);}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x265),_0xdd2f13=>{const _0x44e094=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x5d8008=BattleManager[_0x44e094(0x8f1)];_0x5d8008[_0x44e094(0x927)]();}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x99d),_0x517f59=>{const _0x3c7298=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x1f6d25=$gameTemp['getLastPluginCommandInterpreter'](),_0x736ad7=BattleManager[_0x3c7298(0xba2)],_0x148ebd=BattleManager[_0x3c7298(0xaad)],_0x513e02=BattleManager[_0x3c7298(0x8f1)];if(!_0x1f6d25||!_0x736ad7||!_0x148ebd)return;if(!_0x736ad7[_0x3c7298(0xc47)]())return;_0x513e02[_0x3c7298(0x459)](_0x148ebd,_0x736ad7[_0x3c7298(0xc47)]()),_0x1f6d25[_0x3c7298(0xa31)]('battlelog');}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x584),_0x150b55=>{const _0x48b75e=_0x320868;if(!SceneManager[_0x48b75e(0x96d)]())return;const _0x88cf60=BattleManager[_0x48b75e(0x8f1)];_0x88cf60[_0x48b75e(0x5b0)]();}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x7a6),_0x16bc15=>{const _0x19598d=_0x320868;if(!SceneManager[_0x19598d(0x96d)]())return;const _0x435f8a=BattleManager['_logWindow'];_0x435f8a[_0x19598d(0x62c)]();}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x188),_0x404d0c=>{const _0x2ddf57=_0x320868;if(!SceneManager[_0x2ddf57(0x96d)]())return;const _0x3866d7=BattleManager[_0x2ddf57(0x8f1)];_0x3866d7[_0x2ddf57(0xbc2)]();}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x92e),_0x1f6fbf=>{const _0x3094b7=_0x320868;if(!SceneManager[_0x3094b7(0x96d)]())return;VisuMZ[_0x3094b7(0x630)](_0x1f6fbf,_0x1f6fbf),SceneManager[_0x3094b7(0x64a)][_0x3094b7(0xaa2)](_0x1f6fbf[_0x3094b7(0x4b6)]);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x431),_0x52ad71=>{const _0x38fa3e=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x316c53=$gameTemp['getLastPluginCommandInterpreter']();_0x316c53[_0x38fa3e(0xa31)](_0x38fa3e(0xb22));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x140),_0x3c344c=>{const _0x11f05f=_0x320868;if(!SceneManager[_0x11f05f(0x96d)]())return;const _0x25fcb8=$gameTemp[_0x11f05f(0x343)](),_0x36d05d=BattleManager[_0x11f05f(0x8f1)];_0x36d05d[_0x11f05f(0xc52)](),_0x25fcb8[_0x11f05f(0xa31)](_0x11f05f(0xb22));}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0xbbe),_0x576ebd=>{const _0x91a613=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x91a613(0x630)](_0x576ebd,_0x576ebd);const _0x3a9880=$gameScreen['battleCameraData']();_0x3a9880[_0x91a613(0x845)]=_0x576ebd[_0x91a613(0xbfe)];}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0x9a5),_0x29d6e2=>{const _0x5e5586=_0x320868;if(!SceneManager[_0x5e5586(0x96d)]())return;if(!Imported[_0x5e5586(0xa68)])return;VisuMZ[_0x5e5586(0x630)](_0x29d6e2,_0x29d6e2);const _0x33e84b=$gameTemp['getLastPluginCommandInterpreter'](),_0x3f7661=_0x29d6e2[_0x5e5586(0x288)];$gameScreen[_0x5e5586(0xb68)](_0x29d6e2[_0x5e5586(0xba0)],_0x29d6e2[_0x5e5586(0xa4a)],_0x29d6e2['Duration'],_0x29d6e2['EasingType']);if(_0x3f7661)_0x33e84b[_0x5e5586(0xa31)](_0x5e5586(0xab4));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x352),_0x22cb4b=>{const _0x137370=_0x320868;if(!SceneManager[_0x137370(0x96d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x137370(0x630)](_0x22cb4b,_0x22cb4b);const _0x43c5d8=$gameTemp[_0x137370(0x343)](),_0x4e5967=VisuMZ['CreateActionSequenceTargets'](_0x22cb4b[_0x137370(0xa6d)]),_0x874fb4=_0x22cb4b[_0x137370(0x288)];$gameScreen[_0x137370(0x5ad)](_0x4e5967,_0x22cb4b[_0x137370(0xa89)],_0x22cb4b[_0x137370(0xa32)]);if(_0x874fb4)_0x43c5d8[_0x137370(0xa31)](_0x137370(0xab4));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x700),_0xa33362=>{const _0x6ffc7a=_0x320868;if(!SceneManager[_0x6ffc7a(0x96d)]())return;if(!Imported[_0x6ffc7a(0xa68)])return;VisuMZ[_0x6ffc7a(0x630)](_0xa33362,_0xa33362);const _0x3b9614=$gameTemp['getLastPluginCommandInterpreter'](),_0x155dce=_0xa33362[_0x6ffc7a(0x288)];$gameScreen[_0x6ffc7a(0x958)](_0xa33362[_0x6ffc7a(0x71f)],_0xa33362[_0x6ffc7a(0xa83)],_0xa33362['Duration'],_0xa33362[_0x6ffc7a(0xa32)]);if(_0x155dce)_0x3b9614[_0x6ffc7a(0xa31)](_0x6ffc7a(0xab4));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x2bf),_0x9d7fd1=>{const _0x1538ef=_0x320868;if(!SceneManager[_0x1538ef(0x96d)]())return;if(!Imported[_0x1538ef(0xa68)])return;VisuMZ[_0x1538ef(0x630)](_0x9d7fd1,_0x9d7fd1);const _0x6dc5f7=$gameTemp[_0x1538ef(0x343)](),_0x52d609=_0x9d7fd1[_0x1538ef(0xa22)],_0x577f3b=_0x9d7fd1[_0x1538ef(0x984)],_0x31ee5b=_0x9d7fd1[_0x1538ef(0x288)];if(_0x52d609){const _0x144a67=Math[_0x1538ef(0xa8c)](Graphics[_0x1538ef(0x529)]/0x2),_0x59025d=Math[_0x1538ef(0xa8c)](Graphics[_0x1538ef(0x351)]/0x2);$gameScreen[_0x1538ef(0xb68)](_0x144a67,_0x59025d,_0x9d7fd1[_0x1538ef(0xa89)],_0x9d7fd1[_0x1538ef(0xa32)]);}_0x577f3b&&$gameScreen[_0x1538ef(0x958)](0x0,0x0,_0x9d7fd1['Duration'],_0x9d7fd1['EasingType']);if(_0x31ee5b)_0x6dc5f7['setWaitMode'](_0x1538ef(0xab4));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x284),_0x2cbdfd=>{const _0x6c0450=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x6c0450(0xa68)])return;const _0xd56f79=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xd56f79)return;_0xd56f79['setWaitMode'](_0x6c0450(0xab4));}),VisuMZ[_0x320868(0x5c8)][_0x320868(0x13f)]=function(_0x229763){const _0x5ff26b=_0x320868;_0x229763[_0x5ff26b(0x769)]='';const _0x59edfb=VisuMZ[_0x5ff26b(0x98c)]['CreateCutinSettings'](_0x229763),_0x5623b4=VisuMZ[_0x5ff26b(0x6a8)](_0x229763[_0x5ff26b(0xa6d)])[0x0]||null;return _0x5623b4&&(_0x59edfb[_0x5ff26b(0x769)]=_0x5623b4['visualCutinPortraitFilename'](),_0x59edfb[_0x5ff26b(0x3dc)]=_0x5623b4['visualCutinPortraitIndex'](),_0x59edfb[_0x5ff26b(0xb77)]=_0x5623b4[_0x5ff26b(0xc51)](),_0x59edfb[_0x5ff26b(0x15c)]=_0x5623b4[_0x5ff26b(0x4b0)](),_0x5623b4[_0x5ff26b(0xb8b)]()&&(_0x5623b4[_0x5ff26b(0x8c1)]()&&(_0x59edfb[_0x5ff26b(0x28b)]=!_0x59edfb[_0x5ff26b(0x28b)]),_0x5623b4[_0x5ff26b(0x726)]()&&(_0x59edfb[_0x5ff26b(0x912)]=!_0x59edfb[_0x5ff26b(0x912)]),_0x59edfb['portraitType']===_0x5ff26b(0x695)&&(_0x59edfb[_0x5ff26b(0x28b)]=!_0x59edfb[_0x5ff26b(0x28b)]),_0x229763['ExtraSettings'][_0x5ff26b(0x590)]&&(_0x59edfb['parallaxScrollX']*=-0x1),_0x229763[_0x5ff26b(0x283)][_0x5ff26b(0x84d)]&&(_0x59edfb[_0x5ff26b(0xb4f)]*=-0x1),_0x59edfb['parallaxHue']+=_0x229763[_0x5ff26b(0x283)][_0x5ff26b(0x869)]??0x0)),_0x59edfb;},PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x421),_0x471e54=>{const _0x266726=_0x320868;if(!SceneManager[_0x266726(0x96d)]())return;if(!Imported[_0x266726(0x6ae)])return;VisuMZ['ConvertParams'](_0x471e54,_0x471e54);const _0x15d63f=VisuMZ[_0x266726(0x5c8)]['CreateCutinSettings'](_0x471e54);SceneManager[_0x266726(0x64a)][_0x266726(0x330)](_0x15d63f);const _0x3225b0=$gameTemp[_0x266726(0x343)]();_0x3225b0&&_0x471e54[_0x266726(0x897)]&&_0x3225b0[_0x266726(0xa31)]('cutinEnter');}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0xa95),_0x3d86df=>{const _0x13fc6d=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x13fc6d(0x6ae)])return;VisuMZ['ConvertParams'](_0x3d86df,_0x3d86df),SceneManager[_0x13fc6d(0x64a)]['clearAllVisualCutins']();const _0x7b4c27=$gameTemp['getLastPluginCommandInterpreter']();_0x7b4c27&&_0x3d86df[_0x13fc6d(0x3a3)]&&_0x7b4c27[_0x13fc6d(0xa31)](_0x13fc6d(0x2b6));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x5ee),_0x1efdd9=>{const _0x1e76a9=_0x320868;if(!SceneManager[_0x1e76a9(0x96d)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x1e76a9(0x630)](_0x1efdd9,_0x1efdd9);const _0x1fec71=_0x1efdd9[_0x1e76a9(0x97c)][_0x1e76a9(0xc44)]()[_0x1e76a9(0x761)]();SceneManager[_0x1e76a9(0x64a)]['endVisualCutin'](_0x1fec71);const _0x216ed9=$gameTemp['getLastPluginCommandInterpreter']();_0x216ed9&&_0x1efdd9[_0x1e76a9(0x3a3)]&&_0x216ed9[_0x1e76a9(0xa31)](_0x1e76a9(0x2b6));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x9c4),_0x5ec0d9=>{const _0x5013aa=_0x320868;if(!SceneManager[_0x5013aa(0x96d)]())return;if(!Imported[_0x5013aa(0x6ae)])return;const _0x36be36=$gameTemp[_0x5013aa(0x343)]();_0x36be36[_0x5013aa(0xa31)](_0x5013aa(0xb9c));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x943),_0x300e3e=>{const _0x3f783a=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3f783a(0x6ae)])return;const _0x51e498=$gameTemp['getLastPluginCommandInterpreter']();_0x51e498[_0x3f783a(0xa31)](_0x3f783a(0x2b6));}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0x300),_0x43975c=>{const _0x3b1bfc=_0x320868;if(!SceneManager[_0x3b1bfc(0x96d)]())return;if(!Imported[_0x3b1bfc(0x9fb)])return;VisuMZ[_0x3b1bfc(0x630)](_0x43975c,_0x43975c);const _0x35a98a=VisuMZ['CreateActionSequenceTargets'](_0x43975c[_0x3b1bfc(0xa6d)]),_0x3bbe33=_0x43975c[_0x3b1bfc(0x904)][_0x3b1bfc(0xc44)]()[_0x3b1bfc(0x761)]();for(const _0x12a088 of _0x35a98a){if(!_0x12a088)continue;_0x12a088[_0x3b1bfc(0xb41)](_0x3bbe33);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x493),_0x168b9d=>{const _0x56eb81=_0x320868;if(!SceneManager[_0x56eb81(0x96d)]())return;if(!Imported[_0x56eb81(0x9fb)])return;VisuMZ['ConvertParams'](_0x168b9d,_0x168b9d);const _0x1d1005=VisuMZ[_0x56eb81(0x6a8)](_0x168b9d[_0x56eb81(0xa6d)]),_0x578596=_0x168b9d['TimeScale'];for(const _0x219637 of _0x1d1005){if(!_0x219637)continue;_0x219637[_0x56eb81(0x6d8)]()[_0x56eb81(0x2d7)]=_0x578596;}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xb2f),_0x29aa02=>{const _0x7aaa1a=_0x320868;if(!SceneManager[_0x7aaa1a(0x96d)]())return;if(!Imported[_0x7aaa1a(0x357)])return;VisuMZ['ConvertParams'](_0x29aa02,_0x29aa02);const _0x3cbad6=BattleManager['_action'],_0x470966=_0x29aa02[_0x7aaa1a(0x302)];if(!_0x3cbad6)return;_0x3cbad6[_0x7aaa1a(0x856)]=_0x470966;}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Element_Clear',_0x14edb3=>{const _0x2c61d3=_0x320868;if(!SceneManager[_0x2c61d3(0x96d)]())return;if(!Imported[_0x2c61d3(0x357)])return;const _0x4df24e=BattleManager[_0x2c61d3(0xba2)];if(!_0x4df24e)return;_0x4df24e[_0x2c61d3(0x180)]();}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Element_ForceElements',_0x491578=>{const _0x515a41=_0x320868;if(!SceneManager[_0x515a41(0x96d)]())return;if(!Imported[_0x515a41(0x357)])return;VisuMZ['ConvertParams'](_0x491578,_0x491578);const _0x280944=BattleManager[_0x515a41(0xba2)],_0x4619de=_0x491578[_0x515a41(0x302)];if(!_0x280944)return;_0x280944[_0x515a41(0x27b)]=_0x4619de;}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xbcd),_0x32396e=>{const _0x643384=_0x320868;if(!SceneManager[_0x643384(0x96d)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x5a1145=BattleManager['_action'];if(!_0x5a1145)return;_0x5a1145[_0x643384(0x696)]=!![];}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x8b7),_0x475eeb=>{const _0x8064a8=_0x320868;VisuMZ[_0x8064a8(0x469)][_0x8064a8(0x8b7)](_0x475eeb);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xc3a),_0x4b92e1=>{const _0xc0570a=_0x320868;VisuMZ[_0xc0570a(0x469)]['ActSeq_Grid_AddPassiveStatesToNode'](_0x4b92e1);}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x674),_0x26770c=>{const _0x2db2f8=_0x320868;VisuMZ[_0x2db2f8(0x469)]['ActSeq_Grid_AddTriggerToNode'](_0x26770c);}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x1bc),_0x7fafd7=>{const _0x209a69=_0x320868;VisuMZ[_0x209a69(0x469)][_0x209a69(0x674)](_0x7fafd7);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xa17),_0x319e06=>{const _0x363bb8=_0x320868;VisuMZ[_0x363bb8(0x469)]['ActSeq_Grid_AnimationIDAtNode'](_0x319e06);}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x58c),_0x846dcc=>{const _0x6e3b73=_0x320868;VisuMZ[_0x6e3b73(0x469)]['ActSeq_Grid_AnimationJsAtNode'](_0x846dcc);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x17f),_0x1b2407=>{const _0x58abfe=_0x320868;VisuMZ[_0x58abfe(0x469)][_0x58abfe(0x17f)](_0x1b2407);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x76b),_0x2400e4=>{const _0x3dc898=_0x320868;VisuMZ[_0x3dc898(0x469)]['ActSeq_Grid_ClearPassiveStatesFromNode'](_0x2400e4);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xa60),_0x2c752a=>{const _0x27dcd5=_0x320868;VisuMZ[_0x27dcd5(0x469)][_0x27dcd5(0xa60)](_0x2c752a);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x32e),_0x300647=>{const _0x2cf8d6=_0x320868;VisuMZ[_0x2cf8d6(0x469)]['ActSeq_Grid_PullToTargetNode'](_0x300647);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x29e),_0x3dfbe8=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_PushFromTargetNode'](_0x3dfbe8);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Grid_RemovePassiveStatesFromNode',_0x2229c9=>{const _0x85cdb=_0x320868;VisuMZ[_0x85cdb(0x469)][_0x85cdb(0x146)](_0x2229c9);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x5e4),_0xe27040=>{const _0x1ee0be=_0x320868;VisuMZ['BattleGridSystem'][_0x1ee0be(0x5e4)](_0xe27040);}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x444),_0x1f114f=>{const _0x1d5171=_0x320868;VisuMZ[_0x1d5171(0x469)][_0x1d5171(0x444)](_0x1f114f);}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x6ee),_0x568aa6=>{const _0x186fed=_0x320868;VisuMZ[_0x186fed(0x469)][_0x186fed(0x6ee)](_0x568aa6);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x25e),_0x2b9782=>{const _0x483e9f=_0x320868;if(!Imported[_0x483e9f(0x3db)])return;if(!SceneManager[_0x483e9f(0x96d)]())return;VisuMZ[_0x483e9f(0x630)](_0x2b9782,_0x2b9782);const _0x4d480b=VisuMZ[_0x483e9f(0x6a8)](_0x2b9782['Targets']);for(const _0x4f3d7e of _0x4d480b){if(!_0x4f3d7e)continue;_0x4f3d7e[_0x483e9f(0x753)](_0x483e9f(0x269)),_0x4f3d7e[_0x483e9f(0x753)](_0x483e9f(0xc54)),_0x4f3d7e[_0x483e9f(0x753)]('tv'),_0x4f3d7e['clearHorrorEffects']();}$gamePlayer[_0x483e9f(0xbc2)]();}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Horror_GlitchCreate',_0x48ab94=>{const _0x22f60a=_0x320868;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x22f60a(0x96d)]())return;VisuMZ[_0x22f60a(0x630)](_0x48ab94,_0x48ab94);const _0x2ec8ff=VisuMZ[_0x22f60a(0x6a8)](_0x48ab94[_0x22f60a(0xa6d)]),_0x150178=_0x22f60a(0xc54);_0x48ab94[_0x22f60a(0x62d)]=Math[_0x22f60a(0x5e5)](_0x48ab94['slices']/0x2),_0x48ab94[_0x22f60a(0x795)]=_0x48ab94['slices'],_0x48ab94[_0x22f60a(0x971)]=!![];for(const _0x3d1178 of _0x2ec8ff){if(!_0x3d1178)continue;_0x3d1178[_0x22f60a(0x2a4)](_0x150178,_0x48ab94);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0xb98),_0x43a363=>{const _0x4382f8=_0x320868;if(!Imported[_0x4382f8(0x3db)])return;if(!SceneManager[_0x4382f8(0x96d)]())return;VisuMZ[_0x4382f8(0x630)](_0x43a363,_0x43a363);const _0x491a=VisuMZ[_0x4382f8(0x6a8)](_0x43a363[_0x4382f8(0xa6d)]);for(const _0x522457 of _0x491a){if(!_0x522457)continue;_0x522457[_0x4382f8(0x753)](_0x4382f8(0xc54));}$gamePlayer[_0x4382f8(0xbc2)]();}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x649),_0x4121b1=>{const _0x39cc57=_0x320868;if(!Imported[_0x39cc57(0x3db)])return;if(!SceneManager[_0x39cc57(0x96d)]())return;VisuMZ[_0x39cc57(0x630)](_0x4121b1,_0x4121b1);const _0x1ad7e9=VisuMZ[_0x39cc57(0x6a8)](_0x4121b1['Targets']),_0x4f68ba=_0x39cc57(0x269);for(const _0x55f6e1 of _0x1ad7e9){if(!_0x55f6e1)continue;_0x55f6e1[_0x39cc57(0x2a4)](_0x4f68ba,_0x4121b1);}$gamePlayer[_0x39cc57(0xbc2)]();}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0x473),_0x404642=>{const _0x3e466e=_0x320868;if(!Imported[_0x3e466e(0x3db)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3e466e(0x630)](_0x404642,_0x404642);const _0x1a8dd1=VisuMZ[_0x3e466e(0x6a8)](_0x404642[_0x3e466e(0xa6d)]);for(const _0x5d59f8 of _0x1a8dd1){if(!_0x5d59f8)continue;_0x5d59f8['removeHorrorEffect'](_0x3e466e(0x269));}$gamePlayer['refresh']();}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Horror_TVCreate',_0x420af8=>{const _0x496aea=_0x320868;if(!Imported[_0x496aea(0x3db)])return;if(!SceneManager[_0x496aea(0x96d)]())return;VisuMZ[_0x496aea(0x630)](_0x420af8,_0x420af8);const _0x273d50=VisuMZ[_0x496aea(0x6a8)](_0x420af8['Targets']),_0x3b2352='tv';for(const _0x5233b4 of _0x273d50){if(!_0x5233b4)continue;_0x5233b4['setHorrorEffectSettings'](_0x3b2352,_0x420af8);}$gamePlayer[_0x496aea(0xbc2)]();}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xbce),_0x5138b4=>{const _0xa14593=_0x320868;if(!Imported[_0xa14593(0x3db)])return;if(!SceneManager[_0xa14593(0x96d)]())return;VisuMZ['ConvertParams'](_0x5138b4,_0x5138b4);const _0x1d7427=VisuMZ[_0xa14593(0x6a8)](_0x5138b4[_0xa14593(0xa6d)]);for(const _0xe5b183 of _0x1d7427){if(!_0xe5b183)continue;_0xe5b183['removeHorrorEffect']('tv');}$gamePlayer['refresh']();}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x31a),_0x4b1d9e=>{const _0x38a80f=_0x320868;if(!Imported[_0x38a80f(0x4e4)])return;const _0xd9189d=SceneManager[_0x38a80f(0x64a)][_0x38a80f(0xa26)];if(!_0xd9189d)return;if(VisuMZ[_0x38a80f(0x9c5)]['version']<=1.04){alert(_0x38a80f(0x7c0)),SceneManager['exit']();return;}VisuMZ[_0x38a80f(0x630)](_0x4b1d9e,_0x4b1d9e);const _0x1f50a8=_0x4b1d9e[_0x38a80f(0xa2e)];_0xd9189d[_0x38a80f(0x1f7)](_0x1f50a8);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Impact_ColorBreak',_0x36ad0d=>{const _0x131c34=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x131c34(0x4e4)])return;const _0x3104c2=SceneManager[_0x131c34(0x64a)][_0x131c34(0xa26)];if(!_0x3104c2)return;VisuMZ[_0x131c34(0x630)](_0x36ad0d,_0x36ad0d);const _0x2390ed=_0x36ad0d[_0x131c34(0x22f)]||0x1,_0x44d319=_0x36ad0d[_0x131c34(0xa89)]||0x1,_0x364b34=_0x36ad0d[_0x131c34(0xa32)]||_0x131c34(0x4ff);_0x3104c2[_0x131c34(0x3f2)](_0x2390ed,_0x44d319,_0x364b34);}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x7eb),_0x11d5ff=>{const _0x6af7a8=_0x320868;if(!Imported[_0x6af7a8(0x4e4)])return;const _0x45bb87=SceneManager[_0x6af7a8(0x64a)][_0x6af7a8(0xa26)];if(!_0x45bb87)return;if(VisuMZ['ActSeqImpact'][_0x6af7a8(0x43b)]<=1.04){alert(_0x6af7a8(0x7c0)),SceneManager['exit']();return;}VisuMZ[_0x6af7a8(0x630)](_0x11d5ff,_0x11d5ff);const _0x13b938=_0x11d5ff[_0x6af7a8(0xa2e)];_0x45bb87[_0x6af7a8(0x464)](_0x13b938);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Impact_MotionBlurScreen',_0x3da202=>{const _0x13f31e=_0x320868;if(!SceneManager[_0x13f31e(0x96d)]())return;if(!Imported[_0x13f31e(0x4e4)])return;const _0x3a49b6=SceneManager['_scene'][_0x13f31e(0xa26)];if(!_0x3a49b6)return;VisuMZ['ConvertParams'](_0x3da202,_0x3da202);const _0x49f557=Number(_0x3da202[_0x13f31e(0x4b4)])||0x0,_0x2ccd9d=Number(_0x3da202[_0x13f31e(0xa7b)]),_0x1f9893=_0x3da202[_0x13f31e(0xa89)]||0x1,_0x17ba56=_0x3da202[_0x13f31e(0xa32)]||_0x13f31e(0x4ff);_0x3a49b6[_0x13f31e(0x7e8)](_0x49f557,_0x2ccd9d,_0x1f9893,_0x17ba56);}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0xb25),_0x21c8bf=>{const _0x323ed9=_0x320868;if(!SceneManager[_0x323ed9(0x96d)]())return;if(!Imported[_0x323ed9(0x4e4)])return;const _0x447784=SceneManager[_0x323ed9(0x64a)][_0x323ed9(0xa26)];if(!_0x447784)return;VisuMZ['ConvertParams'](_0x21c8bf,_0x21c8bf);const _0x1e4f50=Number(_0x21c8bf[_0x323ed9(0x4b4)])||0x0,_0x1fdc5c=Number(_0x21c8bf['Rate']),_0x527f15=_0x21c8bf[_0x323ed9(0xa89)]||0x1,_0x34fdd9=_0x21c8bf[_0x323ed9(0xa32)]||_0x323ed9(0x4ff),_0x2241b6=VisuMZ[_0x323ed9(0x6a8)](_0x21c8bf['Targets']);for(const _0x405320 of _0x2241b6){if(!_0x405320)continue;if(!_0x405320[_0x323ed9(0xb31)]())continue;_0x405320[_0x323ed9(0xb31)]()[_0x323ed9(0x7e8)](_0x1e4f50,_0x1fdc5c,_0x527f15,_0x34fdd9);}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0xc16),_0x4f53d9=>{const _0x8d8d6b=_0x320868;if(!SceneManager[_0x8d8d6b(0x96d)]())return;if(!Imported[_0x8d8d6b(0x4e4)])return;VisuMZ[_0x8d8d6b(0x630)](_0x4f53d9,_0x4f53d9);const _0x421a51={'delay':_0x4f53d9['delay'],'duration':_0x4f53d9[_0x8d8d6b(0x320)],'hue':_0x4f53d9[_0x8d8d6b(0x9e1)],'opacityStart':_0x4f53d9['opacityStart'],'tone':_0x4f53d9[_0x8d8d6b(0x6c1)],'visible':!![]},_0x4b07ac=VisuMZ[_0x8d8d6b(0x6a8)](_0x4f53d9[_0x8d8d6b(0xa6d)]);for(const _0x1d0501 of _0x4b07ac){if(!_0x1d0501)continue;_0x1d0501[_0x8d8d6b(0xabf)](_0x421a51);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Impact_MotionTrailRemove',_0x4e676c=>{const _0x48deb2=_0x320868;if(!SceneManager[_0x48deb2(0x96d)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x4e676c,_0x4e676c);const _0x5413ce=VisuMZ[_0x48deb2(0x6a8)](_0x4e676c[_0x48deb2(0xa6d)]);for(const _0x540395 of _0x5413ce){if(!_0x540395)continue;_0x540395[_0x48deb2(0x648)]();}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x80c),_0x99d5f3=>{const _0x1d81a4=_0x320868;if(!Imported[_0x1d81a4(0x4e4)])return;const _0x2b7509=SceneManager[_0x1d81a4(0x64a)][_0x1d81a4(0xa26)];if(!_0x2b7509)return;if(VisuMZ['ActSeqImpact'][_0x1d81a4(0x43b)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x1d81a4(0x630)](_0x99d5f3,_0x99d5f3);const _0x1f2b36=_0x99d5f3[_0x1d81a4(0xa2e)];_0x2b7509[_0x1d81a4(0x832)](_0x1f2b36);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x142),_0x3e82b9=>{const _0x1397ce=_0x320868;if(!Imported[_0x1397ce(0x4e4)])return;const _0x1eae92=SceneManager[_0x1397ce(0x64a)][_0x1397ce(0xa26)];if(!_0x1eae92)return;if(VisuMZ[_0x1397ce(0x9c5)][_0x1397ce(0x43b)]<=1.04){alert(_0x1397ce(0x7c0)),SceneManager[_0x1397ce(0x9d9)]();return;}VisuMZ['ConvertParams'](_0x3e82b9,_0x3e82b9);const _0x222cdb=_0x3e82b9[_0x1397ce(0xa2e)];_0x1eae92[_0x1397ce(0x462)](_0x222cdb);}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Impact_ShockwavePoint',_0x3baaf6=>{const _0x3349ae=_0x320868;if(!Imported[_0x3349ae(0x4e4)])return;const _0x29f2c2=SceneManager[_0x3349ae(0x64a)][_0x3349ae(0xa26)];if(!_0x29f2c2)return;VisuMZ['ConvertParams'](_0x3baaf6,_0x3baaf6);const _0x64056f=_0x3baaf6['X']||0x0,_0x4e4f20=_0x3baaf6['Y']||0x0,_0x383cc7=_0x3baaf6[_0x3349ae(0x8fe)]||0x0,_0x4878d1=_0x3baaf6[_0x3349ae(0x704)]||0x0,_0x457db8=_0x3baaf6['Duration']||0x1;_0x29f2c2[_0x3349ae(0x56c)](_0x64056f,_0x4e4f20,_0x383cc7,_0x4878d1,_0x457db8);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Impact_ShockwaveEachTargets',_0x38a272=>{const _0x4f941b=_0x320868;if(!SceneManager[_0x4f941b(0x96d)]())return;if(!Imported[_0x4f941b(0x4e4)])return;const _0x16c651=SceneManager['_scene'][_0x4f941b(0xa26)];if(!_0x16c651)return;VisuMZ[_0x4f941b(0x630)](_0x38a272,_0x38a272);const _0x5c6384=VisuMZ[_0x4f941b(0x6a8)](_0x38a272['Targets']),_0x197c5b=_0x38a272[_0x4f941b(0x12c)],_0x25db38=_0x38a272[_0x4f941b(0x71f)]||0x0,_0x28a1bf=_0x38a272[_0x4f941b(0xa83)]||0x0,_0x3efba6=_0x38a272[_0x4f941b(0x8fe)]||0x0,_0x229d61=_0x38a272[_0x4f941b(0x704)]||0x0,_0x2cba14=_0x38a272[_0x4f941b(0xa89)]||0x1;for(const _0x4df9a4 of _0x5c6384){if(!_0x4df9a4)continue;if(!_0x4df9a4['battler']())continue;const _0xe0f9d5=_0x4df9a4['battler']();let _0x3103ff=_0xe0f9d5['_baseX'],_0x266915=_0xe0f9d5['_baseY'];_0x3103ff+=(Graphics[_0x4f941b(0x529)]-Graphics['boxWidth'])/0x2,_0x266915+=(Graphics[_0x4f941b(0x351)]-Graphics[_0x4f941b(0x66c)])/0x2;if(_0x197c5b[_0x4f941b(0x2e0)](/front/i))_0x3103ff+=(_0x4df9a4[_0x4f941b(0xb8b)]()?0x1:-0x1)*_0xe0f9d5['mainSpriteWidth']()/0x2;else _0x197c5b['match'](/back/i)&&(_0x3103ff+=(_0x4df9a4[_0x4f941b(0xb8b)]()?-0x1:0x1)*_0xe0f9d5[_0x4f941b(0x342)]()/0x2);if(_0x197c5b[_0x4f941b(0x2e0)](/head/i))_0x266915-=_0xe0f9d5['mainSpriteHeight']();else _0x197c5b['match'](/center/i)&&(_0x266915-=_0xe0f9d5[_0x4f941b(0x764)]()/0x2);_0x3103ff+=_0x25db38,_0x266915+=_0x28a1bf,_0x16c651[_0x4f941b(0x56c)](_0x3103ff,_0x266915,_0x3efba6,_0x229d61,_0x2cba14);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x195),_0x11e423=>{const _0x4f01af=_0x320868;if(!SceneManager[_0x4f01af(0x96d)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3c100b=SceneManager[_0x4f01af(0x64a)][_0x4f01af(0xa26)];if(!_0x3c100b)return;VisuMZ[_0x4f01af(0x630)](_0x11e423,_0x11e423);const _0x517b25=VisuMZ[_0x4f01af(0x6a8)](_0x11e423['Targets']),_0xe1ff4f=_0x11e423[_0x4f01af(0x12c)],_0x1aa2fd=_0x11e423[_0x4f01af(0x71f)]||0x0,_0xad4462=_0x11e423[_0x4f01af(0xa83)]||0x0,_0x410c86=_0x11e423['Amp']||0x0,_0x46a031=_0x11e423[_0x4f01af(0x704)]||0x0,_0x4c794d=_0x11e423[_0x4f01af(0xa89)]||0x1,_0x4aeca6=Math['min'](..._0x517b25['map'](_0x51df1f=>_0x51df1f[_0x4f01af(0xb31)]()[_0x4f01af(0xb8e)]-_0x51df1f[_0x4f01af(0xb31)]()[_0x4f01af(0x342)]()/0x2)),_0x20fec5=Math[_0x4f01af(0x382)](..._0x517b25[_0x4f01af(0x200)](_0x354086=>_0x354086[_0x4f01af(0xb31)]()[_0x4f01af(0xb8e)]+_0x354086['battler']()[_0x4f01af(0x342)]()/0x2)),_0x50b3dd=Math[_0x4f01af(0x24f)](..._0x517b25['map'](_0x1b0fac=>_0x1b0fac[_0x4f01af(0xb31)]()[_0x4f01af(0xba4)]-_0x1b0fac[_0x4f01af(0xb31)]()[_0x4f01af(0x764)]())),_0x2d0f9c=Math[_0x4f01af(0x382)](..._0x517b25[_0x4f01af(0x200)](_0x5ce9af=>_0x5ce9af[_0x4f01af(0xb31)]()['_baseY'])),_0x268062=_0x517b25[_0x4f01af(0x477)](_0x551486=>_0x551486[_0x4f01af(0x94e)]())['length'],_0x90d76b=_0x517b25[_0x4f01af(0x477)](_0x5bd2ed=>_0x5bd2ed['isEnemy']())[_0x4f01af(0x4c1)];let _0x49a34d=0x0,_0x4e72d7=0x0;if(_0xe1ff4f[_0x4f01af(0x2e0)](/front/i))_0x49a34d=_0x268062>=_0x90d76b?_0x4aeca6:_0x20fec5;else{if(_0xe1ff4f[_0x4f01af(0x2e0)](/middle/i))_0x49a34d=(_0x4aeca6+_0x20fec5)/0x2,melee=-0x1;else _0xe1ff4f[_0x4f01af(0x2e0)](/back/i)&&(_0x49a34d=_0x268062>=_0x90d76b?_0x20fec5:_0x4aeca6);}if(_0xe1ff4f['match'](/head/i))_0x4e72d7=_0x50b3dd;else{if(_0xe1ff4f[_0x4f01af(0x2e0)](/center/i))_0x4e72d7=(_0x50b3dd+_0x2d0f9c)/0x2;else _0xe1ff4f[_0x4f01af(0x2e0)](/base/i)&&(_0x4e72d7=_0x2d0f9c);}_0x49a34d+=(Graphics[_0x4f01af(0x529)]-Graphics[_0x4f01af(0x23d)])/0x2,_0x4e72d7+=(Graphics[_0x4f01af(0x351)]-Graphics['boxHeight'])/0x2,_0x49a34d+=_0x1aa2fd,_0x4e72d7+=_0xad4462,_0x3c100b[_0x4f01af(0x56c)](_0x49a34d,_0x4e72d7,_0x410c86,_0x46a031,_0x4c794d);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x183),_0x16b744=>{const _0x2d4466=_0x320868;if(!Imported[_0x2d4466(0x4e4)])return;const _0x40fe80=SceneManager[_0x2d4466(0x64a)][_0x2d4466(0xa26)];if(!_0x40fe80)return;if(VisuMZ[_0x2d4466(0x9c5)][_0x2d4466(0x43b)]<=1.04){alert(_0x2d4466(0x7c0)),SceneManager[_0x2d4466(0x9d9)]();return;}VisuMZ['ConvertParams'](_0x16b744,_0x16b744);const _0x2fdba4=$gameTemp[_0x2d4466(0x343)](),_0x80f2f7=Math['max'](0.01,_0x16b744[_0x2d4466(0x92f)]);$gameTemp[_0x2d4466(0x78d)](_0x80f2f7,_0x2fdba4);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x380),_0x10c1bc=>{const _0x50ae37=_0x320868;if(!Imported[_0x50ae37(0x4e4)])return;const _0x376fc3=SceneManager[_0x50ae37(0x64a)][_0x50ae37(0xa26)];if(!_0x376fc3)return;if(VisuMZ[_0x50ae37(0x9c5)][_0x50ae37(0x43b)]<=1.04){alert(_0x50ae37(0x7c0)),SceneManager[_0x50ae37(0x9d9)]();return;}VisuMZ[_0x50ae37(0x630)](_0x10c1bc,_0x10c1bc);const _0x6a8445=$gameTemp[_0x50ae37(0x343)](),_0x1c0d51=_0x10c1bc['ms']||0x1;VisuMZ[_0x50ae37(0x9c5)][_0x50ae37(0xc3b)](_0x1c0d51,_0x6a8445);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x5ed),_0x50abb8=>{const _0x11960f=_0x320868;if(!Imported[_0x11960f(0x4e4)])return;const _0x3ba4bd=SceneManager[_0x11960f(0x64a)][_0x11960f(0xa26)];if(!_0x3ba4bd)return;VisuMZ[_0x11960f(0x630)](_0x50abb8,_0x50abb8);const _0x4917e9=_0x50abb8['X']||0x0,_0x2c94ec=_0x50abb8['Y']||0x0,_0x1f60d6=_0x50abb8[_0x11960f(0x822)]||0x0,_0x15f853=_0x50abb8[_0x11960f(0x3c2)]||0x0,_0x41c7e5=_0x50abb8[_0x11960f(0xa89)]||0x1,_0x49c5bb=_0x50abb8[_0x11960f(0xa32)]||'Linear';_0x3ba4bd[_0x11960f(0x16c)](_0x1f60d6,_0x4917e9,_0x2c94ec,_0x15f853,_0x41c7e5,_0x49c5bb);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x650),_0x49b1f7=>{const _0x16b71d=_0x320868;if(!Imported[_0x16b71d(0x4e4)])return;const _0x447b42=SceneManager[_0x16b71d(0x64a)]['_spriteset'];if(!_0x447b42)return;VisuMZ[_0x16b71d(0x630)](_0x49b1f7,_0x49b1f7);const _0x47f786=VisuMZ['CreateActionSequenceTargets'](_0x49b1f7[_0x16b71d(0xa6d)]),_0x4c6287=_0x49b1f7[_0x16b71d(0x12c)],_0x3ae922=_0x49b1f7[_0x16b71d(0x71f)]||0x0,_0xff47d8=_0x49b1f7[_0x16b71d(0xa83)]||0x0,_0x51be71=_0x49b1f7[_0x16b71d(0x822)]||0x0,_0x161c73=_0x49b1f7[_0x16b71d(0x3c2)]||0x0,_0x2abbd7=_0x49b1f7[_0x16b71d(0xa89)]||0x1,_0x5a6ce2=_0x49b1f7['EasingType']||_0x16b71d(0x4ff),_0x3c20cc=Math['min'](..._0x47f786[_0x16b71d(0x200)](_0x2acb97=>_0x2acb97['battler']()[_0x16b71d(0xb8e)]-_0x2acb97['battler']()[_0x16b71d(0x342)]()/0x2)),_0x4b6b42=Math[_0x16b71d(0x382)](..._0x47f786[_0x16b71d(0x200)](_0x5b1835=>_0x5b1835['battler']()[_0x16b71d(0xb8e)]+_0x5b1835[_0x16b71d(0xb31)]()[_0x16b71d(0x342)]()/0x2)),_0x5e6607=Math[_0x16b71d(0x24f)](..._0x47f786[_0x16b71d(0x200)](_0x54d6cb=>_0x54d6cb[_0x16b71d(0xb31)]()[_0x16b71d(0xba4)]-_0x54d6cb[_0x16b71d(0xb31)]()[_0x16b71d(0x764)]())),_0x2b096f=Math[_0x16b71d(0x382)](..._0x47f786[_0x16b71d(0x200)](_0x572e6d=>_0x572e6d[_0x16b71d(0xb31)]()[_0x16b71d(0xba4)])),_0x1df691=_0x47f786[_0x16b71d(0x477)](_0x1aa0ed=>_0x1aa0ed[_0x16b71d(0x94e)]())[_0x16b71d(0x4c1)],_0x238295=_0x47f786['filter'](_0x3a9a8a=>_0x3a9a8a[_0x16b71d(0xb8b)]())[_0x16b71d(0x4c1)];let _0x3903c8=0x0,_0x4487e6=0x0;if(_0x4c6287[_0x16b71d(0x2e0)](/front/i))_0x3903c8=_0x1df691>=_0x238295?_0x3c20cc:_0x4b6b42;else{if(_0x4c6287[_0x16b71d(0x2e0)](/middle/i))_0x3903c8=(_0x3c20cc+_0x4b6b42)/0x2,melee=-0x1;else _0x4c6287[_0x16b71d(0x2e0)](/back/i)&&(_0x3903c8=_0x1df691>=_0x238295?_0x4b6b42:_0x3c20cc);}if(_0x4c6287['match'](/head/i))_0x4487e6=_0x5e6607;else{if(_0x4c6287[_0x16b71d(0x2e0)](/center/i))_0x4487e6=(_0x5e6607+_0x2b096f)/0x2;else _0x4c6287['match'](/base/i)&&(_0x4487e6=_0x2b096f);}_0x3903c8+=(Graphics[_0x16b71d(0x529)]-Graphics['boxWidth'])/0x2,_0x4487e6+=(Graphics[_0x16b71d(0x351)]-Graphics[_0x16b71d(0x66c)])/0x2,_0x3903c8+=_0x3ae922,_0x4487e6+=_0xff47d8,_0x447b42[_0x16b71d(0x16c)](_0x51be71,_0x3903c8,_0x4487e6,_0x161c73,_0x2abbd7,_0x5a6ce2);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Inject_AnimationStart',_0x4a6353=>{const _0x3ae240=_0x320868;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x39e5a4=SceneManager['_scene']['_spriteset'];if(!_0x39e5a4)return;if(VisuMZ[_0x3ae240(0x9c5)][_0x3ae240(0x43b)]<=1.05){alert(_0x3ae240(0x7c0)),SceneManager[_0x3ae240(0x9d9)]();return;}VisuMZ['ConvertParams'](_0x4a6353,_0x4a6353);const _0x568602=VisuMZ[_0x3ae240(0x6a8)](_0x4a6353[_0x3ae240(0xa6d)]),_0x3207f3={'filename':_0x4a6353['Filename'],'horzCells':_0x4a6353['horzCells']||0x1,'vertCells':_0x4a6353[_0x3ae240(0x9c9)]||0x1,'frameDelay':_0x4a6353[_0x3ae240(0x9aa)]||0x1,'smooth':_0x4a6353['smooth']||![],'anchorX':_0x4a6353['anchorX']||0x0,'anchorY':_0x4a6353[_0x3ae240(0x9fc)]||0x0,'offsetX':_0x4a6353[_0x3ae240(0x8ee)]||0x0,'offsetY':_0x4a6353['offsetY']||0x0};for(const _0x43928c of _0x568602){if(!_0x43928c)continue;if(!_0x43928c[_0x3ae240(0xb31)]())continue;_0x43928c[_0x3ae240(0xb31)]()[_0x3ae240(0x3bd)](_0x3207f3);}const _0x4624a5=$gameTemp[_0x3ae240(0x343)]();_0x4624a5&&_0x4624a5['setWaitMode'](_0x3ae240(0x7f8));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x475),_0x1382e6=>{const _0x61d5d3=_0x320868;if(!Imported[_0x61d5d3(0x4e4)])return;const _0x353dc6=SceneManager['_scene']['_spriteset'];if(!_0x353dc6)return;if(VisuMZ[_0x61d5d3(0x9c5)]['version']<=1.05){alert(_0x61d5d3(0x7c0)),SceneManager[_0x61d5d3(0x9d9)]();return;}VisuMZ[_0x61d5d3(0x630)](_0x1382e6,_0x1382e6);const _0x5f688e=VisuMZ[_0x61d5d3(0x6a8)](_0x1382e6[_0x61d5d3(0xa6d)]);for(const _0x5b9c9d of _0x5f688e){if(!_0x5b9c9d)continue;if(!_0x5b9c9d[_0x61d5d3(0xb31)]())continue;_0x5b9c9d[_0x61d5d3(0xb31)]()['stopInjectAnimation']();}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0xa9d),_0x44b394=>{const _0x243912=_0x320868;if(!Imported[_0x243912(0x4e4)])return;const _0x52a0f3=SceneManager[_0x243912(0x64a)]['_spriteset'];if(!_0x52a0f3)return;if(VisuMZ[_0x243912(0x9c5)][_0x243912(0x43b)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x243912(0x630)](_0x44b394,_0x44b394);const _0xc7c86e=VisuMZ['CreateActionSequenceTargets'](_0x44b394[_0x243912(0xa6d)]),_0x52dc68=_0x44b394[_0x243912(0x2b1)];for(const _0x2b973f of _0xc7c86e){if(!_0x2b973f)continue;if(!_0x2b973f[_0x243912(0xb31)]())continue;_0x2b973f[_0x243912(0xb31)]()[_0x243912(0x975)](_0x52dc68);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Inject_WaitForInjectAni',_0x40bcac=>{const _0x43473f=_0x320868;if(!SceneManager[_0x43473f(0x96d)]())return;const _0x137236=$gameTemp[_0x43473f(0x343)]();if(!_0x137236)return;_0x137236[_0x43473f(0xa31)](_0x43473f(0x602));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x436),_0x2085b2=>{const _0x132498=_0x320868;if(!SceneManager[_0x132498(0x96d)]())return;VisuMZ[_0x132498(0x630)](_0x2085b2,_0x2085b2);const _0x29ea6c=$gameTemp[_0x132498(0x343)](),_0x50bf10=BattleManager[_0x132498(0xba2)],_0x1d729d=BattleManager[_0x132498(0xaad)],_0x280a8a=BattleManager[_0x132498(0x8f1)];if(!_0x29ea6c||!_0x50bf10||!_0x1d729d)return;if(!_0x50bf10[_0x132498(0xc47)]())return;const _0x490059=VisuMZ[_0x132498(0x6a8)](_0x2085b2[_0x132498(0xa6d)]);for(const _0x5eb80e of _0x490059){if(!_0x5eb80e)continue;_0x280a8a[_0x132498(0x205)]('actionEffect',_0x1d729d,_0x5eb80e);}_0x29ea6c[_0x132498(0xa31)]('battlelog');}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x858),_0x4851ed=>{const _0x10e185=_0x320868;if(!SceneManager[_0x10e185(0x96d)]())return;if(!Imported[_0x10e185(0x3f1)])return;$gameTemp[_0x10e185(0x9f2)]=!![];}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_AddBuffDebuff',_0x4f77f0=>{const _0xa8a33d=_0x320868;if(!SceneManager[_0xa8a33d(0x96d)]())return;VisuMZ[_0xa8a33d(0x630)](_0x4f77f0,_0x4f77f0);const _0x40c300=[_0xa8a33d(0x5c0),_0xa8a33d(0x144),_0xa8a33d(0xb19),_0xa8a33d(0x2ba),_0xa8a33d(0x770),_0xa8a33d(0x3ea),_0xa8a33d(0x87c),_0xa8a33d(0x91f)],_0x13c0be=_0x4f77f0['Buffs'],_0x4449a4=_0x4f77f0[_0xa8a33d(0x172)],_0x194aa5=_0x4f77f0[_0xa8a33d(0x9da)],_0x508910=VisuMZ[_0xa8a33d(0x6a8)](_0x4f77f0[_0xa8a33d(0xa6d)]);for(const _0x3d6c37 of _0x508910){if(!_0x3d6c37)continue;for(const _0x399f6c of _0x13c0be){const _0x59fe44=_0x40c300[_0xa8a33d(0x77f)](_0x399f6c[_0xa8a33d(0x2c8)]()[_0xa8a33d(0x761)]());_0x59fe44>=0x0&&_0x59fe44<=0x7&&_0x3d6c37[_0xa8a33d(0x242)](_0x59fe44,_0x194aa5);}for(const _0xa3d1c0 of _0x4449a4){const _0x3f3631=_0x40c300[_0xa8a33d(0x77f)](_0xa3d1c0['toUpperCase']()[_0xa8a33d(0x761)]());_0x3f3631>=0x0&&_0x3f3631<=0x7&&_0x3d6c37[_0xa8a33d(0x571)](_0x3f3631,_0x194aa5);}}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_AddState',_0x1b827d=>{const _0x1fff19=_0x320868;if(!SceneManager[_0x1fff19(0x96d)]())return;VisuMZ[_0x1fff19(0x630)](_0x1b827d,_0x1b827d);const _0x4e8303=_0x1b827d[_0x1fff19(0xaa7)],_0x47da5a=VisuMZ[_0x1fff19(0x6a8)](_0x1b827d['Targets']);for(const _0x378de0 of _0x47da5a){if(!_0x378de0)continue;for(const _0x589551 of _0x4e8303){_0x378de0['addState'](_0x589551);}}}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Mechanics_ArmorPenetration',_0x1f7101=>{const _0x3944c0=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1f7101,_0x1f7101);const _0x2f864c=BattleManager['_action'],_0x2d9bba={'arPenRate':_0x1f7101[_0x3944c0(0xa33)],'arPenFlat':_0x1f7101[_0x3944c0(0x530)],'arRedRate':_0x1f7101['ArRedRate'],'arRedFlat':_0x1f7101[_0x3944c0(0xabd)]};_0x2f864c['_armorPenetration']=_0x2d9bba;}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0xb84),_0x4e1a84=>{const _0x3be1ea=_0x320868;if(!SceneManager[_0x3be1ea(0x96d)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ['ConvertParams'](_0x4e1a84,_0x4e1a84);const _0x534181=VisuMZ['CreateActionSequenceTargets'](_0x4e1a84[_0x3be1ea(0xa6d)]),_0x30f80c=_0x4e1a84[_0x3be1ea(0x20f)]||0x1;for(const _0x1ba17b of _0x534181){if(!_0x1ba17b)continue;if(!_0x1ba17b['isEnemy']())continue;_0x1ba17b[_0x3be1ea(0xc1e)](_0x30f80c);}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0xaff),_0x27dd2b=>{const _0x272153=_0x320868;if(!SceneManager[_0x272153(0x96d)]())return;if(!Imported[_0x272153(0x29b)])return;if(!BattleManager[_0x272153(0xb29)]())return;VisuMZ[_0x272153(0x630)](_0x27dd2b,_0x27dd2b);const _0x2c81dc=VisuMZ[_0x272153(0x6a8)](_0x27dd2b['Targets']),_0x2eb84e=_0x27dd2b[_0x272153(0x3bf)],_0x7f2ab9=_0x27dd2b[_0x272153(0x3bf)],_0x2e8561=_0x27dd2b[_0x272153(0x412)];for(const _0x26e5db of _0x2c81dc){if(!_0x26e5db)continue;if(_0x26e5db[_0x272153(0xa72)]())_0x26e5db[_0x272153(0x801)](_0x2eb84e);else{if(_0x26e5db[_0x272153(0xa1d)]()){_0x26e5db[_0x272153(0x979)](_0x7f2ab9);if(_0x2e8561)_0x26e5db[_0x272153(0xbad)]();}}}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x417),_0x9e58af=>{const _0xd45ec8=_0x320868;if(!SceneManager[_0xd45ec8(0x96d)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ['ConvertParams'](_0x9e58af,_0x9e58af);const _0x3901d0=VisuMZ['CreateActionSequenceTargets'](_0x9e58af[_0xd45ec8(0xa6d)]),_0x4e6759=_0x9e58af[_0xd45ec8(0x4bf)];for(const _0xf69876 of _0x3901d0){if(!_0xf69876)continue;_0xf69876[_0xd45ec8(0xbd9)](_0x4e6759);}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_BoostPointsStoreData',_0x183d7d=>{const _0xb285e0=_0x320868;if(!SceneManager[_0xb285e0(0x96d)]())return;if(!Imported[_0xb285e0(0x9dd)])return;if(!BattleManager['_subject'])return;VisuMZ[_0xb285e0(0x630)](_0x183d7d,_0x183d7d);const _0x3b37c3=_0x183d7d[_0xb285e0(0x814)];$gameVariables['setValue'](_0x3b37c3,BattleManager[_0xb285e0(0xaad)][_0xb285e0(0x191)]());}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x966),_0x328f00=>{const _0x1ce90c=_0x320868;if(!SceneManager[_0x1ce90c(0x96d)]())return;if(!Imported[_0x1ce90c(0x6bb)])return;VisuMZ[_0x1ce90c(0x630)](_0x328f00,_0x328f00);const _0x436c2a=VisuMZ[_0x1ce90c(0x6a8)](_0x328f00[_0x1ce90c(0xa6d)]),_0x15d4b2=_0x328f00[_0x1ce90c(0x933)];for(const _0x10f53e of _0x436c2a){if(!_0x10f53e)continue;if(_0x10f53e[_0x1ce90c(0x916)]())continue;if(!_0x10f53e[_0x1ce90c(0x939)]())continue;_0x10f53e[_0x1ce90c(0x3ee)](_0x15d4b2);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0xb96),_0x92e329=>{const _0x5411ed=_0x320868;if(!SceneManager[_0x5411ed(0x96d)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x5411ed(0x630)](_0x92e329,_0x92e329);const _0x2bcc00=VisuMZ['CreateActionSequenceTargets'](_0x92e329['Targets']);for(const _0x389940 of _0x2bcc00){if(!_0x389940)continue;if(_0x389940['isBreakStunned']())continue;if(!_0x389940[_0x5411ed(0x939)]())continue;_0x389940[_0x5411ed(0x5a3)]();}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x2df),_0x29ffcc=>{const _0x16de3c=_0x320868;if(!SceneManager[_0x16de3c(0x96d)]())return;if(!Imported[_0x16de3c(0x798)])return;if(!BattleManager[_0x16de3c(0x732)]())return;VisuMZ[_0x16de3c(0x630)](_0x29ffcc,_0x29ffcc);const _0x58c804=VisuMZ['CreateActionSequenceTargets'](_0x29ffcc[_0x16de3c(0xa6d)]),_0x34ac49=_0x29ffcc[_0x16de3c(0x88d)];for(const _0x3ff231 of _0x58c804){if(!_0x3ff231)continue;_0x3ff231[_0x16de3c(0x217)](_0x34ac49);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Mechanics_Collapse',_0x461862=>{const _0x27a673=_0x320868;if(!SceneManager[_0x27a673(0x96d)]())return;VisuMZ[_0x27a673(0x630)](_0x461862,_0x461862);const _0x1954df=$gameTemp[_0x27a673(0x343)](),_0x206613=BattleManager[_0x27a673(0xba2)],_0x3fcb67=BattleManager[_0x27a673(0xaad)];if(!_0x1954df||!_0x206613||!_0x3fcb67)return;if(!_0x206613[_0x27a673(0xc47)]())return;const _0x395eb9=VisuMZ[_0x27a673(0x6a8)](_0x461862[_0x27a673(0xa6d)]);for(const _0x4dd7ab of _0x395eb9){if(!_0x4dd7ab)continue;_0x461862['ForceDeath']&&(_0x4dd7ab[_0x27a673(0x4e3)](),_0x4dd7ab[_0x27a673(0x6fc)](_0x4dd7ab[_0x27a673(0x220)]())),_0x4dd7ab[_0x27a673(0x2c3)]()&&_0x4dd7ab[_0x27a673(0x6f9)]();}_0x1954df[_0x27a673(0xa31)](_0x27a673(0x578));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x993),_0x288403=>{const _0xd492ca=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xd492ca(0x617)])return;if(!BattleManager[_0xd492ca(0x166)]())return;VisuMZ[_0xd492ca(0x630)](_0x288403,_0x288403);const _0x1fa2a4=VisuMZ[_0xd492ca(0x6a8)](_0x288403[_0xd492ca(0xa6d)]),_0x2375c1=_0x288403[_0xd492ca(0xa92)];for(const _0x20de99 of _0x1fa2a4){if(!_0x20de99)continue;_0x20de99[_0xd492ca(0x31e)](_0x2375c1);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x492),_0x20a02b=>{const _0x5008c3=_0x320868;if(!SceneManager[_0x5008c3(0x96d)]())return;if(!Imported[_0x5008c3(0x617)])return;if(!BattleManager[_0x5008c3(0x166)]())return;VisuMZ[_0x5008c3(0x630)](_0x20a02b,_0x20a02b);const _0x565d80=VisuMZ[_0x5008c3(0x6a8)](_0x20a02b[_0x5008c3(0xa6d)]),_0x4043a8=_0x20a02b[_0x5008c3(0x3bf)],_0xfbf47e=_0x20a02b[_0x5008c3(0x3bf)];for(const _0x5a920c of _0x565d80){if(!_0x5a920c)continue;if(_0x5a920c[_0x5008c3(0x96a)]===_0x5008c3(0xb36))_0x5a920c['changeCtbChargeTime'](_0x4043a8);else _0x5a920c['_tpbState']===_0x5008c3(0x9a3)&&_0x5a920c[_0x5008c3(0xa2a)](_0xfbf47e);}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_CustomDmgFormula',_0x217e04=>{const _0x36f695=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x36f695(0x630)](_0x217e04,_0x217e04);const _0xd2ecf5=BattleManager['_action'];if(!_0xd2ecf5)return;let _0x56e5b8=_0x217e04[_0x36f695(0xc37)];_0xd2ecf5['setCustomDamageFormula'](_0x56e5b8);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x8ba),_0x4dd6bb=>{const _0x48d7b2=_0x320868;if(!SceneManager[_0x48d7b2(0x96d)]())return;VisuMZ['ConvertParams'](_0x4dd6bb,_0x4dd6bb);const _0x5c1351=VisuMZ[_0x48d7b2(0x6a8)](_0x4dd6bb['Targets']);for(const _0x1ab8d1 of _0x5c1351){if(!_0x1ab8d1)continue;if(_0x1ab8d1['shouldPopupDamage']())_0x1ab8d1[_0x48d7b2(0xac1)]();}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x16b),_0x2e2483=>{const _0x1d15fb=_0x320868;if(!SceneManager[_0x1d15fb(0x96d)]())return;VisuMZ[_0x1d15fb(0x630)](_0x2e2483,_0x2e2483);const _0x4782d3=$gameTemp[_0x1d15fb(0x343)](),_0x2bc0ad=BattleManager[_0x1d15fb(0xaad)],_0x4d75de=_0x2e2483['JumpToLabel'];if(!_0x4782d3)return;if(!_0x2bc0ad)return;_0x2bc0ad&&_0x2bc0ad[_0x1d15fb(0x3e3)]()&&_0x4d75de[_0x1d15fb(0x2c8)]()['trim']()!==_0x1d15fb(0x706)&&_0x4782d3[_0x1d15fb(0x9bd)]([_0x4d75de]);}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x854),_0x4f9527=>{const _0x579c6d=_0x320868;if(!SceneManager[_0x579c6d(0x96d)]())return;VisuMZ['ConvertParams'](_0x4f9527,_0x4f9527);const _0x1fea84=$gameTemp[_0x579c6d(0x343)](),_0x5b78a9=BattleManager[_0x579c6d(0x8f1)];if(!_0x1fea84)return;const _0x1fc3ee=VisuMZ[_0x579c6d(0x6a8)](_0x4f9527[_0x579c6d(0x141)]),_0x246da7=VisuMZ[_0x579c6d(0x6a8)](_0x4f9527[_0x579c6d(0xa6d)]);for(const _0x48c0b7 of _0x1fc3ee){for(const _0x5b2d9a of _0x246da7){if(!_0x5b2d9a)continue;const _0x18d0fe=$dataSkills[_0x48c0b7[_0x579c6d(0x9b2)]()];_0x5b78a9[_0x579c6d(0x205)](_0x579c6d(0x24d),_0x48c0b7,_0x5b2d9a,_0x18d0fe);}}_0x1fea84[_0x579c6d(0xa31)](_0x579c6d(0xb22));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x26f),_0x3a41a4=>{const _0x216a4e=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x216a4e(0x630)](_0x3a41a4,_0x3a41a4);const _0x231bb1=$gameTemp['getLastPluginCommandInterpreter'](),_0x318bd9=BattleManager[_0x216a4e(0x8f1)];if(!_0x231bb1)return;const _0x2d2552=VisuMZ[_0x216a4e(0x6a8)](_0x3a41a4[_0x216a4e(0x141)]),_0x26bc92=VisuMZ[_0x216a4e(0x6a8)](_0x3a41a4[_0x216a4e(0xa6d)]);for(const _0x48b43d of _0x2d2552){for(const _0x3bb6a9 of _0x26bc92){if(!_0x3bb6a9)continue;const _0x20cb2f=$dataSkills[_0x48b43d[_0x216a4e(0xaec)]()];_0x318bd9[_0x216a4e(0x205)](_0x216a4e(0x24d),_0x48b43d,_0x3bb6a9,_0x20cb2f);}}_0x231bb1[_0x216a4e(0xa31)](_0x216a4e(0xb22));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x22b),_0x37e02e=>{const _0x68e537=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x68e537(0x630)](_0x37e02e,_0x37e02e);const _0x16549b=$gameTemp[_0x68e537(0x343)](),_0x1a16cc=BattleManager[_0x68e537(0x8f1)],_0xd98e24=Number(_0x37e02e[_0x68e537(0x439)]||0x1),_0x3baf70=$dataItems[_0xd98e24];if(!_0x16549b)return;if(!_0x3baf70)return;const _0x348de8=VisuMZ['CreateActionSequenceTargets'](_0x37e02e[_0x68e537(0x141)]),_0x3f5f00=VisuMZ[_0x68e537(0x6a8)](_0x37e02e[_0x68e537(0xa6d)]);for(const _0x432077 of _0x348de8){for(const _0x3f68f1 of _0x3f5f00){if(!_0x3f68f1)continue;_0x1a16cc['push']('emulateActionEffect',_0x432077,_0x3f68f1,_0x3baf70);}}_0x16549b[_0x68e537(0xa31)](_0x68e537(0xb22));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x63b),_0x780cf6=>{const _0x3f4de0=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3f4de0(0x630)](_0x780cf6,_0x780cf6);let _0x18bee1=Number(_0x780cf6['SkillID']||0x0);if(_0x18bee1<=0x0){const _0x10441a=BattleManager[_0x3f4de0(0xba2)];if(_0x10441a&&_0x10441a[_0x3f4de0(0x7cf)]())_0x18bee1=_0x10441a['item']()['id'];else return;}const _0x51f4ee=$dataSkills[_0x18bee1];if(!_0x51f4ee)return;const _0x51b589=VisuMZ['CreateActionSequenceTargets'](_0x780cf6[_0x3f4de0(0x141)]);for(const _0x11dd9e of _0x51b589){_0x11dd9e[_0x3f4de0(0x35b)](_0x51f4ee);}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x5b2),_0x3d5d63=>{const _0x6b9ab8=_0x320868;if(!SceneManager[_0x6b9ab8(0x96d)]())return;VisuMZ[_0x6b9ab8(0x630)](_0x3d5d63,_0x3d5d63);const _0x91cb17=$gameTemp[_0x6b9ab8(0x343)](),_0x3351ba=BattleManager[_0x6b9ab8(0x8f1)],_0x546aa0=Number(_0x3d5d63['SkillID']||0x1),_0x84c180=$dataSkills[_0x546aa0];if(!_0x91cb17)return;if(!_0x84c180)return;const _0x5eb9f1=VisuMZ[_0x6b9ab8(0x6a8)](_0x3d5d63[_0x6b9ab8(0x141)]),_0x1eeb56=VisuMZ[_0x6b9ab8(0x6a8)](_0x3d5d63['Targets']);for(const _0x2e840c of _0x5eb9f1){for(const _0x3fd9cb of _0x1eeb56){if(!_0x3fd9cb)continue;_0x3351ba[_0x6b9ab8(0x205)](_0x6b9ab8(0x24d),_0x2e840c,_0x3fd9cb,_0x84c180);}}_0x91cb17[_0x6b9ab8(0xa31)](_0x6b9ab8(0xb22));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x8cc),_0x3ed6c4=>{const _0x2e27b0=_0x320868;if(!SceneManager[_0x2e27b0(0x96d)]())return;VisuMZ[_0x2e27b0(0x630)](_0x3ed6c4,_0x3ed6c4);const _0x113ac8=VisuMZ[_0x2e27b0(0x6a8)](_0x3ed6c4[_0x2e27b0(0xa6d)]);for(const _0x5180b2 of _0x113ac8){if(!_0x5180b2)continue;if(!_0x5180b2[_0x2e27b0(0xb8b)]())continue;_0x5180b2[_0x2e27b0(0x4c9)]();}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x76f),_0x4b72eb=>{const _0x231769=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x231769(0xa67)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x231769(0x630)](_0x4b72eb,_0x4b72eb);const _0x3e42cb=_0x4b72eb[_0x231769(0xc63)];BattleManager[_0x231769(0xaad)]&&BattleManager[_0x231769(0xaad)][_0x231769(0xc67)]()[_0x231769(0xb5e)](_0x3e42cb);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x833),_0x5b8e6f=>{const _0x1cbfff=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1cbfff(0x316)])return;if(!BattleManager[_0x1cbfff(0x3a6)]())return;VisuMZ[_0x1cbfff(0x630)](_0x5b8e6f,_0x5b8e6f);const _0x447bee=_0x5b8e6f[_0x1cbfff(0xc63)];BattleManager['_subject']&&BattleManager[_0x1cbfff(0xaad)][_0x1cbfff(0xc67)]()[_0x1cbfff(0x861)](_0x447bee);}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x4af),_0x46f575=>{const _0x4f2cbd=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4f2cbd(0x630)](_0x46f575,_0x46f575);const _0xad2341=VisuMZ['CreateActionSequenceTargets'](_0x46f575[_0x4f2cbd(0xa6d)]),_0x166113=_0x46f575[_0x4f2cbd(0x9db)],_0xf63b59=_0x46f575[_0x4f2cbd(0x404)],_0x5bf819=_0x46f575[_0x4f2cbd(0xb3f)],_0x387636=_0x46f575[_0x4f2cbd(0x4dd)],_0x1263c7=_0x46f575[_0x4f2cbd(0x25c)],_0x52c5b2=_0x46f575[_0x4f2cbd(0xc3e)],_0x22eb56=_0x46f575[_0x4f2cbd(0x376)];for(const _0x2af7aa of _0xad2341){if(!_0x2af7aa)continue;const _0x174c6d=_0x2af7aa[_0x4f2cbd(0x174)](),_0x12fc1d=Math['round'](_0x166113*_0x2af7aa[_0x4f2cbd(0x36d)]+_0xf63b59),_0x107a39=Math[_0x4f2cbd(0xa8c)](_0x5bf819*_0x2af7aa[_0x4f2cbd(0x5f0)]+_0x387636),_0x3c9b3a=Math['round'](_0x1263c7*_0x2af7aa[_0x4f2cbd(0xaaa)]()+_0x52c5b2);if(_0x12fc1d!==0x0)_0x2af7aa['gainHp'](_0x12fc1d);if(_0x107a39!==0x0)_0x2af7aa[_0x4f2cbd(0x4f5)](_0x107a39);if(_0x3c9b3a!==0x0)_0x2af7aa['gainTp'](_0x3c9b3a);if(_0x22eb56)_0x2af7aa[_0x4f2cbd(0xac1)]();_0x174c6d&&_0x2af7aa['isDead']()&&_0x2af7aa[_0x4f2cbd(0x6f9)]();}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_Immortal',_0x3579b5=>{const _0x40a4b0=_0x320868;if(!SceneManager[_0x40a4b0(0x96d)]())return;VisuMZ[_0x40a4b0(0x630)](_0x3579b5,_0x3579b5);const _0x2b05ca=VisuMZ['CreateActionSequenceTargets'](_0x3579b5[_0x40a4b0(0xa6d)]);for(const _0x4aa002 of _0x2b05ca){if(!_0x4aa002)continue;_0x4aa002[_0x40a4b0(0x511)](_0x3579b5[_0x40a4b0(0x354)]);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x981),_0x3f353c=>{const _0xc871e4=_0x320868;if(!SceneManager[_0xc871e4(0x96d)]())return;VisuMZ[_0xc871e4(0x630)](_0x3f353c,_0x3f353c);const _0x35752f=BattleManager[_0xc871e4(0xba2)],_0x1d3767={'criticalHitRate':_0x3f353c[_0xc871e4(0x8cd)],'criticalHitFlat':_0x3f353c[_0xc871e4(0xb9d)],'criticalDmgRate':_0x3f353c[_0xc871e4(0x2c6)],'criticalDmgFlat':_0x3f353c[_0xc871e4(0x6db)],'damageRate':_0x3f353c[_0xc871e4(0x8c5)],'damageFlat':_0x3f353c[_0xc871e4(0x78c)],'hitRate':_0x3f353c[_0xc871e4(0x3e7)],'hitFlat':_0x3f353c[_0xc871e4(0x537)]};_0x35752f['_multipliers']=_0x1d3767;}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_OnceParallel',_0x17c504=>{const _0x2459a0=_0x320868;if(!SceneManager[_0x2459a0(0x96d)]())return;VisuMZ[_0x2459a0(0x630)](_0x17c504,_0x17c504);const _0x234828=_0x17c504['CommonEventID'];SceneManager[_0x2459a0(0x64a)][_0x2459a0(0x392)](_0x234828);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x487),_0x1bbb35=>{const _0x1b8384=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1b8384(0x603)])return;if(!BattleManager[_0x1b8384(0x892)]())return;VisuMZ['ConvertParams'](_0x1bbb35,_0x1bbb35);const _0x4be801=VisuMZ['CreateActionSequenceTargets'](_0x1bbb35['Targets']);for(const _0x4366d of _0x4be801){if(!_0x4366d)continue;let _0x29518d=_0x1bbb35[_0x1b8384(0x40a)],_0x5eb6f7=_0x1bbb35[_0x1b8384(0x643)],_0x5b5a06=_0x1bbb35[_0x1b8384(0x61e)];BattleManager[_0x1b8384(0x463)][_0x1b8384(0x6d2)](_0x4366d)?_0x29518d+=_0x5b5a06:_0x5eb6f7+=_0x5b5a06,BattleManager[_0x1b8384(0x64b)](_0x4366d,-_0x29518d,![]),BattleManager[_0x1b8384(0x64b)](_0x4366d,-_0x5eb6f7,!![]);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x75e),_0x56ec3e=>{const _0x3bc51c=_0x320868;if(!SceneManager[_0x3bc51c(0x96d)]())return;if(!Imported[_0x3bc51c(0x266)])return;if(!BattleManager[_0x3bc51c(0x54e)]())return;VisuMZ['ConvertParams'](_0x56ec3e,_0x56ec3e);const _0x3f7114=BattleManager[_0x3bc51c(0xaad)][_0x3bc51c(0xc67)](),_0x5b9bc3=_0x56ec3e[_0x3bc51c(0x831)],_0x326676=_0x56ec3e[_0x3bc51c(0x53e)]||_0x3bc51c(0x907),_0x11ad5d=_0x56ec3e[_0x3bc51c(0x797)]||'unchanged',_0x124224=_0x56ec3e[_0x3bc51c(0x8f6)]||0x0,_0x4338a5=_0x56ec3e['alterPriority']||0x0;(_0x3f7114[_0x3bc51c(0xbbf)]()||_0x5b9bc3)&&(_0x5b9bc3&&(_0x3f7114[_0x3bc51c(0x5dc)]=_0x3f7114[_0x3bc51c(0x5dc)]||{},_0x3f7114[_0x3bc51c(0x5dc)][_0x3bc51c(0x923)]=0x0),_0x3f7114[_0x3bc51c(0x500)](_0x326676,_0x11ad5d,_0x124224,_0x4338a5));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x59e),_0x15ac64=>{const _0x1a2b09=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1a2b09(0x266)])return;if(!BattleManager[_0x1a2b09(0x54e)]())return;VisuMZ[_0x1a2b09(0x630)](_0x15ac64,_0x15ac64);const _0x470f81=BattleManager[_0x1a2b09(0xaad)]['friendsUnit']();let _0x9d6a1c=Math[_0x1a2b09(0x382)](_0x15ac64[_0x1a2b09(0xad6)],0x0),_0x1029da=_0x470f81[_0x1a2b09(0x1bd)](),_0x3af9d3=_0x470f81[_0x1a2b09(0x98e)]();while(_0x9d6a1c--){if(_0x1029da<=0x0&&_0x3af9d3<=0x0)break;else _0x1029da>0x0?(_0x1029da--,_0x3af9d3++):_0x3af9d3--;}_0x470f81[_0x1a2b09(0x4d9)](_0x1029da),_0x470f81[_0x1a2b09(0x49f)](_0x3af9d3);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_PtbFullHalfAction',_0x192945=>{const _0x5a37f2=_0x320868;if(!SceneManager[_0x5a37f2(0x96d)]())return;if(!Imported[_0x5a37f2(0x266)])return;if(!BattleManager[_0x5a37f2(0x54e)]())return;VisuMZ['ConvertParams'](_0x192945,_0x192945);const _0x4bc171=BattleManager[_0x5a37f2(0xaad)][_0x5a37f2(0xc67)]();let _0x1101fd=_0x192945['FullActions'],_0x512668=_0x192945[_0x5a37f2(0x1b5)];_0x4bc171[_0x5a37f2(0x2d3)](_0x1101fd),_0x4bc171[_0x5a37f2(0xadc)](_0x512668);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x60e),_0x37aa73=>{const _0x5611f8=_0x320868;if(!SceneManager[_0x5611f8(0x96d)]())return;VisuMZ[_0x5611f8(0x630)](_0x37aa73,_0x37aa73);const _0x167c82=['MAXHP',_0x5611f8(0x144),_0x5611f8(0xb19),_0x5611f8(0x2ba),_0x5611f8(0x770),_0x5611f8(0x3ea),_0x5611f8(0x87c),_0x5611f8(0x91f)],_0x40d2d0=_0x37aa73[_0x5611f8(0x13d)],_0x11678f=_0x37aa73[_0x5611f8(0x172)],_0x4b2cdf=VisuMZ[_0x5611f8(0x6a8)](_0x37aa73['Targets']);for(const _0x25f700 of _0x4b2cdf){if(!_0x25f700)continue;for(const _0x5168c0 of _0x40d2d0){const _0x2e8146=_0x167c82['indexOf'](_0x5168c0['toUpperCase']()[_0x5611f8(0x761)]());_0x2e8146>=0x0&&_0x2e8146<=0x7&&_0x25f700[_0x5611f8(0x1ff)](_0x2e8146)&&_0x25f700[_0x5611f8(0x17e)](_0x2e8146);}for(const _0x5d9f9b of _0x11678f){const _0x28fc96=_0x167c82[_0x5611f8(0x77f)](_0x5d9f9b[_0x5611f8(0x2c8)]()['trim']());_0x28fc96>=0x0&&_0x28fc96<=0x7&&_0x25f700[_0x5611f8(0x31f)](_0x28fc96)&&_0x25f700[_0x5611f8(0x17e)](_0x28fc96);}}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_RemoveState',_0x14f7e7=>{const _0x27933a=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x27933a(0x630)](_0x14f7e7,_0x14f7e7);const _0x1417fd=_0x14f7e7['States'],_0x5f3f86=VisuMZ['CreateActionSequenceTargets'](_0x14f7e7[_0x27933a(0xa6d)]);for(const _0x312011 of _0x5f3f86){if(!_0x312011)continue;for(const _0x5b4481 of _0x1417fd){_0x312011[_0x27933a(0xc68)](_0x5b4481);}}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_StateTurnsChangeBy',_0x181b65=>{const _0x2b2440=_0x320868;if(!SceneManager[_0x2b2440(0x96d)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x2b2440(0x630)](_0x181b65,_0x181b65);const _0x14a80c=VisuMZ['CreateActionSequenceTargets'](_0x181b65[_0x2b2440(0xa6d)]),_0x181809=Number(_0x181b65[_0x2b2440(0x45e)]),_0x1fc6f5=Number(_0x181b65['Turns']),_0x7cbda5=_0x181b65[_0x2b2440(0x35e)];for(const _0x549a1f of _0x14a80c){if(!_0x549a1f)continue;_0x7cbda5&&!_0x549a1f[_0x2b2440(0xaf2)](_0x181809)?(_0x549a1f[_0x2b2440(0x6fc)](_0x181809),_0x549a1f['setStateTurns'](_0x181809,_0x1fc6f5)):_0x549a1f[_0x2b2440(0xb8d)](_0x181809,_0x1fc6f5);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x982),_0x2ef700=>{const _0x1c7203=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c7203(0x49b)])return;VisuMZ[_0x1c7203(0x630)](_0x2ef700,_0x2ef700);const _0x1dfc13=VisuMZ[_0x1c7203(0x6a8)](_0x2ef700['Targets']),_0x16bcbf=Number(_0x2ef700[_0x1c7203(0x45e)]),_0x5923ae=Math['max'](Number(_0x2ef700[_0x1c7203(0x9da)]),0x0),_0x516186=_0x2ef700['AutoAddState'];for(const _0x3f8c65 of _0x1dfc13){if(!_0x3f8c65)continue;_0x516186&&!_0x3f8c65['isStateAffected'](_0x16bcbf)&&_0x3f8c65['addState'](_0x16bcbf),_0x3f8c65[_0x1c7203(0x802)](_0x16bcbf,_0x5923ae);}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_StbExploit',_0x2f38fd=>{const _0x557c20=_0x320868;if(!SceneManager[_0x557c20(0x96d)]())return;if(!Imported[_0x557c20(0x626)])return;if(!BattleManager[_0x557c20(0x926)]())return;VisuMZ['ConvertParams'](_0x2f38fd,_0x2f38fd);const _0x589e0e=_0x2f38fd[_0x557c20(0x739)],_0x23d4f2=VisuMZ[_0x557c20(0x6a8)](_0x2f38fd[_0x557c20(0xa6d)]),_0x158beb=_0x2f38fd[_0x557c20(0x29f)],_0x198e01=_0x2f38fd[_0x557c20(0x3b0)],_0x4cf089=_0x2f38fd[_0x557c20(0x2c1)],_0x1e2217=BattleManager[_0x557c20(0xba2)];if(_0x589e0e)for(const _0x555c91 of _0x23d4f2){if(!_0x555c91)continue;if(_0x555c91===BattleManager[_0x557c20(0xaad)])continue;if(_0x158beb)_0x555c91[_0x557c20(0x480)](![]);_0x555c91[_0x557c20(0x167)](BattleManager['_subject'],_0x1e2217);}if(_0x198e01&&BattleManager[_0x557c20(0xaad)]){if(_0x4cf089)BattleManager[_0x557c20(0xaad)]['setSTBExploited'](![]);const _0x2e1b5b=_0x23d4f2[0x0];BattleManager[_0x557c20(0xaad)][_0x557c20(0x173)](_0x2e1b5b,_0x1e2217);}}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x4ed),_0x37fb2d=>{const _0x4135b4=_0x320868;if(!SceneManager[_0x4135b4(0x96d)]())return;if(!Imported[_0x4135b4(0x626)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x4135b4(0x630)](_0x37fb2d,_0x37fb2d);const _0x4c433c=_0x37fb2d[_0x4135b4(0x2d8)];BattleManager[_0x4135b4(0xaad)]&&BattleManager[_0x4135b4(0xaad)][_0x4135b4(0x3da)](_0x4c433c);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x54c),_0x294fc5=>{const _0x1b9e72=_0x320868;if(!SceneManager[_0x1b9e72(0x96d)]())return;if(!Imported[_0x1b9e72(0x626)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x1b9e72(0x630)](_0x294fc5,_0x294fc5);let _0xdeb366=_0x294fc5[_0x1b9e72(0x2d8)];if(BattleManager['_subject']){BattleManager[_0x1b9e72(0xaad)][_0x1b9e72(0x3b3)]=BattleManager[_0x1b9e72(0xaad)][_0x1b9e72(0x3b3)]||[];while(_0xdeb366--){if(BattleManager[_0x1b9e72(0xaad)][_0x1b9e72(0x3b3)][_0x1b9e72(0x4c1)]<=0x0)break;BattleManager[_0x1b9e72(0xaad)]['_actions'][_0x1b9e72(0x97d)]();}}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x232),_0x47391b=>{const _0x59b6ac=_0x320868;if(!SceneManager[_0x59b6ac(0x96d)]())return;if(!Imported[_0x59b6ac(0x884)])return;VisuMZ[_0x59b6ac(0x630)](_0x47391b,_0x47391b);const _0xc3cb14=VisuMZ[_0x59b6ac(0x6a8)](_0x47391b[_0x59b6ac(0xa6d)]),_0xeea364=_0x47391b[_0x59b6ac(0x8f0)];for(const _0x50e575 of _0xc3cb14){if(!_0x50e575)continue;if(!_0x50e575[_0x59b6ac(0x94e)]())continue;_0x50e575[_0x59b6ac(0x28a)](_0xeea364);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Mechanics_TextPopup',_0x8dc9a4=>{const _0x710860=_0x320868;if(!SceneManager[_0x710860(0x96d)]())return;VisuMZ[_0x710860(0x630)](_0x8dc9a4,_0x8dc9a4);const _0xf79a56=VisuMZ['CreateActionSequenceTargets'](_0x8dc9a4['Targets']),_0x584d1a=_0x8dc9a4[_0x710860(0xb7b)],_0x54e62f={'textColor':ColorManager[_0x710860(0x3bb)](_0x8dc9a4['TextColor']),'flashColor':_0x8dc9a4[_0x710860(0x420)],'flashDuration':_0x8dc9a4[_0x710860(0x792)]};for(const _0x449b4f of _0xf79a56){if(!_0x449b4f)continue;_0x449b4f[_0x710860(0x443)](_0x584d1a,_0x54e62f);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xc0f),_0x1b3d19=>{const _0x356f09=_0x320868;if(!SceneManager[_0x356f09(0x96d)]())return;VisuMZ[_0x356f09(0x630)](_0x1b3d19,_0x1b3d19);const _0x26c770=VisuMZ[_0x356f09(0x6a8)](_0x1b3d19[_0x356f09(0xa6d)]);let _0x4472b4=$gameVariables[_0x356f09(0xb4e)](_0x1b3d19[_0x356f09(0x7e1)]);Imported[_0x356f09(0x1c8)]&&_0x1b3d19[_0x356f09(0xc26)]&&(_0x4472b4=VisuMZ[_0x356f09(0x9ca)](_0x4472b4));const _0x46b9ca=String(_0x4472b4),_0x2358a0={'textColor':ColorManager[_0x356f09(0x3bb)](_0x1b3d19['TextColor']),'flashColor':_0x1b3d19[_0x356f09(0x420)],'flashDuration':_0x1b3d19['FlashDuration']};for(const _0x37f4c4 of _0x26c770){if(!_0x37f4c4)continue;_0x37f4c4[_0x356f09(0x443)](_0x46b9ca,_0x2358a0);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0xa4f),_0x242adf=>{const _0x52e342=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x5e78b6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5e78b6)return;_0x5e78b6[_0x52e342(0xa31)](_0x52e342(0x578));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Motion_ClearFreezeFrame',_0x83602c=>{const _0xaaad93=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xaaad93(0x630)](_0x83602c,_0x83602c);const _0x1551f6=VisuMZ['CreateActionSequenceTargets'](_0x83602c[_0xaaad93(0xa6d)]);for(const _0x2efe01 of _0x1551f6){if(!_0x2efe01)continue;_0x2efe01['clearFreezeMotion']();}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xbbd),_0x2a613f=>{const _0x582716=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x582716(0x630)](_0x2a613f,_0x2a613f);const _0x3ad87a=VisuMZ[_0x582716(0x6a8)](_0x2a613f[_0x582716(0xa6d)]),_0x3d9889=_0x2a613f[_0x582716(0x432)]['toLowerCase']()['trim']();let _0x2e0186=_0x2a613f[_0x582716(0xb2b)];const _0x992efd=_0x2a613f[_0x582716(0x1eb)];!['attack',_0x582716(0x120),_0x582716(0x509),'missile'][_0x582716(0x6d2)](_0x3d9889)&&(_0x2e0186=![]);for(const _0x2daf62 of _0x3ad87a){if(!_0x2daf62)continue;_0x2daf62[_0x582716(0x72c)](_0x3d9889,_0x2e0186,_0x992efd);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x2dd),_0x306cdf=>{const _0x15564a=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x15564a(0x630)](_0x306cdf,_0x306cdf);const _0x417ac1=VisuMZ['CreateActionSequenceTargets'](_0x306cdf[_0x15564a(0xa6d)]),_0x4819d4=_0x306cdf[_0x15564a(0x432)]['toLowerCase']()[_0x15564a(0x761)](),_0x4df94e=_0x306cdf['ShowWeapon'];for(const _0x1bf155 of _0x417ac1){if(!_0x1bf155)continue;_0x1bf155[_0x15564a(0x67e)]=_0x4df94e;if(_0x4819d4['match'](/ATTACK[ ](\d+)/i))_0x1bf155[_0x15564a(0x71a)](Number(RegExp['$1']));else _0x4819d4==='attack'?_0x1bf155[_0x15564a(0x830)]():_0x1bf155['requestMotion'](_0x4819d4);if(!_0x4df94e)_0x1bf155['startWeaponAnimation'](0x0);else{if(_0x4df94e&&[_0x15564a(0x120),_0x15564a(0x509),_0x15564a(0xb37)]['includes'](_0x4819d4)){}}_0x1bf155[_0x15564a(0x67e)]=undefined;}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x6b6),_0xf7e17a=>{const _0xc3d714=_0x320868;if(!SceneManager[_0xc3d714(0x96d)]())return;VisuMZ[_0xc3d714(0x630)](_0xf7e17a,_0xf7e17a);const _0x2a836c=BattleManager[_0xc3d714(0xba2)];if(!_0x2a836c)return;if(!_0x2a836c[_0xc3d714(0xc47)]())return;const _0x11972f=VisuMZ[_0xc3d714(0x6a8)](_0xf7e17a['Targets']);for(const _0x38dd44 of _0x11972f){if(!_0x38dd44)continue;_0x38dd44[_0xc3d714(0x63c)](_0x2a836c);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x41e),_0x304b1c=>{const _0xce0920=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xce0920(0x630)](_0x304b1c,_0x304b1c);const _0x545e29=VisuMZ[_0xce0920(0x6a8)](_0x304b1c['Targets']);for(const _0x469e60 of _0x545e29){if(!_0x469e60)continue;if(!_0x469e60[_0xce0920(0xb31)]())continue;_0x469e60['battler']()['refreshMotion']();}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x682),_0x10e7b4=>{const _0x591f85=_0x320868;if(!SceneManager[_0x591f85(0x96d)]())return;VisuMZ['ConvertParams'](_0x10e7b4,_0x10e7b4);const _0x1f7942=$gameTemp[_0x591f85(0x343)](),_0x147320=_0x10e7b4[_0x591f85(0x942)]*Sprite_Battler['_motionSpeed'];_0x1f7942['wait'](_0x147320);}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x8c9),_0x228016=>{const _0x3e2d49=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3e2d49(0x630)](_0x228016,_0x228016);const _0x11223c=$gameTemp[_0x3e2d49(0x343)](),_0x52d7c3=BattleManager[_0x3e2d49(0xba2)];if(!_0x11223c||!_0x52d7c3)return;if(!_0x52d7c3['item']())return;const _0x1e2366=VisuMZ[_0x3e2d49(0x6a8)](_0x228016[_0x3e2d49(0xa6d)]);for(const _0x319a20 of _0x1e2366){if(!_0x319a20)continue;_0x319a20[_0x3e2d49(0xb03)](_0x52d7c3);}if(_0x228016[_0x3e2d49(0x82b)])_0x11223c['setWaitMode'](_0x3e2d49(0x3fd));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0xbeb),_0xfeea55=>{const _0x508ab3=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x508ab3(0x5a9)]())return;VisuMZ[_0x508ab3(0x630)](_0xfeea55,_0xfeea55);const _0xef2a23=$gameTemp[_0x508ab3(0x343)](),_0x176480=VisuMZ[_0x508ab3(0x6a8)](_0xfeea55[_0x508ab3(0xa6d)]),_0x44811d=_0xfeea55[_0x508ab3(0x36e)],_0x19c41b=_0xfeea55[_0x508ab3(0xc36)],_0x5f0aa2=_0xfeea55['DistanceY'],_0xf62b73=_0xfeea55[_0x508ab3(0xa89)],_0x245fc3=_0xfeea55['FaceDirection'],_0x25f237=_0xfeea55[_0x508ab3(0xa32)],_0x3a8ee0=_0xfeea55['MotionType'],_0x6b331a=_0xfeea55[_0x508ab3(0x82b)];if(!_0xef2a23)return;for(const _0x208a8f of _0x176480){if(!_0x208a8f)continue;let _0x5c7632=_0x19c41b,_0x46b3dd=_0x5f0aa2;if(_0x44811d[_0x508ab3(0x2e0)](/horz/i))_0x5c7632*=_0x208a8f[_0x508ab3(0x94e)]()?-0x1:0x1;if(_0x44811d[_0x508ab3(0x2e0)](/vert/i))_0x46b3dd*=_0x208a8f['isActor']()?-0x1:0x1;_0x208a8f['moveBattlerHomeDistance'](_0x5c7632,_0x46b3dd,_0xf62b73,_0x245fc3,_0x25f237),_0x208a8f[_0x508ab3(0x235)](_0x3a8ee0);}if(_0x6b331a)_0xef2a23['setWaitMode'](_0x508ab3(0x3fd));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x2f8),_0x298154=>{const _0x57c549=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x57c549(0x5a9)]())return;VisuMZ['ConvertParams'](_0x298154,_0x298154);const _0x2a41fa=$gameTemp[_0x57c549(0x343)](),_0x5e05fe=VisuMZ['CreateActionSequenceTargets'](_0x298154[_0x57c549(0xa6d)]),_0x5b07d2=_0x298154[_0x57c549(0x524)],_0x1c0927=_0x298154[_0x57c549(0x71f)],_0x5a693f=_0x298154[_0x57c549(0xa83)],_0x3cfc17=_0x298154[_0x57c549(0xa89)],_0x883e05=_0x298154[_0x57c549(0x375)],_0x7f4b5c=_0x298154[_0x57c549(0xa32)],_0x5d8ec4=_0x298154[_0x57c549(0x432)],_0x3c92e1=_0x298154[_0x57c549(0x82b)];if(!_0x2a41fa)return;for(const _0xfa812c of _0x5e05fe){if(!_0xfa812c)continue;const _0x42e214=_0x298154[_0x57c549(0x691)](_0xfa812c)||{'x':0x0,'y':0x0};let _0x4f7b44=_0x42e214['x'],_0x31e516=_0x42e214['y'];if(_0x5b07d2[_0x57c549(0x2e0)](/none/i))_0x4f7b44+=_0x1c0927,_0x31e516+=_0x5a693f;else{if(_0x5b07d2[_0x57c549(0x2e0)](/horz/i)&&_0x5b07d2[_0x57c549(0x2e0)](/vert/i))_0x4f7b44+=_0xfa812c['isActor']()?-_0x1c0927:_0x1c0927,_0x31e516+=_0xfa812c['isActor']()?-_0x5a693f:_0x5a693f;else{if(_0x5b07d2[_0x57c549(0x2e0)](/horz/i))_0x4f7b44+=_0xfa812c[_0x57c549(0x94e)]()?-_0x1c0927:_0x1c0927,_0x31e516+=_0x5a693f;else _0x5b07d2[_0x57c549(0x2e0)](/vert/i)&&(_0x4f7b44+=_0x1c0927,_0x31e516+=_0xfa812c['isActor']()?-_0x5a693f:_0x5a693f);}}_0xfa812c[_0x57c549(0x7d1)](_0x4f7b44,_0x31e516,_0x3cfc17,_0x883e05,_0x7f4b5c,-0x1),_0xfa812c[_0x57c549(0x235)](_0x5d8ec4);}if(_0x3c92e1)_0x2a41fa[_0x57c549(0xa31)](_0x57c549(0x3fd));}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0xc5d),_0x4d13e2=>{const _0x5e0060=_0x320868;if(!SceneManager[_0x5e0060(0x96d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5e0060(0x630)](_0x4d13e2,_0x4d13e2);const _0x20b74b=$gameTemp[_0x5e0060(0x343)](),_0x198766=VisuMZ[_0x5e0060(0x6a8)](_0x4d13e2['Targets']),_0x239d97=_0x4d13e2[_0x5e0060(0x2ca)],_0x4a6425=_0x4d13e2[_0x5e0060(0x524)],_0x4fdc93=_0x4d13e2[_0x5e0060(0x71f)],_0x98ff9b=_0x4d13e2[_0x5e0060(0xa83)],_0x2d0db7=_0x4d13e2[_0x5e0060(0xa89)],_0x29cacf=_0x4d13e2[_0x5e0060(0x375)],_0x7f022e=_0x4d13e2['EasingType'],_0x597856=_0x4d13e2['MotionType'],_0x3f568c=_0x4d13e2[_0x5e0060(0x82b)];if(!_0x20b74b)return;for(const _0x4be32a of _0x198766){if(!_0x4be32a)continue;let _0x4b681a=_0x4be32a[_0x5e0060(0xb31)]()[_0x5e0060(0xb8e)],_0x293556=_0x4be32a[_0x5e0060(0xb31)]()['_baseY'];if(_0x239d97[_0x5e0060(0x2e0)](/home/i))_0x4b681a=_0x4be32a[_0x5e0060(0xb31)]()[_0x5e0060(0xa91)],_0x293556=_0x4be32a[_0x5e0060(0xb31)]()[_0x5e0060(0x379)];else{if(_0x239d97[_0x5e0060(0x2e0)](/center/i))_0x4b681a=Graphics[_0x5e0060(0x23d)]/0x2,_0x293556=Graphics[_0x5e0060(0x66c)]/0x2;else _0x239d97[_0x5e0060(0x2e0)](/point (\d+), (\d+)/i)&&(_0x4b681a=Number(RegExp['$1']),_0x293556=Number(RegExp['$2']));}if(_0x4a6425[_0x5e0060(0x2e0)](/none/i))_0x4b681a+=_0x4fdc93,_0x293556+=_0x98ff9b;else{if(_0x4a6425[_0x5e0060(0x2e0)](/horz/i)&&_0x4a6425['match'](/vert/i))_0x4b681a+=_0x4be32a[_0x5e0060(0x94e)]()?-_0x4fdc93:_0x4fdc93,_0x293556+=_0x4be32a[_0x5e0060(0x94e)]()?-_0x98ff9b:_0x98ff9b;else{if(_0x4a6425[_0x5e0060(0x2e0)](/horz/i))_0x4b681a+=_0x4be32a[_0x5e0060(0x94e)]()?-_0x4fdc93:_0x4fdc93,_0x293556+=_0x98ff9b;else _0x4a6425[_0x5e0060(0x2e0)](/vert/i)&&(_0x4b681a+=_0x4fdc93,_0x293556+=_0x4be32a[_0x5e0060(0x94e)]()?-_0x98ff9b:_0x98ff9b);}}_0x4be32a['moveBattlerHomeToPoint'](_0x4b681a,_0x293556,_0x2d0db7,_0x29cacf,_0x7f022e,-0x1),_0x4be32a[_0x5e0060(0x235)](_0x597856);}if(_0x3f568c)_0x20b74b['setWaitMode'](_0x5e0060(0x3fd));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x34d),_0x49d27d=>{const _0x3ba418=_0x320868;if(!SceneManager[_0x3ba418(0x96d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x3ba418(0x630)](_0x49d27d,_0x49d27d);const _0x391d73=$gameTemp[_0x3ba418(0x343)](),_0x3d9e96=VisuMZ[_0x3ba418(0x6a8)](_0x49d27d[_0x3ba418(0x693)]),_0x1a6060=VisuMZ[_0x3ba418(0x6a8)](_0x49d27d['Targets2']),_0x2f9a13=_0x49d27d[_0x3ba418(0x12c)];let _0x56bf19=_0x49d27d[_0x3ba418(0x9eb)];const _0x4fdd9d=_0x49d27d[_0x3ba418(0x524)],_0x529633=_0x49d27d[_0x3ba418(0x71f)],_0x77a255=_0x49d27d['OffsetY'],_0x36370c=_0x49d27d['Duration'],_0x3e3a4f=_0x49d27d[_0x3ba418(0x375)],_0x340f0b=_0x49d27d[_0x3ba418(0xa32)],_0x12b364=_0x49d27d[_0x3ba418(0x432)],_0x44df55=_0x49d27d[_0x3ba418(0x82b)],_0x4493a1=Math[_0x3ba418(0x24f)](..._0x1a6060[_0x3ba418(0x200)](_0x123282=>_0x123282['battler']()[_0x3ba418(0xb8e)]-_0x123282[_0x3ba418(0xb31)]()[_0x3ba418(0x342)]()/0x2)),_0x408f8d=Math['max'](..._0x1a6060[_0x3ba418(0x200)](_0x50444b=>_0x50444b['battler']()[_0x3ba418(0xb8e)]+_0x50444b[_0x3ba418(0xb31)]()[_0x3ba418(0x342)]()/0x2)),_0x49327d=Math[_0x3ba418(0x24f)](..._0x1a6060['map'](_0xcd8f20=>_0xcd8f20[_0x3ba418(0xb31)]()['_baseY']-_0xcd8f20['battler']()[_0x3ba418(0x764)]())),_0x57c54a=Math[_0x3ba418(0x382)](..._0x1a6060[_0x3ba418(0x200)](_0x126fad=>_0x126fad['battler']()[_0x3ba418(0xba4)])),_0x42d79d=_0x1a6060['filter'](_0x191c64=>_0x191c64[_0x3ba418(0x94e)]())[_0x3ba418(0x4c1)],_0x41d3c4=_0x1a6060[_0x3ba418(0x477)](_0x3cf6a4=>_0x3cf6a4[_0x3ba418(0xb8b)]())[_0x3ba418(0x4c1)];let _0x3011ee=0x0,_0x3d33ef=0x0;if(_0x2f9a13['match'](/front/i))_0x3011ee=_0x42d79d>=_0x41d3c4?_0x4493a1:_0x408f8d;else{if(_0x2f9a13[_0x3ba418(0x2e0)](/middle/i))_0x3011ee=(_0x4493a1+_0x408f8d)/0x2,_0x56bf19=-0x1;else _0x2f9a13[_0x3ba418(0x2e0)](/back/i)&&(_0x3011ee=_0x42d79d>=_0x41d3c4?_0x408f8d:_0x4493a1);}if(_0x2f9a13[_0x3ba418(0x2e0)](/head/i))_0x3d33ef=_0x49327d;else{if(_0x2f9a13['match'](/center/i))_0x3d33ef=(_0x49327d+_0x57c54a)/0x2;else _0x2f9a13[_0x3ba418(0x2e0)](/base/i)&&(_0x3d33ef=_0x57c54a);}if(!_0x391d73)return;for(const _0x23a1db of _0x3d9e96){if(!_0x23a1db)continue;let _0x397aad=_0x3011ee,_0x23f6fb=_0x3d33ef;if(_0x4fdd9d['match'](/none/i))_0x397aad+=_0x529633,_0x23f6fb+=_0x77a255;else{if(_0x4fdd9d[_0x3ba418(0x2e0)](/horz/i)&&_0x4fdd9d[_0x3ba418(0x2e0)](/vert/i))_0x397aad+=_0x23a1db['isActor']()?-_0x529633:_0x529633,_0x23f6fb+=_0x23a1db[_0x3ba418(0x94e)]()?-_0x77a255:_0x77a255;else{if(_0x4fdd9d[_0x3ba418(0x2e0)](/horz/i))_0x397aad+=_0x23a1db[_0x3ba418(0x94e)]()?-_0x529633:_0x529633,_0x23f6fb+=_0x77a255;else _0x4fdd9d[_0x3ba418(0x2e0)](/vert/i)&&(_0x397aad+=_0x529633,_0x23f6fb+=_0x23a1db[_0x3ba418(0x94e)]()?-_0x77a255:_0x77a255);}}_0x23a1db['moveBattlerHomeToPoint'](_0x397aad,_0x23f6fb,_0x36370c,_0x3e3a4f,_0x340f0b,_0x56bf19),_0x23a1db[_0x3ba418(0x235)](_0x12b364);}if(_0x44df55)_0x391d73['setWaitMode'](_0x3ba418(0x3fd));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x270),_0x5b63ab=>{const _0x4b4a61=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4b4a61(0x5a9)]())return;VisuMZ['ConvertParams'](_0x5b63ab,_0x5b63ab);const _0x19e4c0=VisuMZ[_0x4b4a61(0x6a8)](_0x5b63ab[_0x4b4a61(0xa6d)]);let _0x2a66c9=_0x5b63ab[_0x4b4a61(0xbe4)]['match'](/back/i);for(const _0x1f0a57 of _0x19e4c0){if(!_0x1f0a57)continue;if(_0x5b63ab[_0x4b4a61(0xbe4)][_0x4b4a61(0x2e0)](/rand/i))_0x2a66c9=Math[_0x4b4a61(0x4cb)](0x2);_0x1f0a57[_0x4b4a61(0xac3)](!!_0x2a66c9);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x56a),_0x58b42d=>{const _0x371ef2=_0x320868;if(!SceneManager[_0x371ef2(0x96d)]())return;if(!$gameSystem[_0x371ef2(0x5a9)]())return;VisuMZ[_0x371ef2(0x630)](_0x58b42d,_0x58b42d);const _0x5933ef=VisuMZ[_0x371ef2(0x6a8)](_0x58b42d[_0x371ef2(0xa6d)]),_0x4bd8d5=_0x58b42d[_0x371ef2(0xa38)];for(const _0x146751 of _0x5933ef){if(!_0x146751)continue;const _0x5c8f9c=_0x58b42d[_0x371ef2(0x164)](_0x146751)||{'x':0x0,'y':0x0};let _0x569fcb=_0x5c8f9c['x'],_0xcb5ad8=_0x5c8f9c['y'];_0x146751[_0x371ef2(0x545)](Math[_0x371ef2(0xa8c)](_0x569fcb),Math['round'](_0xcb5ad8),!!_0x4bd8d5);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x7fd),_0x2d8547=>{const _0x5f0b7c=_0x320868;if(!SceneManager[_0x5f0b7c(0x96d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5f0b7c(0x630)](_0x2d8547,_0x2d8547);const _0x1e40b6=VisuMZ[_0x5f0b7c(0x6a8)](_0x2d8547['Targets']);let _0xfb7f1a=_0x2d8547[_0x5f0b7c(0x7a3)];const _0x32b357=_0x2d8547['FaceAway'];for(const _0x2fcce5 of _0x1e40b6){if(!_0x2fcce5)continue;let _0x2a0bd0=_0x2fcce5['battler']()[_0x5f0b7c(0xb8e)],_0x29af67=_0x2fcce5[_0x5f0b7c(0xb31)]()['_baseY'];if(_0xfb7f1a['match'](/home/i))_0x2a0bd0=_0x2fcce5['battler']()[_0x5f0b7c(0xa91)],_0x29af67=_0x2fcce5['battler']()[_0x5f0b7c(0x379)];else{if(_0xfb7f1a[_0x5f0b7c(0x2e0)](/center/i))_0x2a0bd0=Graphics[_0x5f0b7c(0x23d)]/0x2,_0x29af67=Graphics[_0x5f0b7c(0x66c)]/0x2;else _0xfb7f1a[_0x5f0b7c(0x2e0)](/point (\d+), (\d+)/i)&&(_0x2a0bd0=Number(RegExp['$1']),_0x29af67=Number(RegExp['$2']));}_0x2fcce5['setBattlerFacePoint'](Math[_0x5f0b7c(0xa8c)](_0x2a0bd0),Math[_0x5f0b7c(0xa8c)](_0x29af67),!!_0x32b357);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x90b),_0xc62b7b=>{const _0x182b8d=_0x320868;if(!SceneManager[_0x182b8d(0x96d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x182b8d(0x630)](_0xc62b7b,_0xc62b7b);const _0x29fa60=VisuMZ[_0x182b8d(0x6a8)](_0xc62b7b['Targets1']),_0x28b5ed=VisuMZ['CreateActionSequenceTargets'](_0xc62b7b[_0x182b8d(0x6e4)]),_0xea54e=_0x28b5ed[_0x182b8d(0x200)](_0x503344=>_0x503344&&_0x503344['battler']()?_0x503344[_0x182b8d(0xb31)]()[_0x182b8d(0xb8e)]:0x0)/(_0x28b5ed['length']||0x1),_0x5b51d9=_0x28b5ed[_0x182b8d(0x200)](_0x181811=>_0x181811&&_0x181811[_0x182b8d(0xb31)]()?_0x181811['battler']()[_0x182b8d(0xba4)]:0x0)/(_0x28b5ed[_0x182b8d(0x4c1)]||0x1),_0x55f4fd=_0xc62b7b[_0x182b8d(0xa38)];for(const _0x5ab062 of _0x29fa60){if(!_0x5ab062)continue;_0x5ab062[_0x182b8d(0x545)](Math[_0x182b8d(0xa8c)](_0xea54e),Math[_0x182b8d(0xa8c)](_0x5b51d9),!!_0x55f4fd);}}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xbc8),_0x5eaa14=>{const _0x259952=_0x320868;if(!SceneManager[_0x259952(0x96d)]())return;VisuMZ['ConvertParams'](_0x5eaa14,_0x5eaa14);const _0x12c481=$gameTemp[_0x259952(0x343)](),_0x6954b1=VisuMZ[_0x259952(0x6a8)](_0x5eaa14['Targets']),_0x525b09=_0x5eaa14[_0x259952(0x1c5)],_0x3dfc36=_0x5eaa14[_0x259952(0xa89)],_0x55b4ed=_0x5eaa14[_0x259952(0xa32)],_0x5f1d42=_0x5eaa14[_0x259952(0x673)];if(!_0x12c481)return;for(const _0x214b71 of _0x6954b1){if(!_0x214b71)continue;_0x214b71[_0x259952(0x28f)](_0x525b09,_0x3dfc36,_0x55b4ed);}if(_0x5f1d42)_0x12c481[_0x259952(0xa31)](_0x259952(0x89a));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xc0c),_0x13cbc6=>{const _0x5e01d9=_0x320868;if(!SceneManager[_0x5e01d9(0x96d)]())return;VisuMZ[_0x5e01d9(0x630)](_0x13cbc6,_0x13cbc6);const _0x316b15=$gameTemp[_0x5e01d9(0x343)]();if(!_0x316b15)return;const _0x2108c7=VisuMZ[_0x5e01d9(0x6a8)](_0x13cbc6['Targets']);for(const _0x53c5b4 of _0x2108c7){if(!_0x53c5b4)continue;_0x53c5b4[_0x5e01d9(0x3c8)]();}BattleManager[_0x5e01d9(0xaad)]&&BattleManager['_subject'][_0x5e01d9(0x224)]();if(_0x13cbc6[_0x5e01d9(0x82b)])_0x316b15[_0x5e01d9(0xa31)](_0x5e01d9(0x3fd));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x237),_0x411bd1=>{const _0x5275e2=_0x320868;if(!SceneManager[_0x5275e2(0x96d)]())return;VisuMZ[_0x5275e2(0x630)](_0x411bd1,_0x411bd1);const _0x270793=$gameTemp[_0x5275e2(0x343)](),_0x3c70c8=VisuMZ[_0x5275e2(0x6a8)](_0x411bd1[_0x5275e2(0xa6d)]),_0x12e234=_0x411bd1['Height'],_0x3395b6=_0x411bd1[_0x5275e2(0xa89)],_0x55e7bd=_0x411bd1[_0x5275e2(0x26e)];if(!_0x270793)return;for(const _0x35ff6a of _0x3c70c8){if(!_0x35ff6a)continue;_0x35ff6a[_0x5275e2(0x527)](_0x12e234,_0x3395b6);}if(_0x55e7bd)_0x270793[_0x5275e2(0xa31)](_0x5275e2(0xbc1));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Movement_MoveBy',_0x5d3495=>{const _0x51ccea=_0x320868;if(!SceneManager[_0x51ccea(0x96d)]())return;if(!$gameSystem[_0x51ccea(0x5a9)]())return;VisuMZ[_0x51ccea(0x630)](_0x5d3495,_0x5d3495);const _0x2ea399=$gameTemp[_0x51ccea(0x343)](),_0x511727=VisuMZ[_0x51ccea(0x6a8)](_0x5d3495[_0x51ccea(0xa6d)]),_0x314c66=_0x5d3495[_0x51ccea(0x36e)],_0x18df64=_0x5d3495[_0x51ccea(0xc36)],_0x23f4de=_0x5d3495[_0x51ccea(0x5e9)],_0x3fdf94=_0x5d3495[_0x51ccea(0xa89)],_0x159f87=_0x5d3495['FaceDirection'],_0x1596a6=_0x5d3495[_0x51ccea(0xa32)],_0x5b8e72=_0x5d3495['MotionType'],_0x397eb1=_0x5d3495[_0x51ccea(0x82b)];if(!_0x2ea399)return;for(const _0x20f9a3 of _0x511727){if(!_0x20f9a3)continue;let _0xcac3=_0x18df64,_0x598b43=_0x23f4de;if(_0x314c66[_0x51ccea(0x2e0)](/horz/i))_0xcac3*=_0x20f9a3['isActor']()?-0x1:0x1;if(_0x314c66['match'](/vert/i))_0x598b43*=_0x20f9a3[_0x51ccea(0x94e)]()?-0x1:0x1;_0x20f9a3[_0x51ccea(0x731)](_0xcac3,_0x598b43,_0x3fdf94,_0x159f87,_0x1596a6),_0x20f9a3[_0x51ccea(0x235)](_0x5b8e72);}if(_0x397eb1)_0x2ea399[_0x51ccea(0xa31)](_0x51ccea(0x3fd));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x8d5),_0x3cab15=>{const _0x429090=_0x320868;if(!SceneManager[_0x429090(0x96d)]())return;if(!$gameSystem[_0x429090(0x5a9)]())return;VisuMZ[_0x429090(0x630)](_0x3cab15,_0x3cab15);const _0x822f19=$gameTemp[_0x429090(0x343)](),_0x14cedd=VisuMZ[_0x429090(0x6a8)](_0x3cab15['Targets']),_0x470c4b=_0x3cab15[_0x429090(0x524)],_0x11507c=_0x3cab15['OffsetX'],_0x2304c9=_0x3cab15[_0x429090(0xa83)],_0x5618bc=_0x3cab15[_0x429090(0xa89)],_0x5f2da5=_0x3cab15[_0x429090(0x375)],_0x4d26fe=_0x3cab15[_0x429090(0xa32)],_0x4434f8=_0x3cab15[_0x429090(0x432)],_0x5e521f=_0x3cab15['WaitForMovement'];if(!_0x822f19)return;for(const _0x34be18 of _0x14cedd){if(!_0x34be18)continue;const _0x3be1c2=_0x3cab15[_0x429090(0x691)](_0x34be18)||{'x':0x0,'y':0x0};let _0x13e535=_0x3be1c2['x'],_0x3bf856=_0x3be1c2['y'];if(_0x470c4b[_0x429090(0x2e0)](/none/i))_0x13e535+=_0x11507c,_0x3bf856+=_0x2304c9;else{if(_0x470c4b[_0x429090(0x2e0)](/horz/i)&&_0x470c4b[_0x429090(0x2e0)](/vert/i))_0x13e535+=_0x34be18[_0x429090(0x94e)]()?-_0x11507c:_0x11507c,_0x3bf856+=_0x34be18[_0x429090(0x94e)]()?-_0x2304c9:_0x2304c9;else{if(_0x470c4b[_0x429090(0x2e0)](/horz/i))_0x13e535+=_0x34be18[_0x429090(0x94e)]()?-_0x11507c:_0x11507c,_0x3bf856+=_0x2304c9;else _0x470c4b[_0x429090(0x2e0)](/vert/i)&&(_0x13e535+=_0x11507c,_0x3bf856+=_0x34be18[_0x429090(0x94e)]()?-_0x2304c9:_0x2304c9);}}_0x34be18[_0x429090(0x7c4)](_0x13e535,_0x3bf856,_0x5618bc,_0x5f2da5,_0x4d26fe,-0x1),_0x34be18[_0x429090(0x235)](_0x4434f8);}if(_0x5e521f)_0x822f19[_0x429090(0xa31)](_0x429090(0x3fd));}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0x95b),_0xdf81b9=>{const _0x196197=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x196197(0x5a9)]())return;VisuMZ[_0x196197(0x630)](_0xdf81b9,_0xdf81b9);const _0x11d007=$gameTemp[_0x196197(0x343)](),_0x5cf073=VisuMZ['CreateActionSequenceTargets'](_0xdf81b9[_0x196197(0xa6d)]),_0x45d27e=_0xdf81b9[_0x196197(0x2ca)],_0x42e139=_0xdf81b9[_0x196197(0x524)],_0x28880d=_0xdf81b9[_0x196197(0x71f)],_0x44e6d8=_0xdf81b9[_0x196197(0xa83)],_0x4dd4b1=_0xdf81b9[_0x196197(0xa89)],_0x195743=_0xdf81b9[_0x196197(0x375)],_0x245f2f=_0xdf81b9['EasingType'],_0x38d01b=_0xdf81b9[_0x196197(0x432)],_0x5f113b=_0xdf81b9[_0x196197(0x82b)];if(!_0x11d007)return;for(const _0x9340e2 of _0x5cf073){if(!_0x9340e2)continue;let _0x193318=_0x9340e2[_0x196197(0xb31)]()['_baseX'],_0x20fc96=_0x9340e2[_0x196197(0xb31)]()[_0x196197(0xba4)];if(_0x45d27e[_0x196197(0x2e0)](/home/i))_0x193318=_0x9340e2[_0x196197(0xb31)]()[_0x196197(0xa91)],_0x20fc96=_0x9340e2[_0x196197(0xb31)]()[_0x196197(0x379)];else{if(_0x45d27e['match'](/center/i))_0x193318=Graphics[_0x196197(0x23d)]/0x2,_0x20fc96=Graphics[_0x196197(0x66c)]/0x2;else _0x45d27e['match'](/point (\d+), (\d+)/i)&&(_0x193318=Number(RegExp['$1']),_0x20fc96=Number(RegExp['$2']));}if(_0x42e139[_0x196197(0x2e0)](/none/i))_0x193318+=_0x28880d,_0x20fc96+=_0x44e6d8;else{if(_0x42e139['match'](/horz/i)&&_0x42e139[_0x196197(0x2e0)](/vert/i))_0x193318+=_0x9340e2[_0x196197(0x94e)]()?-_0x28880d:_0x28880d,_0x20fc96+=_0x9340e2[_0x196197(0x94e)]()?-_0x44e6d8:_0x44e6d8;else{if(_0x42e139[_0x196197(0x2e0)](/horz/i))_0x193318+=_0x9340e2[_0x196197(0x94e)]()?-_0x28880d:_0x28880d,_0x20fc96+=_0x44e6d8;else _0x42e139[_0x196197(0x2e0)](/vert/i)&&(_0x193318+=_0x28880d,_0x20fc96+=_0x9340e2[_0x196197(0x94e)]()?-_0x44e6d8:_0x44e6d8);}}_0x9340e2[_0x196197(0x7c4)](_0x193318,_0x20fc96,_0x4dd4b1,_0x195743,_0x245f2f,-0x1),_0x9340e2[_0x196197(0x235)](_0x38d01b);}if(_0x5f113b)_0x11d007[_0x196197(0xa31)](_0x196197(0x3fd));}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0xbcf),_0x5ae98d=>{const _0xe0a82d=_0x320868;if(!SceneManager[_0xe0a82d(0x96d)]())return;if(!$gameSystem[_0xe0a82d(0x5a9)]())return;VisuMZ[_0xe0a82d(0x630)](_0x5ae98d,_0x5ae98d);const _0xb06bac=$gameTemp[_0xe0a82d(0x343)](),_0x59dd73=VisuMZ[_0xe0a82d(0x6a8)](_0x5ae98d[_0xe0a82d(0x693)]),_0x1490ee=VisuMZ[_0xe0a82d(0x6a8)](_0x5ae98d[_0xe0a82d(0x6e4)]),_0x95b098=_0x5ae98d[_0xe0a82d(0x12c)];let _0x39ae60=_0x5ae98d[_0xe0a82d(0x9eb)];const _0x2af0b9=_0x5ae98d['OffsetAdjust'],_0x397e78=_0x5ae98d[_0xe0a82d(0x71f)],_0x5323bd=_0x5ae98d[_0xe0a82d(0xa83)],_0x1b1363=_0x5ae98d[_0xe0a82d(0xa89)],_0x4d592b=_0x5ae98d[_0xe0a82d(0x375)],_0x971331=_0x5ae98d[_0xe0a82d(0xa32)],_0xc8300c=_0x5ae98d['MotionType'],_0x4b06ab=_0x5ae98d[_0xe0a82d(0x82b)],_0x51585a=Math[_0xe0a82d(0x24f)](..._0x1490ee['map'](_0x51fc91=>_0x51fc91['battler']()[_0xe0a82d(0xb8e)]-_0x51fc91[_0xe0a82d(0xb31)]()[_0xe0a82d(0x342)]()/0x2)),_0x330d47=Math[_0xe0a82d(0x382)](..._0x1490ee[_0xe0a82d(0x200)](_0x2f36fe=>_0x2f36fe[_0xe0a82d(0xb31)]()[_0xe0a82d(0xb8e)]+_0x2f36fe[_0xe0a82d(0xb31)]()[_0xe0a82d(0x342)]()/0x2)),_0x4a4d9f=Math[_0xe0a82d(0x24f)](..._0x1490ee[_0xe0a82d(0x200)](_0x32ddfe=>_0x32ddfe[_0xe0a82d(0xb31)]()[_0xe0a82d(0xba4)]-_0x32ddfe[_0xe0a82d(0xb31)]()[_0xe0a82d(0x764)]())),_0x1a75e1=Math[_0xe0a82d(0x382)](..._0x1490ee[_0xe0a82d(0x200)](_0x593e1b=>_0x593e1b[_0xe0a82d(0xb31)]()['_baseY'])),_0x38f7f3=_0x1490ee['filter'](_0x671ccc=>_0x671ccc[_0xe0a82d(0x94e)]())['length'],_0x4e889d=_0x1490ee[_0xe0a82d(0x477)](_0x499963=>_0x499963[_0xe0a82d(0xb8b)]())[_0xe0a82d(0x4c1)];let _0x1cfa6f=0x0,_0x1ef41b=0x0;if(_0x95b098['match'](/front/i))_0x1cfa6f=_0x38f7f3>=_0x4e889d?_0x51585a:_0x330d47;else{if(_0x95b098[_0xe0a82d(0x2e0)](/middle/i))_0x1cfa6f=(_0x51585a+_0x330d47)/0x2,_0x39ae60=-0x1;else _0x95b098[_0xe0a82d(0x2e0)](/back/i)&&(_0x1cfa6f=_0x38f7f3>=_0x4e889d?_0x330d47:_0x51585a);}if(_0x95b098['match'](/head/i))_0x1ef41b=_0x4a4d9f;else{if(_0x95b098[_0xe0a82d(0x2e0)](/center/i))_0x1ef41b=(_0x4a4d9f+_0x1a75e1)/0x2;else _0x95b098['match'](/base/i)&&(_0x1ef41b=_0x1a75e1);}if(!_0xb06bac)return;for(const _0x3ac75c of _0x59dd73){if(!_0x3ac75c)continue;let _0x35f48e=_0x1cfa6f,_0x22ef7f=_0x1ef41b;if(_0x2af0b9[_0xe0a82d(0x2e0)](/none/i))_0x35f48e+=_0x397e78,_0x22ef7f+=_0x5323bd;else{if(_0x2af0b9[_0xe0a82d(0x2e0)](/horz/i)&&_0x2af0b9[_0xe0a82d(0x2e0)](/vert/i))_0x35f48e+=_0x3ac75c[_0xe0a82d(0x94e)]()?-_0x397e78:_0x397e78,_0x22ef7f+=_0x3ac75c['isActor']()?-_0x5323bd:_0x5323bd;else{if(_0x2af0b9['match'](/horz/i))_0x35f48e+=_0x3ac75c[_0xe0a82d(0x94e)]()?-_0x397e78:_0x397e78,_0x22ef7f+=_0x5323bd;else _0x2af0b9[_0xe0a82d(0x2e0)](/vert/i)&&(_0x35f48e+=_0x397e78,_0x22ef7f+=_0x3ac75c[_0xe0a82d(0x94e)]()?-_0x5323bd:_0x5323bd);}}_0x3ac75c[_0xe0a82d(0x7c4)](_0x35f48e,_0x22ef7f,_0x1b1363,_0x4d592b,_0x971331,_0x39ae60),_0x3ac75c['requestMotion'](_0xc8300c);}if(_0x4b06ab)_0xb06bac[_0xe0a82d(0xa31)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Movement_Opacity',_0x5c37bb=>{const _0x1b55fb=_0x320868;if(!SceneManager[_0x1b55fb(0x96d)]())return;VisuMZ[_0x1b55fb(0x630)](_0x5c37bb,_0x5c37bb);const _0x1abcf7=$gameTemp['getLastPluginCommandInterpreter'](),_0x54429e=VisuMZ[_0x1b55fb(0x6a8)](_0x5c37bb[_0x1b55fb(0xa6d)]),_0x32805a=_0x5c37bb[_0x1b55fb(0x66a)],_0x31fe69=_0x5c37bb['Duration'],_0x393397=_0x5c37bb[_0x1b55fb(0xa32)],_0x301931=_0x5c37bb[_0x1b55fb(0x2e3)];if(!_0x1abcf7)return;for(const _0x32fe6f of _0x54429e){if(!_0x32fe6f)continue;_0x32fe6f[_0x1b55fb(0x58d)](_0x32805a,_0x31fe69,_0x393397);}if(_0x301931)_0x1abcf7[_0x1b55fb(0xa31)](_0x1b55fb(0x5e3));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x3ce),_0x31b546=>{const _0x2d2604=_0x320868;if(!SceneManager[_0x2d2604(0x96d)]())return;VisuMZ[_0x2d2604(0x630)](_0x31b546,_0x31b546);const _0x1a7c1a=$gameTemp[_0x2d2604(0x343)](),_0x31f6a8=VisuMZ[_0x2d2604(0x6a8)](_0x31b546['Targets']),_0x145c41=_0x31b546[_0x2d2604(0x787)],_0x9e02df=_0x31b546[_0x2d2604(0x55c)],_0x399123=_0x31b546[_0x2d2604(0xa89)],_0x1161a8=_0x31b546[_0x2d2604(0xa32)],_0x5b5354=_0x31b546['WaitForScale'];if(!_0x1a7c1a)return;for(const _0x293745 of _0x31f6a8){if(!_0x293745)continue;_0x293745[_0x2d2604(0x1d9)](_0x145c41,_0x9e02df,_0x399123,_0x1161a8);}if(_0x5b5354)_0x1a7c1a['setWaitMode'](_0x2d2604(0xa20));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x783),_0x13d57a=>{const _0x4bd0ef=_0x320868;if(!SceneManager[_0x4bd0ef(0x96d)]())return;VisuMZ['ConvertParams'](_0x13d57a,_0x13d57a);const _0x356c44=$gameTemp['getLastPluginCommandInterpreter'](),_0x3df2f3=VisuMZ[_0x4bd0ef(0x6a8)](_0x13d57a['Targets']),_0xeff740=_0x13d57a[_0x4bd0ef(0xbfd)],_0x257431=_0x13d57a[_0x4bd0ef(0x6ab)],_0x2f037b=_0x13d57a[_0x4bd0ef(0xa89)],_0x2f9d2f=_0x13d57a[_0x4bd0ef(0xa32)],_0x50e4c0=_0x13d57a['WaitForSkew'];if(!_0x356c44)return;for(const _0x4c7957 of _0x3df2f3){if(!_0x4c7957)continue;_0x4c7957[_0x4bd0ef(0x373)](_0xeff740,_0x257431,_0x2f037b,_0x2f9d2f);}if(_0x50e4c0)_0x356c44['setWaitMode'](_0x4bd0ef(0x71e));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Movement_Spin',_0x4a08bd=>{const _0x66c309=_0x320868;if(!SceneManager[_0x66c309(0x96d)]())return;VisuMZ[_0x66c309(0x630)](_0x4a08bd,_0x4a08bd);const _0x42b8fa=$gameTemp['getLastPluginCommandInterpreter'](),_0x35944b=VisuMZ[_0x66c309(0x6a8)](_0x4a08bd[_0x66c309(0xa6d)]),_0x4347e6=_0x4a08bd[_0x66c309(0x4b4)],_0x1e766c=_0x4a08bd[_0x66c309(0xa89)],_0x3fcca7=_0x4a08bd[_0x66c309(0xa32)],_0x5a8bf7=_0x4a08bd[_0x66c309(0xbd3)],_0x17c55d=_0x4a08bd[_0x66c309(0x2cc)];if(!_0x42b8fa)return;for(const _0x50a64d of _0x35944b){if(!_0x50a64d)continue;_0x50a64d[_0x66c309(0x56f)](_0x4347e6,_0x1e766c,_0x3fcca7,_0x5a8bf7);}if(_0x17c55d)_0x42b8fa[_0x66c309(0xa31)]('battleSpin');}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x2a1),_0x4eaaec=>{const _0x52efba=_0x320868;if(!SceneManager[_0x52efba(0x96d)]())return;const _0x50a90a=$gameTemp[_0x52efba(0x343)]();if(!_0x50a90a)return;_0x50a90a[_0x52efba(0xa31)](_0x52efba(0x89a));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x8dc),_0x26790d=>{const _0x4d5422=_0x320868;if(!SceneManager[_0x4d5422(0x96d)]())return;const _0x35de24=$gameTemp[_0x4d5422(0x343)]();if(!_0x35de24)return;_0x35de24[_0x4d5422(0xa31)](_0x4d5422(0xbc1));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x7f1),_0x250e2f=>{const _0x42e36b=_0x320868;if(!SceneManager[_0x42e36b(0x96d)]())return;const _0x3c12d1=$gameTemp[_0x42e36b(0x343)]();if(!_0x3c12d1)return;_0x3c12d1[_0x42e36b(0xa31)](_0x42e36b(0x3fd));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x6fd),_0x21ef8c=>{const _0x213f2e=_0x320868;if(!SceneManager[_0x213f2e(0x96d)]())return;const _0x51287c=$gameTemp[_0x213f2e(0x343)]();if(!_0x51287c)return;_0x51287c[_0x213f2e(0xa31)](_0x213f2e(0x5e3));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x79e),_0x47eb92=>{const _0x133695=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x3e8ad2=$gameTemp[_0x133695(0x343)]();if(!_0x3e8ad2)return;_0x3e8ad2[_0x133695(0xa31)]('battleGrow');}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],'ActSeq_Movement_WaitForSkew',_0x24eca0=>{const _0x18ff7a=_0x320868;if(!SceneManager[_0x18ff7a(0x96d)]())return;const _0x371643=$gameTemp[_0x18ff7a(0x343)]();if(!_0x371643)return;_0x371643['setWaitMode'](_0x18ff7a(0x71e));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Movement_WaitForSpin',_0x22edab=>{const _0x2f5aef=_0x320868;if(!SceneManager[_0x2f5aef(0x96d)]())return;const _0xdf7082=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xdf7082)return;_0xdf7082[_0x2f5aef(0xa31)]('battleSpin');}),VisuMZ[_0x320868(0x5c8)][_0x320868(0x13b)]=function(){const _0x4cc808=_0x320868;if(!Imported[_0x4cc808(0x945)])return;if(VisuMZ['ActSeqProjectiles'][_0x4cc808(0x43b)]<1.08){let _0x24abaa='';_0x24abaa+=_0x4cc808(0x29c),_0x24abaa+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x24abaa),SceneManager['exit']();}},PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x796),_0x13b709=>{const _0x3402ab=_0x320868;if(!SceneManager[_0x3402ab(0x96d)]())return;if(!Imported[_0x3402ab(0x945)])return;VisuMZ['ConvertParams'](_0x13b709,_0x13b709),VisuMZ[_0x3402ab(0x5c8)][_0x3402ab(0x13b)]();const _0x41265b=$gameTemp['getLastPluginCommandInterpreter'](),_0x37733b=_0x13b709[_0x3402ab(0xa4e)];if(!_0x41265b)return;const _0x1b25b6=BattleManager[_0x3402ab(0xa26)];if(!_0x1b25b6)return;_0x1b25b6[_0x3402ab(0x6f6)](_0x13b709);if(_0x37733b)_0x41265b[_0x3402ab(0xa31)](_0x3402ab(0x22a));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x3be),_0x284860=>{const _0x391dd8=_0x320868;if(!SceneManager[_0x391dd8(0x96d)]())return;if(!Imported[_0x391dd8(0x945)])return;VisuMZ['ConvertParams'](_0x284860,_0x284860),VisuMZ[_0x391dd8(0x5c8)][_0x391dd8(0x13b)]();const _0x58057=$gameTemp[_0x391dd8(0x343)](),_0x20d3a8=_0x284860[_0x391dd8(0xa4e)];if(!_0x58057)return;const _0x44d695=BattleManager[_0x391dd8(0xa26)];if(!_0x44d695)return;_0x44d695['createActionSequenceProjectile'](_0x284860);if(_0x20d3a8)_0x58057[_0x391dd8(0xa31)](_0x391dd8(0x22a));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Projectile_Picture',_0x4fa9b6=>{const _0x5a51f6=_0x320868;if(!SceneManager[_0x5a51f6(0x96d)]())return;if(!Imported[_0x5a51f6(0x945)])return;VisuMZ[_0x5a51f6(0x630)](_0x4fa9b6,_0x4fa9b6),VisuMZ['BattleCore'][_0x5a51f6(0x13b)]();const _0x5b1ddc=$gameTemp['getLastPluginCommandInterpreter'](),_0x3c3fb8=_0x4fa9b6['WaitForProjectile'];if(!_0x5b1ddc)return;const _0x2d8480=BattleManager[_0x5a51f6(0xa26)];if(!_0x2d8480)return;_0x2d8480[_0x5a51f6(0x6f6)](_0x4fa9b6);if(_0x3c3fb8)_0x5b1ddc[_0x5a51f6(0xa31)](_0x5a51f6(0x22a));}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0xa70),_0xae0117=>{const _0x139e1e=_0x320868;if(!SceneManager[_0x139e1e(0x96d)]())return;if(!Imported[_0x139e1e(0xa68)])return;VisuMZ[_0x139e1e(0x630)](_0xae0117,_0xae0117);const _0x31a6f6=$gameTemp[_0x139e1e(0x343)](),_0x34ce7f=_0xae0117[_0x139e1e(0x625)];if(!_0x31a6f6)return;$gameScreen[_0x139e1e(0x820)](_0xae0117['SkewX'],_0xae0117[_0x139e1e(0x6ab)],_0xae0117[_0x139e1e(0xa89)],_0xae0117['EasingType']);if(_0x34ce7f)_0x31a6f6['setWaitMode'](_0x139e1e(0xadf));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Skew_Reset',_0x5e80a3=>{const _0x18dee0=_0x320868;if(!SceneManager[_0x18dee0(0x96d)]())return;if(!Imported[_0x18dee0(0xa68)])return;VisuMZ['ConvertParams'](_0x5e80a3,_0x5e80a3);const _0x31569a=$gameTemp[_0x18dee0(0x343)](),_0x3faa9e=_0x5e80a3[_0x18dee0(0x625)];if(!_0x31569a)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x5e80a3[_0x18dee0(0xa89)],_0x5e80a3[_0x18dee0(0xa32)]);if(_0x3faa9e)_0x31569a[_0x18dee0(0xa31)](_0x18dee0(0xadf));}),PluginManager['registerCommand'](pluginData[_0x320868(0x3e0)],_0x320868(0x3fa),_0x502d25=>{const _0x39f115=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x39f115(0xa68)])return;const _0x22077f=$gameTemp[_0x39f115(0x343)]();if(!_0x22077f)return;_0x22077f[_0x39f115(0xa31)](_0x39f115(0xadf));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0x5f1),_0x135ab3=>{const _0x472242=_0x320868;if(!SceneManager[_0x472242(0x96d)]())return;VisuMZ[_0x472242(0x630)](_0x135ab3,_0x135ab3);const _0x2b483c=$gameTemp[_0x472242(0x343)](),_0x502ec4=_0x135ab3[_0x472242(0xa8f)],_0x3b93cd=_0x135ab3['JumpToLabel'];if(!_0x2b483c)return;BattleManager[_0x472242(0x941)]=_0x502ec4,BattleManager[_0x472242(0x33d)]=BattleManager['_allTargets']?BattleManager['_allTargets'][BattleManager[_0x472242(0x941)]]||null:null;if(window[_0x472242(0x398)])BattleManager[_0x472242(0x2f5)]();BattleManager['_target']&&_0x3b93cd[_0x472242(0x2c8)]()[_0x472242(0x761)]()!=='UNTITLED'&&_0x2b483c['command119']([_0x3b93cd]);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Target_NextTarget',_0x2f06c2=>{const _0x306142=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x306142(0x630)](_0x2f06c2,_0x2f06c2);const _0xcee6c=$gameTemp['getLastPluginCommandInterpreter'](),_0xbed7cd=_0x2f06c2[_0x306142(0x448)];if(!_0xcee6c)return;BattleManager['_targetIndex']++,BattleManager[_0x306142(0x33d)]=BattleManager['_allTargets'][BattleManager[_0x306142(0x941)]]||null;if(window[_0x306142(0x398)])BattleManager[_0x306142(0x2f5)]();BattleManager[_0x306142(0x33d)]&&_0xbed7cd['toUpperCase']()[_0x306142(0x761)]()!==_0x306142(0x706)&&_0xcee6c[_0x306142(0x9bd)]([_0xbed7cd]);}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Target_PrevTarget',_0x24ed69=>{const _0x355427=_0x320868;if(!SceneManager[_0x355427(0x96d)]())return;VisuMZ['ConvertParams'](_0x24ed69,_0x24ed69);const _0x5603dc=$gameTemp[_0x355427(0x343)](),_0x4821df=_0x24ed69[_0x355427(0x448)];if(!_0x5603dc)return;BattleManager[_0x355427(0x941)]--,BattleManager[_0x355427(0x33d)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null;if(window[_0x355427(0x398)])BattleManager[_0x355427(0x2f5)]();BattleManager[_0x355427(0x33d)]&&_0x4821df[_0x355427(0x2c8)]()[_0x355427(0x761)]()!==_0x355427(0x706)&&_0x5603dc[_0x355427(0x9bd)]([_0x4821df]);}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Target_RandTarget',_0x40d20=>{const _0x1013a6=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1013a6(0x630)](_0x40d20,_0x40d20);const _0x2f2d1a=$gameTemp[_0x1013a6(0x343)](),_0x479d1d=_0x40d20['ForceRandom'],_0x149167=_0x40d20[_0x1013a6(0x448)];if(!_0x2f2d1a)return;const _0x392b8c=BattleManager[_0x1013a6(0x941)];for(;;){BattleManager['_targetIndex']=Math['randomInt'](BattleManager['_allTargets']['length']);if(!_0x479d1d)break;if(BattleManager['_targetIndex']!==_0x392b8c)break;if(BattleManager[_0x1013a6(0xaba)]['length']<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager['_target']=BattleManager[_0x1013a6(0xaba)][BattleManager[_0x1013a6(0x941)]]||null;if(window[_0x1013a6(0x398)])BattleManager[_0x1013a6(0x2f5)]();BattleManager[_0x1013a6(0x33d)]&&_0x149167[_0x1013a6(0x2c8)]()[_0x1013a6(0x761)]()!==_0x1013a6(0x706)&&_0x2f2d1a[_0x1013a6(0x9bd)]([_0x149167]);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xb04),_0x322168=>{const _0x3aadc0=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3aadc0(0x324)])return;if(!ConfigManager[_0x3aadc0(0x9d5)])return;VisuMZ['ConvertParams'](_0x322168,_0x322168);const _0x30908e=VisuMZ['CreateActionSequenceTargets'](_0x322168[_0x3aadc0(0xa6d)]);let _0x4f25ba=_0x322168[_0x3aadc0(0xc4b)]||'';for(const _0x2f5dae of _0x30908e){if(!_0x2f5dae)continue;_0x2f5dae[_0x3aadc0(0x6e0)](_0x4f25ba);}}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0xb53),_0x54b05f=>{const _0x58ae6f=_0x320868;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x58ae6f(0x324)])return;if(!ConfigManager[_0x58ae6f(0x9d5)])return;VisuMZ[_0x58ae6f(0x630)](_0x54b05f,_0x54b05f);const _0x4552d1=VisuMZ[_0x58ae6f(0x6a8)](_0x54b05f['Targets']);let _0x38aa66=(_0x54b05f['VoiceLineType']||'')+(_0x54b05f[_0x58ae6f(0x5d1)]||'');for(const _0x482338 of _0x4552d1){if(!_0x482338)continue;_0x482338[_0x58ae6f(0x6e0)](_0x38aa66);}}),PluginManager[_0x320868(0x86f)](pluginData['name'],'ActSeq_Weapon_ClearActiveWeapon',_0x1ee435=>{const _0x41f9fe=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x41f9fe(0x630)](_0x1ee435,_0x1ee435);const _0x8d1b84=VisuMZ[_0x41f9fe(0x6a8)](_0x1ee435[_0x41f9fe(0xa6d)]);for(const _0xab34bd of _0x8d1b84){if(!_0xab34bd)continue;if(!_0xab34bd['isActor']())continue;_0xab34bd['clearActiveWeaponSlot']();}}),PluginManager[_0x320868(0x86f)](pluginData['name'],_0x320868(0x5a7),_0x94d3=>{const _0x33ee2a=_0x320868;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x33ee2a(0x630)](_0x94d3,_0x94d3);const _0xbd9fe2=$gameTemp[_0x33ee2a(0x343)]();let _0x2759d7=![];const _0x20cd34=_0x94d3[_0x33ee2a(0x448)],_0x5de653=VisuMZ[_0x33ee2a(0x6a8)](_0x94d3[_0x33ee2a(0xa6d)]);for(const _0x3e0967 of _0x5de653){if(!_0x3e0967)continue;if(!_0x3e0967[_0x33ee2a(0x94e)]())continue;_0x3e0967[_0x33ee2a(0x44f)](),_0x3e0967['weapons']()[_0x33ee2a(0x4c1)]>0x0?_0x2759d7=!![]:_0x3e0967[_0x33ee2a(0x207)]();}_0x2759d7&&_0x20cd34[_0x33ee2a(0x2c8)]()[_0x33ee2a(0x761)]()!=='UNTITLED'&&_0xbd9fe2[_0x33ee2a(0x9bd)]([_0x20cd34]);}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xbb4),_0x2a9297=>{const _0x514b10=_0x320868;if(!SceneManager[_0x514b10(0x96d)]())return;VisuMZ[_0x514b10(0x630)](_0x2a9297,_0x2a9297);let _0x2a14e3=_0x2a9297['SlotID'];_0x2a14e3--,_0x2a14e3=Math['max'](_0x2a14e3,0x0);const _0x5bd3bf=VisuMZ[_0x514b10(0x6a8)](_0x2a9297['Targets']);for(const _0x35d9d6 of _0x5bd3bf){if(!_0x35d9d6)continue;if(!_0x35d9d6[_0x514b10(0x94e)]())continue;_0x35d9d6[_0x514b10(0x748)](_0x2a14e3);}}),PluginManager['registerCommand'](pluginData['name'],_0x320868(0x676),_0x1c1b55=>{const _0x470055=_0x320868;if(!SceneManager[_0x470055(0x96d)]())return;if(!Imported[_0x470055(0xa68)])return;VisuMZ[_0x470055(0x630)](_0x1c1b55,_0x1c1b55);const _0x56a518=$gameTemp[_0x470055(0x343)](),_0x52b180=_0x1c1b55['WaitForZoom'];if(!_0x56a518)return;$gameScreen[_0x470055(0x5c4)](_0x1c1b55['Scale'],_0x1c1b55[_0x470055(0xa89)],_0x1c1b55['EasingType']);if(_0x52b180)_0x56a518[_0x470055(0xa31)](_0x470055(0x211));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],_0x320868(0xbca),_0x170f5e=>{const _0x1bc4a1=_0x320868;if(!SceneManager[_0x1bc4a1(0x96d)]())return;if(!Imported[_0x1bc4a1(0xa68)])return;VisuMZ[_0x1bc4a1(0x630)](_0x170f5e,_0x170f5e);const _0x30d45e=$gameTemp['getLastPluginCommandInterpreter'](),_0x5af834=_0x170f5e[_0x1bc4a1(0x134)];if(!_0x30d45e)return;$gameScreen['setBattleZoom'](0x1,_0x170f5e['Duration'],_0x170f5e['EasingType']);if(_0x5af834)_0x30d45e[_0x1bc4a1(0xa31)](_0x1bc4a1(0x211));}),PluginManager[_0x320868(0x86f)](pluginData[_0x320868(0x3e0)],'ActSeq_Zoom_WaitForZoom',_0x432243=>{const _0x86836=_0x320868;if(!SceneManager[_0x86836(0x96d)]())return;if(!Imported[_0x86836(0xa68)])return;const _0x316e97=$gameTemp[_0x86836(0x343)]();if(!_0x316e97)return;_0x316e97[_0x86836(0xa31)](_0x86836(0x211));}),VisuMZ[_0x320868(0x5c8)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot[_0x320868(0x5bb)]['onDatabaseLoaded'],Scene_Boot['prototype']['onDatabaseLoaded']=function(){const _0xf0d1e9=_0x320868;this[_0xf0d1e9(0x7d0)](),this[_0xf0d1e9(0xafc)](),this[_0xf0d1e9(0xab7)](),this[_0xf0d1e9(0x291)](),VisuMZ[_0xf0d1e9(0x5c8)]['Scene_Boot_onDatabaseLoaded'][_0xf0d1e9(0x5a6)](this),this[_0xf0d1e9(0xa84)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0xf0d1e9(0xb6d)](),this[_0xf0d1e9(0x38e)]();},Scene_Boot[_0x320868(0x5bb)][_0x320868(0xa84)]=function(){const _0x13465a=_0x320868;if(VisuMZ['ParseAllNotetags'])return;this[_0x13465a(0x451)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x13465a(0x514)]();},Scene_Boot[_0x320868(0x5bb)][_0x320868(0x7d0)]=function(){const _0x2cd7f7=_0x320868,_0x71e04c=$dataSystem[_0x2cd7f7(0x5d9)]['length'];for(let _0x63578a=0x0;_0x63578a<_0x71e04c;_0x63578a++){const _0x28efd5=$dataSystem[_0x2cd7f7(0x538)][_0x63578a];if(_0x28efd5)continue;$dataSystem[_0x2cd7f7(0x538)][_0x63578a]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x269481=_0x320868,_0x2aa8c4=VisuMZ[_0x269481(0x5c8)][_0x269481(0x1d7)];_0x2aa8c4[_0x269481(0x31c)][_0x269481(0x3d4)]===undefined&&(_0x2aa8c4[_0x269481(0x31c)][_0x269481(0x3d4)]=_0x269481(0x1fa)),_0x2aa8c4[_0x269481(0x818)]['SmoothImage']===undefined&&(_0x2aa8c4[_0x269481(0x818)][_0x269481(0x7f0)]=![]),_0x2aa8c4[_0x269481(0x14d)][_0x269481(0x7f0)]===undefined&&(_0x2aa8c4['Enemy']['SmoothImage']=!![]),_0x2aa8c4[_0x269481(0x818)][_0x269481(0xa21)]===undefined&&(_0x2aa8c4[_0x269481(0x818)]['PrioritySortActive']=![]),_0x2aa8c4[_0x269481(0x818)][_0x269481(0x40e)]===undefined&&(_0x2aa8c4[_0x269481(0x818)][_0x269481(0x40e)]=!![]);},VisuMZ[_0x320868(0x4a0)]={},Scene_Boot['prototype'][_0x320868(0xab7)]=function(){const _0x59f025=_0x320868;for(const _0x4d58e9 of VisuMZ[_0x59f025(0x5c8)]['Settings'][_0x59f025(0x31c)][_0x59f025(0x9a8)]){if(!_0x4d58e9)continue;const _0x501362=_0x4d58e9[_0x59f025(0x828)][_0x59f025(0x2c8)]()['trim']();VisuMZ[_0x59f025(0x4a0)][_0x501362]=_0x4d58e9;}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x3f9)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x1726c1=_0x320868,_0x2243d4=VisuMZ[_0x1726c1(0x5c8)]['RegExp'],_0x3e3470=_0x1726c1(0x2b2),_0xd73c93=[[_0x1726c1(0x6e1),_0x1726c1(0x829)],[_0x1726c1(0x719),_0x1726c1(0x490)]],_0x4a769c=[['%1Apply%2JS','JS\x20%1APPLY\x20%2'],[_0x1726c1(0x55f),_0x1726c1(0x9e9)]],_0x2ee185=[['',''],[_0x1726c1(0x4b2),_0x1726c1(0x38f)],[_0x1726c1(0x776),_0x1726c1(0x1c6)]];for(const _0x351ee0 of _0x4a769c){for(const _0x13ee6e of _0x2ee185){for(const _0x11e07d of _0xd73c93){const _0x280e04=_0x351ee0[0x0][_0x1726c1(0x8b0)](_0x11e07d[0x0],_0x13ee6e[0x0]),_0x4fccb8=_0x351ee0[0x1][_0x1726c1(0x8b0)](_0x11e07d[0x1],_0x13ee6e[0x1])[_0x1726c1(0x761)](),_0xf42931=new RegExp(_0x3e3470[_0x1726c1(0x8b0)](_0x4fccb8),'i');_0x2243d4[_0x280e04]=_0xf42931;}}}const _0x44c9b2=[[_0x1726c1(0x54a),_0x1726c1(0x9e8)],[_0x1726c1(0x909),_0x1726c1(0x9c7)]];for(const _0x2d9e22 of _0x44c9b2){for(const _0x5c79e2 of _0xd73c93){const _0x1b0c1d=_0x2d9e22[0x0][_0x1726c1(0x8b0)](_0x5c79e2[0x0]),_0x116130=_0x2d9e22[0x1][_0x1726c1(0x8b0)](_0x5c79e2[0x1]),_0x16f225=new RegExp(_0x3e3470[_0x1726c1(0x8b0)](_0x116130),'i');_0x2243d4[_0x1b0c1d]=_0x16f225;}}const _0x2c0bd5=[[_0x1726c1(0x895),_0x1726c1(0x67b)],['%1EndBattleJS',_0x1726c1(0x6d5)],[_0x1726c1(0x87a),_0x1726c1(0x149)],[_0x1726c1(0x249),_0x1726c1(0x6ad)],[_0x1726c1(0x14c),'JS\x20ESCAPE\x20SUCCESS'],['EscapeFailureJS','JS\x20ESCAPE\x20FAILURE'],[_0x1726c1(0x992),_0x1726c1(0xaae)],[_0x1726c1(0xb5d),'JS\x20%1END\x20TURN'],[_0x1726c1(0x488),_0x1726c1(0x9b1)]];for(const _0x40dcc6 of _0x2c0bd5){for(const _0x590f0f of _0xd73c93){const _0x2f25d3=_0x40dcc6[0x0][_0x1726c1(0x8b0)](_0x590f0f[0x0]),_0x1165a8=_0x40dcc6[0x1][_0x1726c1(0x8b0)](_0x590f0f[0x1]),_0x18701a=new RegExp(_0x3e3470['format'](_0x1165a8),'i');_0x2243d4[_0x2f25d3]=_0x18701a;}}},Scene_Boot['prototype'][_0x320868(0x451)]=function(){const _0x14eb61=$dataSkills['concat']($dataItems);for(const _0x459696 of _0x14eb61){if(!_0x459696)continue;VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x459696);}},Scene_Boot[_0x320868(0x5bb)][_0x320868(0x3a2)]=function(){const _0x4011e5=_0x320868,_0x18472d=$dataActors[_0x4011e5(0x1c0)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x37207c of _0x18472d){if(!_0x37207c)continue;VisuMZ[_0x4011e5(0x5c8)][_0x4011e5(0x6f4)](_0x37207c),_0x37207c[_0x4011e5(0xa2b)]!==undefined&&VisuMZ[_0x4011e5(0x5c8)][_0x4011e5(0x837)](_0x37207c);}},Scene_Boot['prototype'][_0x320868(0x663)]=function(){const _0x1f98d0=_0x320868,_0x8f58c9=VisuMZ[_0x1f98d0(0x5c8)][_0x1f98d0(0x1d7)]['Mechanics'][_0x1f98d0(0x50b)],_0x2b5c23=[];for(const _0x3c53dc of _0x8f58c9){const _0x35784b=$dataTroops[_0x3c53dc];if(_0x35784b)_0x2b5c23[_0x1f98d0(0x205)](JsonEx[_0x1f98d0(0x1b2)](_0x35784b));}for(const _0x443061 of $dataTroops){if(!_0x443061)continue;for(const _0xe729be of _0x2b5c23){if(_0xe729be['id']===_0x443061['id'])continue;_0x443061[_0x1f98d0(0xa37)]=_0x443061[_0x1f98d0(0xa37)][_0x1f98d0(0x1c0)](_0xe729be[_0x1f98d0(0xa37)]);}}},Scene_Boot[_0x320868(0x5bb)][_0x320868(0xb6d)]=function(){const _0x44442c=_0x320868,_0x5db1c8=VisuMZ[_0x44442c(0x5c8)][_0x44442c(0x1d7)][_0x44442c(0x96c)];if(_0x5db1c8['BattleStartEvent']>0x0&&$dataCommonEvents[_0x5db1c8[_0x44442c(0x605)]]){const _0x1340e0=$dataCommonEvents[_0x5db1c8['BattleStartEvent']],_0x1c564f=_0x1340e0[_0x44442c(0x69b)][_0x44442c(0x4c1)]-0x2,_0xe583cb=_0x1340e0[_0x44442c(0x69b)][_0x1c564f];if(_0xe583cb&&_0xe583cb[_0x44442c(0x6bf)]!==0xe6){const _0x387d59={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x1e2681=_0x1340e0[_0x44442c(0x69b)][_0x44442c(0x5a1)]();_0x1340e0[_0x44442c(0x69b)]['unshift'](_0x387d59),_0x1340e0[_0x44442c(0x69b)][_0x44442c(0x68e)](_0x1e2681);}}},Scene_Boot[_0x320868(0x5bb)][_0x320868(0x38e)]=function(){const _0xa4c1d5=_0x320868;VisuMZ[_0xa4c1d5(0x5c8)][_0xa4c1d5(0x8e3)](),VisuMZ['BattleCore'][_0xa4c1d5(0xa45)]($dataSkills),VisuMZ[_0xa4c1d5(0x5c8)][_0xa4c1d5(0xa45)]($dataItems);},VisuMZ['BattleCore'][_0x320868(0x8e3)]=function(){const _0x1b09e1=_0x320868;VisuMZ[_0x1b09e1(0x5c8)][_0x1b09e1(0x690)]={};for(const _0x106699 of $dataCommonEvents){if(!_0x106699)continue;if(_0x106699[_0x1b09e1(0x3e0)][_0x1b09e1(0x2e0)](/\[(.*)\]/i)){let _0x1ba9bf=String(RegExp['$1'])[_0x1b09e1(0x550)](/,/g,'')[_0x1b09e1(0x2c8)]()[_0x1b09e1(0x761)]();VisuMZ['BattleCore'][_0x1b09e1(0x690)][_0x1ba9bf]=_0x106699['id'];}}},VisuMZ['BattleCore'][_0x320868(0xa45)]=function(_0x1f0eb4){const _0x34181a=_0x320868;for(const _0x2ca2fd of _0x1f0eb4){if(!_0x2ca2fd)continue;VisuMZ[_0x34181a(0x5c8)]['BindCommonEventKeysForObj'](_0x2ca2fd);}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x6b4)]=function(_0x3f42ca){const _0x43cd1c=_0x320868;if(!_0x3f42ca)return;if(!_0x3f42ca[_0x43cd1c(0x4cf)])return;VisuMZ[_0x43cd1c(0x5c8)][_0x43cd1c(0x690)]=VisuMZ[_0x43cd1c(0x5c8)]['_commonEventKey']||{};const _0x174a57=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x4946cd=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x164708=[];const _0x1e16f9=_0x3f42ca['note'][_0x43cd1c(0x2e0)](_0x174a57);if(_0x1e16f9){for(const _0x42a0a9 of _0x1e16f9){_0x42a0a9[_0x43cd1c(0x2e0)](_0x174a57);const _0x2d0d9e=String(RegExp['$1'])[_0x43cd1c(0x867)](',')['map'](_0x50fad6=>String(_0x50fad6)['toUpperCase']()[_0x43cd1c(0x761)]());_0x164708=_0x164708[_0x43cd1c(0x1c0)](_0x2d0d9e);}!_0x3f42ca[_0x43cd1c(0x418)][_0x43cd1c(0x2e0)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x3f42ca[_0x43cd1c(0x418)]+=_0x43cd1c(0x1ca));;}if(_0x3f42ca['note']['match'](_0x4946cd)){const _0x55469c=String(RegExp['$1'])[_0x43cd1c(0x867)](/[\r\n]+/)['map'](_0x4f41f8=>String(_0x4f41f8)['toUpperCase']()['trim']());_0x164708=_0x164708[_0x43cd1c(0x1c0)](_0x55469c);!_0x3f42ca[_0x43cd1c(0x418)][_0x43cd1c(0x2e0)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x3f42ca[_0x43cd1c(0x418)]+=_0x43cd1c(0x1ca));;}for(const _0x51c050 of _0x164708){if(VisuMZ[_0x43cd1c(0x5c8)]['_commonEventKey'][_0x51c050]){const _0x33897c=VisuMZ[_0x43cd1c(0x5c8)][_0x43cd1c(0x690)][_0x51c050],_0x1565cb={'code':0x2c,'dataId':_0x33897c,'value1':0x1,'value2':0x0};_0x3f42ca[_0x43cd1c(0x4cf)][_0x43cd1c(0x205)](_0x1565cb);}}},Scene_Boot[_0x320868(0x5bb)][_0x320868(0x514)]=function(){const _0x2a7da2=_0x320868,_0x441859=$dataSkills['concat']($dataItems);for(const _0x4b1dc4 of _0x441859){if(!_0x4b1dc4)continue;VisuMZ[_0x2a7da2(0x5c8)][_0x2a7da2(0x25f)](_0x4b1dc4);}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x19c)]=VisuMZ[_0x320868(0x19c)],VisuMZ['ParseActorNotetags']=function(_0x3d2866){const _0x56f25e=_0x320868;VisuMZ['BattleCore'][_0x56f25e(0x19c)]&&VisuMZ[_0x56f25e(0x5c8)][_0x56f25e(0x19c)]['call'](this,_0x3d2866),VisuMZ[_0x56f25e(0x5c8)][_0x56f25e(0x6f4)](_0x3d2866);},VisuMZ[_0x320868(0x5c8)]['ParseClassNotetags']=VisuMZ['ParseClassNotetags'],VisuMZ[_0x320868(0x93d)]=function(_0x2d4714){const _0x449f4f=_0x320868;VisuMZ['BattleCore'][_0x449f4f(0x93d)]&&VisuMZ[_0x449f4f(0x5c8)]['ParseClassNotetags'][_0x449f4f(0x5a6)](this,_0x2d4714),VisuMZ['BattleCore'][_0x449f4f(0x6f4)](_0x2d4714);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x9ce)]=VisuMZ[_0x320868(0x9ce)],VisuMZ[_0x320868(0x9ce)]=function(_0x39ef9a){const _0x5df8e6=_0x320868;VisuMZ[_0x5df8e6(0x5c8)][_0x5df8e6(0x9ce)]&&VisuMZ[_0x5df8e6(0x5c8)][_0x5df8e6(0x9ce)][_0x5df8e6(0x5a6)](this,_0x39ef9a),VisuMZ[_0x5df8e6(0x5c8)][_0x5df8e6(0xa82)](_0x39ef9a),VisuMZ['BattleCore']['Parse_Notetags_Targets'](_0x39ef9a);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xa0e)]=VisuMZ[_0x320868(0xa0e)],VisuMZ[_0x320868(0xa0e)]=function(_0x4435ed){const _0x48b676=_0x320868;VisuMZ[_0x48b676(0x5c8)][_0x48b676(0xa0e)]&&VisuMZ[_0x48b676(0x5c8)][_0x48b676(0xa0e)][_0x48b676(0x5a6)](this,_0x4435ed),VisuMZ[_0x48b676(0x5c8)][_0x48b676(0xa82)](_0x4435ed),VisuMZ[_0x48b676(0x5c8)][_0x48b676(0x25f)](_0x4435ed);},VisuMZ['BattleCore'][_0x320868(0x45c)]=VisuMZ['ParseWeaponNotetags'],VisuMZ['ParseWeaponNotetags']=function(_0x5cdb71){const _0x29eab4=_0x320868;VisuMZ[_0x29eab4(0x5c8)][_0x29eab4(0x45c)]&&VisuMZ[_0x29eab4(0x5c8)]['ParseWeaponNotetags'][_0x29eab4(0x5a6)](this,_0x5cdb71),VisuMZ[_0x29eab4(0x5c8)][_0x29eab4(0x6f4)](_0x5cdb71);},VisuMZ['BattleCore'][_0x320868(0x738)]=VisuMZ[_0x320868(0x738)],VisuMZ[_0x320868(0x738)]=function(_0x5dd9b8){const _0x50ff9f=_0x320868;VisuMZ['BattleCore'][_0x50ff9f(0x738)]&&VisuMZ[_0x50ff9f(0x5c8)][_0x50ff9f(0x738)][_0x50ff9f(0x5a6)](this,_0x5dd9b8),VisuMZ[_0x50ff9f(0x5c8)][_0x50ff9f(0x6f4)](_0x5dd9b8);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xac5)]=VisuMZ[_0x320868(0xac5)],VisuMZ[_0x320868(0xac5)]=function(_0x3d787c){const _0x27a62d=_0x320868;VisuMZ[_0x27a62d(0x5c8)]['ParseEnemyNotetags']&&VisuMZ[_0x27a62d(0x5c8)][_0x27a62d(0xac5)][_0x27a62d(0x5a6)](this,_0x3d787c),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x3d787c);},VisuMZ[_0x320868(0x5c8)]['ParseStateNotetags']=VisuMZ['ParseStateNotetags'],VisuMZ[_0x320868(0x2a0)]=function(_0x1c4750){const _0x483d35=_0x320868;VisuMZ[_0x483d35(0x5c8)][_0x483d35(0x2a0)]&&VisuMZ['BattleCore']['ParseStateNotetags']['call'](this,_0x1c4750),VisuMZ[_0x483d35(0x5c8)][_0x483d35(0x6f4)](_0x1c4750),VisuMZ[_0x483d35(0x5c8)][_0x483d35(0x837)](_0x1c4750);},VisuMZ[_0x320868(0x5c8)]['Parse_Notetags_Action']=function(_0xf6313){const _0x261ac4=_0x320868,_0x36dfef=[_0x261ac4(0x8d7),'PostApplyJS',_0x261ac4(0x3a9),_0x261ac4(0x8a2),_0x261ac4(0x345),_0x261ac4(0xbf9),_0x261ac4(0xb42),_0x261ac4(0x67c)];for(const _0x285566 of _0x36dfef){VisuMZ[_0x261ac4(0x5c8)][_0x261ac4(0x85c)](_0xf6313,_0x285566);}const _0x460f79=_0xf6313['note'];_0x460f79[_0x261ac4(0x2e0)](/<ALWAYS CRITICAL/i)&&(_0xf6313['damage'][_0x261ac4(0xa39)]=!![]),_0x460f79[_0x261ac4(0x2e0)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0xf6313[_0x261ac4(0x438)]=Math[_0x261ac4(0x382)](0x1,Number(RegExp['$1']))),_0x460f79['match'](/<TARGET:[ ](.*)>/i)&&(_0xf6313[_0x261ac4(0x3d9)]=String(RegExp['$1'])['toUpperCase']()['trim']());},VisuMZ[_0x320868(0x5c8)][_0x320868(0x6f4)]=function(_0x196d2c){const _0x2256ca=_0x320868,_0x4d0212=[_0x2256ca(0x55b),_0x2256ca(0x5ea),'PreDamageAsUserJS',_0x2256ca(0x533),_0x2256ca(0x712),'PostApplyAsTargetJS','PreDamageAsTargetJS','PostDamageAsTargetJS',_0x2256ca(0x345),_0x2256ca(0xbf9),'PreEndActionJS',_0x2256ca(0x67c),_0x2256ca(0x74a),_0x2256ca(0xa35),_0x2256ca(0xc35),_0x2256ca(0xb7a),_0x2256ca(0x87a),_0x2256ca(0x249),_0x2256ca(0x14c),'EscapeFailureJS',_0x2256ca(0x77e),_0x2256ca(0x9f4),_0x2256ca(0xad0),_0x2256ca(0x6ca),_0x2256ca(0x4fa),_0x2256ca(0x3f8)];for(const _0x2cedda of _0x4d0212){VisuMZ[_0x2256ca(0x5c8)]['createJS'](_0x196d2c,_0x2cedda);}const _0x117cf5=[_0x2256ca(0x179),_0x2256ca(0x779),_0x2256ca(0x610),'jsCritRateAsUser',_0x2256ca(0x4ac)];for(const _0x534fc1 of _0x117cf5){VisuMZ['BattleCore'][_0x2256ca(0x347)](_0x196d2c,_0x534fc1);}},VisuMZ['BattleCore'][_0x320868(0x25f)]=function(_0x39318a){const _0xade2cb=_0x320868,_0x37c582=_0x39318a[_0xade2cb(0x418)];if(_0x37c582['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x4040df=String(RegExp['$1']),_0x2b131e=VisuMZ[_0xade2cb(0x5c8)]['createKeyJS'](_0x39318a,_0xade2cb(0xa6d));VisuMZ[_0xade2cb(0x5c8)][_0xade2cb(0x2d6)](_0x4040df,_0x2b131e);}if(_0x37c582['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x353a4b=String(RegExp['$1']),_0x371891=VisuMZ[_0xade2cb(0x5c8)][_0xade2cb(0xb0b)](_0x39318a,'CommandVisible');VisuMZ[_0xade2cb(0x5c8)][_0xade2cb(0x3df)](_0x353a4b,_0x371891);}},VisuMZ[_0x320868(0x5c8)]['JS']={},VisuMZ['BattleCore'][_0x320868(0x85c)]=function(_0x56bac9,_0x43fa4f){const _0x4e0a36=_0x320868,_0x37592f=_0x56bac9['note'];if(_0x37592f[_0x4e0a36(0x2e0)](VisuMZ[_0x4e0a36(0x5c8)]['RegExp'][_0x43fa4f])){const _0x5e924d=RegExp['$1'],_0x2ce634='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x4e0a36(0x8b0)](_0x5e924d),_0x5979a7=VisuMZ[_0x4e0a36(0x5c8)]['createKeyJS'](_0x56bac9,_0x43fa4f);VisuMZ['BattleCore']['JS'][_0x5979a7]=new Function(_0x2ce634);}},VisuMZ['BattleCore'][_0x320868(0xb0b)]=function(_0x133360,_0x5ab7bd){const _0x2a9504=_0x320868;if(VisuMZ[_0x2a9504(0xb0b)])return VisuMZ[_0x2a9504(0xb0b)](_0x133360,_0x5ab7bd);let _0x2d699e='';if($dataActors[_0x2a9504(0x6d2)](_0x133360))_0x2d699e=_0x2a9504(0x65e)[_0x2a9504(0x8b0)](_0x133360['id'],_0x5ab7bd);if($dataClasses[_0x2a9504(0x6d2)](_0x133360))_0x2d699e=_0x2a9504(0x7b3)[_0x2a9504(0x8b0)](_0x133360['id'],_0x5ab7bd);if($dataSkills[_0x2a9504(0x6d2)](_0x133360))_0x2d699e=_0x2a9504(0x1da)[_0x2a9504(0x8b0)](_0x133360['id'],_0x5ab7bd);if($dataItems[_0x2a9504(0x6d2)](_0x133360))_0x2d699e=_0x2a9504(0xc2f)[_0x2a9504(0x8b0)](_0x133360['id'],_0x5ab7bd);if($dataWeapons['includes'](_0x133360))_0x2d699e='Weapon-%1-%2'[_0x2a9504(0x8b0)](_0x133360['id'],_0x5ab7bd);if($dataArmors[_0x2a9504(0x6d2)](_0x133360))_0x2d699e=_0x2a9504(0x499)[_0x2a9504(0x8b0)](_0x133360['id'],_0x5ab7bd);if($dataEnemies[_0x2a9504(0x6d2)](_0x133360))_0x2d699e=_0x2a9504(0x62f)[_0x2a9504(0x8b0)](_0x133360['id'],_0x5ab7bd);if($dataStates['includes'](_0x133360))_0x2d699e='State-%1-%2'[_0x2a9504(0x8b0)](_0x133360['id'],_0x5ab7bd);return _0x2d699e;},VisuMZ['BattleCore']['createTargetsJS']=function(_0x57214f,_0x444a40){const _0x51a494=_0x320868,_0x19022a='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x51a494(0x8b0)](_0x57214f);VisuMZ[_0x51a494(0x5c8)]['JS'][_0x444a40]=new Function(_0x19022a);},VisuMZ[_0x320868(0x5c8)]['createCommandVisibleJS']=function(_0x25be35,_0x5467af){const _0x21ba9e=_0x320868,_0x351209=_0x21ba9e(0xa02)[_0x21ba9e(0x8b0)](_0x25be35);VisuMZ[_0x21ba9e(0x5c8)]['JS'][_0x5467af]=new Function(_0x351209);},VisuMZ[_0x320868(0x5c8)]['createRateJS']=function(_0x3715cc,_0x19aa1d){const _0x48b14e=_0x320868,_0x3c375c=_0x3715cc['note'];if(_0x3c375c[_0x48b14e(0x2e0)](VisuMZ[_0x48b14e(0x5c8)][_0x48b14e(0x3f9)][_0x19aa1d])){const _0x41a73b=RegExp['$1'],_0xb5bdf=_0x48b14e(0x5b4)[_0x48b14e(0x8b0)](_0x41a73b),_0x11614f=VisuMZ[_0x48b14e(0x5c8)][_0x48b14e(0xb0b)](_0x3715cc,_0x19aa1d);VisuMZ[_0x48b14e(0x5c8)]['JS'][_0x11614f]=new Function(_0xb5bdf);}},VisuMZ[_0x320868(0x5c8)]['Parse_Notetags_HelpDescription']=function(_0x4c36d2){const _0x1e154a=_0x320868;_0x4c36d2['description']='-';const _0xd5d52f=_0x4c36d2['note'];_0xd5d52f[_0x1e154a(0x2e0)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x4c36d2[_0x1e154a(0x5b5)]=String(RegExp['$1'])[_0x1e154a(0x761)]()),_0xd5d52f['match'](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x4c36d2['statusDescription']=String(RegExp['$1'])['trim']()),_0xd5d52f['match'](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0x4c36d2[_0x1e154a(0x689)]=!![]);},TextManager['autoBattle']=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x24b)][_0x320868(0x8e8)],TextManager[_0x320868(0x7c9)]=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)]['AutoBattle'][_0x320868(0x5b1)],TextManager['autoBattleStyle']=VisuMZ['BattleCore']['Settings'][_0x320868(0x252)][_0x320868(0x94f)],TextManager[_0x320868(0x711)]=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x1b6)][_0x320868(0x828)],ColorManager['getColor']=function(_0x1b7872){const _0x452e26=_0x320868;return _0x1b7872=String(_0x1b7872),_0x1b7872['match'](/#(.*)/i)?_0x452e26(0x784)[_0x452e26(0x8b0)](String(RegExp['$1'])):this[_0x452e26(0x1b7)](Number(_0x1b7872));},DataManager['getDamageStyle']=function(_0x165b61){const _0x4052b9=_0x320868;if(_0x165b61[_0x4052b9(0x418)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x34351a=String(RegExp['$1'])[_0x4052b9(0x2c8)]()[_0x4052b9(0x761)]();if(_0x34351a===_0x4052b9(0x3d8))return'MANUAL';if(VisuMZ['DamageStyles'][_0x34351a])return _0x34351a;}const _0x5b7d6f=VisuMZ[_0x4052b9(0x5c8)][_0x4052b9(0x1d7)][_0x4052b9(0x31c)]['DefaultDamageStyle'][_0x4052b9(0x2c8)]()[_0x4052b9(0x761)]();if(VisuMZ[_0x4052b9(0x4a0)][_0x5b7d6f])return _0x5b7d6f;return _0x4052b9(0x3d8);},DataManager[_0x320868(0x60f)]=function(_0x54a559){const _0x4fd294=_0x320868;_0x54a559=_0x54a559[_0x4fd294(0x2c8)]()[_0x4fd294(0x761)](),this[_0x4fd294(0x8d6)]=this['_stypeIDs']||{};if(this[_0x4fd294(0x8d6)][_0x54a559])return this[_0x4fd294(0x8d6)][_0x54a559];for(let _0x313957=0x1;_0x313957<0x64;_0x313957++){if(!$dataSystem[_0x4fd294(0x612)][_0x313957])continue;let _0x3d4866=$dataSystem[_0x4fd294(0x612)][_0x313957][_0x4fd294(0x2c8)]()['trim']();_0x3d4866=_0x3d4866[_0x4fd294(0x550)](/\x1I\[(\d+)\]/gi,''),_0x3d4866=_0x3d4866[_0x4fd294(0x550)](/\\I\[(\d+)\]/gi,''),this[_0x4fd294(0x8d6)][_0x3d4866]=_0x313957;}return this[_0x4fd294(0x8d6)][_0x54a559]||0x0;},DataManager['getSkillIdWithName']=function(_0x1a2ea4){const _0x21c5f5=_0x320868;_0x1a2ea4=_0x1a2ea4[_0x21c5f5(0x2c8)]()['trim'](),this[_0x21c5f5(0x66f)]=this['_skillIDs']||{};if(this[_0x21c5f5(0x66f)][_0x1a2ea4])return this[_0x21c5f5(0x66f)][_0x1a2ea4];for(const _0x50df01 of $dataSkills){if(!_0x50df01)continue;this['_skillIDs'][_0x50df01[_0x21c5f5(0x3e0)][_0x21c5f5(0x2c8)]()[_0x21c5f5(0x761)]()]=_0x50df01['id'];}return this['_skillIDs'][_0x1a2ea4]||0x0;},DataManager[_0x320868(0xc6b)]=function(_0x4738ce){const _0x515145=_0x320868;_0x4738ce=_0x4738ce[_0x515145(0x2c8)]()['trim'](),this['_enemyIDs']=this[_0x515145(0x5f3)]||{};if(this[_0x515145(0x5f3)][_0x4738ce])return this[_0x515145(0x5f3)][_0x4738ce];for(const _0x5b45f4 of $dataEnemies){if(!_0x5b45f4)continue;this[_0x515145(0x5f3)][_0x5b45f4[_0x515145(0x3e0)][_0x515145(0x2c8)]()['trim']()]=_0x5b45f4['id'];}return this[_0x515145(0x5f3)][_0x4738ce]||0x0;},DataManager[_0x320868(0x395)]=function(_0x4a1b76){const _0x465437=_0x320868;_0x4a1b76=_0x4a1b76[_0x465437(0x2c8)]()[_0x465437(0x761)](),this[_0x465437(0x878)]=this[_0x465437(0x878)]||{};if(this[_0x465437(0x878)][_0x4a1b76])return this[_0x465437(0x878)][_0x4a1b76];for(let _0x528474=0x1;_0x528474<0x64;_0x528474++){if(!$dataSystem[_0x465437(0x5d9)][_0x528474])continue;let _0x3670c4=$dataSystem[_0x465437(0x5d9)][_0x528474][_0x465437(0x2c8)]()[_0x465437(0x761)]();_0x3670c4=_0x3670c4['replace'](/\x1I\[(\d+)\]/gi,''),_0x3670c4=_0x3670c4[_0x465437(0x550)](/\\I\[(\d+)\]/gi,''),this[_0x465437(0x878)][_0x3670c4]=_0x528474;}return this[_0x465437(0x878)][_0x465437(0x460)]=0x0,this[_0x465437(0x878)][_0x4a1b76]||0x0;},DataManager[_0x320868(0x929)]=function(_0x55600c){const _0x34b358=_0x320868,_0x386497=_0x34b358(0x47b);let _0xf151a0=_0x55600c[_0x34b358(0xc49)],_0x32bf11=_0x55600c['name'];const _0x3180bd=_0x55600c[_0x34b358(0x418)];return _0x3180bd[_0x34b358(0x2e0)](/<DISPLAY ICON: (\d+)>/i)&&(_0xf151a0=Number(RegExp['$1'])),_0x3180bd[_0x34b358(0x2e0)](/<DISPLAY TEXT: (.*)>/i)&&(_0x32bf11=String(RegExp['$1'])),_0x386497['format'](_0xf151a0,_0x32bf11);},DataManager[_0x320868(0x426)]=function(_0x5898d9){const _0x27bd19=_0x320868;return _0x5898d9[_0x27bd19(0x418)][_0x27bd19(0x2e0)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x5898d9[_0x27bd19(0x3e0)];},DataManager['battleCommandIcon']=function(_0x438886){const _0x1d6f18=_0x320868;return _0x438886[_0x1d6f18(0x418)][_0x1d6f18(0x2e0)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x438886[_0x1d6f18(0xc49)];},DataManager[_0x320868(0x574)]=function(_0xa38b56){const _0x410b04=_0x320868,_0x12231f=$dataEnemies[_0xa38b56];if(_0x12231f){if(_0x12231f[_0x410b04(0x418)][_0x410b04(0x2e0)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x2c80a9=String(RegExp['$1'])[_0x410b04(0x867)](/[\r\n]+/)[_0x410b04(0x236)](''),_0x3b6c49=this[_0x410b04(0x33a)](_0x2c80a9);_0xa38b56=this[_0x410b04(0xc6b)](_0x3b6c49)||_0xa38b56,_0xa38b56=DataManager[_0x410b04(0x574)](_0xa38b56);}}return _0xa38b56;},DataManager[_0x320868(0x33a)]=function(_0x526bb1){const _0x21d77b=_0x320868;let _0x7f5358=0x0;const _0x42e801={};for(const _0x4d23a2 of _0x526bb1){if(_0x4d23a2[_0x21d77b(0x2e0)](/(.*):[ ](\d+)/i)){const _0x3dbe1d=String(RegExp['$1'])[_0x21d77b(0x761)](),_0x7e4a42=Number(RegExp['$2']);_0x42e801[_0x3dbe1d]=_0x7e4a42,_0x7f5358+=_0x7e4a42;}else{if(_0x4d23a2[_0x21d77b(0x2e0)](/(.*):[ ](\d+\.?\d+)/i)){const _0x26fa2b=String(RegExp['$1'])['trim'](),_0xdc573=Number(RegExp['$2']);_0x42e801[_0x26fa2b]=_0xdc573,_0x7f5358+=_0xdc573;}else _0x4d23a2!==''&&(_0x42e801[_0x4d23a2]=0x1,_0x7f5358++);}}if(_0x7f5358<=0x0)return'';let _0x1cebe7=Math[_0x21d77b(0xa3d)]()*_0x7f5358;for(const _0xd54456 in _0x42e801){_0x1cebe7-=_0x42e801[_0xd54456];if(_0x1cebe7<=0x0)return _0xd54456;}return'';},DataManager[_0x320868(0x87f)]=function(_0x30b616){const _0x3933f0=_0x320868;if(!_0x30b616)return![];if(!VisuMZ['BattleCore'][_0x3933f0(0x1d7)][_0x3933f0(0x32c)]['AutoNotetag'])return![];if(_0x30b616['note']['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x30b616[_0x3933f0(0x418)][_0x3933f0(0x2e0)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x4968c8 of _0x30b616[_0x3933f0(0x4cf)]){if(!_0x4968c8)continue;if(_0x4968c8[_0x3933f0(0x6bf)]===Game_Action[_0x3933f0(0x91b)])return!![];}return![];},DataManager['createTroopNote']=function(_0x455124){const _0x7912af=_0x320868,_0x5f4c6d=$dataTroops[_0x455124];if(!_0x5f4c6d)return'';let _0x255510='';_0x255510+=_0x5f4c6d[_0x7912af(0x3e0)];for(const _0x301064 of _0x5f4c6d[_0x7912af(0xa37)]){for(const _0x25aab0 of _0x301064[_0x7912af(0x69b)]){[0x6c,0x198][_0x7912af(0x6d2)](_0x25aab0[_0x7912af(0x6bf)])&&(_0x255510+='\x0a',_0x255510+=_0x25aab0[_0x7912af(0x556)][0x0]);}}return _0x255510;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x320868(0x63f)]??![],ConfigManager[_0x320868(0x8ab)]=ConfigManager[_0x320868(0x8ab)]??![],ConfigManager[_0x320868(0x711)]=ConfigManager[_0x320868(0x711)]??!![],VisuMZ[_0x320868(0x5c8)][_0x320868(0x301)]=ConfigManager[_0x320868(0xbf4)],ConfigManager[_0x320868(0xbf4)]=function(){const _0x4042db=_0x320868,_0x30e584=VisuMZ[_0x4042db(0x5c8)][_0x4042db(0x301)][_0x4042db(0x5a6)](this);return _0x30e584[_0x4042db(0x63f)]=this['autoBattleAtStart'],_0x30e584[_0x4042db(0x8ab)]=this[_0x4042db(0x8ab)],_0x30e584['visualHpGauge']=this[_0x4042db(0x711)],_0x30e584;},VisuMZ[_0x320868(0x5c8)][_0x320868(0xaee)]=ConfigManager[_0x320868(0x501)],ConfigManager[_0x320868(0x501)]=function(_0x36fc8e){const _0x477a23=_0x320868;VisuMZ[_0x477a23(0x5c8)]['ConfigManager_applyData'][_0x477a23(0x5a6)](this,_0x36fc8e),_0x477a23(0x63f)in _0x36fc8e?this[_0x477a23(0x63f)]=_0x36fc8e[_0x477a23(0x63f)]:this[_0x477a23(0x63f)]=![],_0x477a23(0x8ab)in _0x36fc8e?this['autoBattleUseSkills']=_0x36fc8e[_0x477a23(0x8ab)]:this['autoBattleUseSkills']=![],'visualHpGauge'in _0x36fc8e?this[_0x477a23(0x711)]=_0x36fc8e[_0x477a23(0x711)]:this[_0x477a23(0x711)]=!![];},ImageManager[_0x320868(0x89c)]=ImageManager[_0x320868(0x89c)]||0x9,ImageManager[_0x320868(0x7c2)]=ImageManager[_0x320868(0x7c2)]||0x6,VisuMZ[_0x320868(0x5c8)][_0x320868(0x4a5)]=BattleManager[_0x320868(0x8ff)],BattleManager['setup']=function(_0x16ff06,_0x305c4a,_0x3f07b5){const _0x40a280=_0x320868;VisuMZ[_0x40a280(0x5c8)][_0x40a280(0x4a5)][_0x40a280(0x5a6)](this,_0x16ff06,_0x305c4a,_0x3f07b5),this['_battlerKeyCache']={};},VisuMZ['BattleCore'][_0x320868(0x5eb)]=BattleManager['initMembers'],BattleManager['initMembers']=function(){const _0x24569f=_0x320868;VisuMZ[_0x24569f(0x5c8)][_0x24569f(0x5eb)]['call'](this),this[_0x24569f(0x580)]=[];},BattleManager[_0x320868(0x2f5)]=function(){const _0x37c591=_0x320868;$subject=this[_0x37c591(0xaad)],$targets=this[_0x37c591(0x7ac)],$target=this[_0x37c591(0x33d)]||this[_0x37c591(0x7ac)][this[_0x37c591(0x941)]||0x0];},BattleManager[_0x320868(0xa6f)]=function(){const _0x1acc33=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x677a16=SceneManager[_0x1acc33(0x64a)]['_statusWindow'];if(_0x677a16)_0x677a16[_0x1acc33(0x4ce)]();},BattleManager[_0x320868(0x4f7)]=function(){const _0x34a0b1=_0x320868;if(BattleManager[_0x34a0b1(0xb9a)]())return'TPB';return _0x34a0b1(0x3c9);},BattleManager[_0x320868(0x742)]=function(_0x4e244e){const _0x197c7e=_0x320868;return _0x4e244e=_0x4e244e[_0x197c7e(0x2c8)]()['trim'](),this['battleSys']()===_0x4e244e;},BattleManager[_0x320868(0xba7)]=function(){return this['isBattleSys']('DTB');},BattleManager['isTurnBased']=function(){const _0x25d564=_0x320868;return this[_0x25d564(0xba7)]();},BattleManager['isTickBased']=function(){return!this['isTurnBased']();},BattleManager['isTeamBased']=function(){const _0x21dfce=_0x320868;return!this[_0x21dfce(0x7f7)]()&&!this[_0x21dfce(0x563)]();},BattleManager['getBattlerFromKey']=function(_0x5a04b7){const _0x31a32c=_0x320868;this[_0x31a32c(0x4f2)]=this[_0x31a32c(0x4f2)]||{};if(this[_0x31a32c(0x4f2)][_0x5a04b7]!==undefined)return this['_battlerKeyCache'][_0x5a04b7];this['_battlerKeyCache'][_0x5a04b7]=null;const _0x6bdb62=this[_0x31a32c(0x46e)](),_0x57a586=_0x6bdb62[_0x31a32c(0x970)](_0x337b42=>_0x337b42[_0x31a32c(0x15e)]()===_0x5a04b7);if(_0x57a586)this[_0x31a32c(0x4f2)][_0x5a04b7]=_0x57a586;return this[_0x31a32c(0x4f2)][_0x5a04b7];},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x15e)]=function(){const _0x20f7f3=_0x320868;return _0x20f7f3(0xbaa)[_0x20f7f3(0x8b0)](this[_0x20f7f3(0x94e)]()?_0x20f7f3(0xb94):'enemy',this[_0x20f7f3(0x3e0)]()+'-'+(this['isActor']()?this[_0x20f7f3(0xb48)]():this[_0x20f7f3(0x655)]()));},Game_Action['prototype']['setTargetBattlerKey']=function(_0x12d065){const _0x5885d8=_0x320868;if(this[_0x5885d8(0xb1e)]!=='')return;typeof _0x12d065===_0x5885d8(0x255)?this[_0x5885d8(0xb1e)]=_0x12d065[_0x5885d8(0xc44)]()['trim']():this['_targetBattlerKey']=_0x12d065['battlerKey']();},Game_Action[_0x320868(0x5bb)]['getBattlerKeyTargets']=function(){const _0x502f96=_0x320868;return[this[_0x502f96(0x7db)]()];},Game_Action['prototype']['getSpecificBattlerKeyTarget']=function(){const _0x5c1c18=_0x320868,_0x51f148=this[_0x5c1c18(0xb1e)]||'',_0x34526e=BattleManager[_0x5c1c18(0x7e0)](_0x51f148);if(!_0x34526e)return this[_0x5c1c18(0x5c1)]();if(!_0x34526e[_0x5c1c18(0x174)]())return this[_0x5c1c18(0x5c1)]();return _0x34526e;},Game_Action[_0x320868(0x5bb)]['getBattlerKeyTargetReplacement']=function(){const _0x26eede=_0x320868,_0x27c252=this['_targetBattlerKey'];return _0x27c252['match'](/ACTOR/i)?this[_0x26eede(0xc67)]()['trueRandomTarget']():this[_0x26eede(0x7e4)]()[_0x26eede(0xa85)]();},BattleManager[_0x320868(0xbe0)]=function(){const _0x43591e=_0x320868;return this['allBattleMembers']()[_0x43591e(0x477)](_0x106bf1=>_0x106bf1['isSelected']());},BattleManager[_0x320868(0x306)]=function(_0x58cf4f){const _0x38e239=_0x320868;_0x58cf4f===_0x38e239(0x87a)&&(this[_0x38e239(0x678)]=!![]),$gameParty[_0x38e239(0x306)](_0x58cf4f),$gameTroop['processBattleCoreJS'](_0x58cf4f);},VisuMZ[_0x320868(0x5c8)]['BattleManager_startBattle']=BattleManager[_0x320868(0x5d0)],BattleManager[_0x320868(0x5d0)]=function(){const _0x228e48=_0x320868;this[_0x228e48(0x6bc)]=![],this['_autoBattle']=ConfigManager[_0x228e48(0x63f)],this[_0x228e48(0x678)]=![],this[_0x228e48(0x306)](_0x228e48(0x74a)),VisuMZ['BattleCore'][_0x228e48(0x653)][_0x228e48(0x5a6)](this),this[_0x228e48(0x306)](_0x228e48(0xa35));},BattleManager[_0x320868(0x73a)]=function(_0x45db98){const _0x54466c=_0x320868,_0x110d61=VisuMZ['BattleCore'][_0x54466c(0x1d7)][_0x54466c(0x96c)];_0x45db98!==_0x54466c(0x45a)&&_0x110d61['BattleEndEvent']&&VisuMZ[_0x54466c(0x5c8)][_0x54466c(0x85b)](_0x110d61['BattleEndEvent'])&&$gameTemp[_0x54466c(0x278)](_0x110d61[_0x54466c(0x8ec)]);const _0x346110=_0x54466c(0xbe3)[_0x54466c(0x8b0)](_0x45db98);_0x110d61[_0x346110]&&VisuMZ[_0x54466c(0x5c8)][_0x54466c(0x85b)](_0x110d61[_0x346110])&&$gameTemp[_0x54466c(0x278)](_0x110d61[_0x346110]);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc59)]=BattleManager[_0x320868(0xb72)],BattleManager[_0x320868(0xb72)]=function(){const _0x3b76db=_0x320868;VisuMZ['BattleCore'][_0x3b76db(0xc59)][_0x3b76db(0x5a6)](this),SceneManager[_0x3b76db(0x96d)]()&&BattleManager[_0x3b76db(0xb09)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x898)]=BattleManager[_0x320868(0x446)],BattleManager['checkBattleEnd']=function(){const _0x38c308=_0x320868;if(this[_0x38c308(0x135)]==='turn'){if($gameTemp[_0x38c308(0x1f6)]())return![];}return VisuMZ[_0x38c308(0x5c8)][_0x38c308(0x898)][_0x38c308(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x479)]=BattleManager[_0x320868(0x372)],BattleManager[_0x320868(0x372)]=function(){const _0x52a239=_0x320868;this[_0x52a239(0x678)]=!![],this[_0x52a239(0x306)]('BattleVictoryJS'),VisuMZ[_0x52a239(0x5c8)]['BattleManager_processVictory'][_0x52a239(0x5a6)](this),this['processPostBattleCommonEvents'](_0x52a239(0x69c));},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc3d)]=BattleManager[_0x320868(0x6a6)],BattleManager[_0x320868(0x6a6)]=function(){const _0x535a82=_0x320868;this[_0x535a82(0x678)]=!![],VisuMZ[_0x535a82(0x5c8)]['BattleManager_processAbort'][_0x535a82(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)]['BattleManager_processDefeat']=BattleManager['processDefeat'],BattleManager[_0x320868(0x42d)]=function(){const _0x5b13bb=_0x320868;this[_0x5b13bb(0x678)]=!![],this[_0x5b13bb(0x306)](_0x5b13bb(0x249)),VisuMZ['BattleCore'][_0x5b13bb(0xa96)]['call'](this),this[_0x5b13bb(0x73a)](_0x5b13bb(0x253));},VisuMZ[_0x320868(0x5c8)][_0x320868(0x809)]=BattleManager[_0x320868(0x947)],BattleManager['endBattle']=function(_0x257538){const _0x37ba85=_0x320868;this[_0x37ba85(0x6bc)]=!![],this['_autoBattle']=![],this[_0x37ba85(0x306)](_0x37ba85(0xc35)),VisuMZ['BattleCore']['BattleManager_endBattle']['call'](this,_0x257538),this[_0x37ba85(0x306)]('PostEndBattleJS');},VisuMZ['BattleCore'][_0x320868(0x182)]=BattleManager[_0x320868(0x88c)],BattleManager[_0x320868(0x88c)]=function(){const _0x3a1d13=_0x320868;if(this[_0x3a1d13(0x7f7)]())this['processBattleCoreJS'](_0x3a1d13(0x77e));VisuMZ['BattleCore'][_0x3a1d13(0x182)]['call'](this);if(this['isTurnBased']())this[_0x3a1d13(0x306)](_0x3a1d13(0x9f4));},BattleManager[_0x320868(0x652)]=function(){const _0x2cae0b=_0x320868,_0x253130=this['_subject'],_0x1de57=_0x253130[_0x2cae0b(0x7ce)]();_0x1de57?(_0x1de57[_0x2cae0b(0xa9e)](),_0x1de57[_0x2cae0b(0xa6e)]()?(this['startAction'](),_0x253130[_0x2cae0b(0x6d0)]()):(_0x253130[_0x2cae0b(0x6d0)](),this[_0x2cae0b(0x21f)]())):(this[_0x2cae0b(0x21f)](),this[_0x2cae0b(0xaad)]=null);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x4f8)]=BattleManager['startAction'],BattleManager[_0x320868(0x6d7)]=function(){const _0x555317=_0x320868,_0x269dfc=this[_0x555317(0xaad)][_0x555317(0x7ce)](),_0x324ea2=this[_0x555317(0xaad)];_0x269dfc&&_0x269dfc[_0x555317(0x34c)]()===_0x324ea2&&_0x269dfc[_0x555317(0x257)](_0x555317(0x345)),VisuMZ[_0x555317(0x5c8)]['BattleManager_startAction'][_0x555317(0x5a6)](this),_0x269dfc&&_0x269dfc[_0x555317(0x34c)]()===_0x324ea2&&_0x269dfc[_0x555317(0x257)](_0x555317(0xbf9));},VisuMZ[_0x320868(0x5c8)]['BattleManager_endAction']=BattleManager[_0x320868(0x21f)],BattleManager[_0x320868(0x21f)]=function(){const _0x332c5d=_0x320868,_0x4541c1=this['_action'],_0x16daaa=this[_0x332c5d(0xaad)];_0x4541c1&&_0x4541c1!==this[_0x332c5d(0x139)]&&_0x4541c1[_0x332c5d(0x34c)]()===_0x16daaa&&_0x4541c1['actionBattleCoreJS'](_0x332c5d(0xb42)),this[_0x332c5d(0xaad)]?VisuMZ[_0x332c5d(0x5c8)][_0x332c5d(0x13e)][_0x332c5d(0x5a6)](this):this[_0x332c5d(0x135)]=_0x332c5d(0xbd0),_0x4541c1&&_0x4541c1!==this['_lastAction']&&_0x4541c1[_0x332c5d(0x34c)]()===_0x16daaa&&_0x4541c1[_0x332c5d(0x257)](_0x332c5d(0x67c)),this[_0x332c5d(0x366)](this['allBattleMembers']()),this[_0x332c5d(0x139)]=this[_0x332c5d(0xba2)];},BattleManager[_0x320868(0x366)]=function(_0x586163){for(const _0x4ef0f1 of _0x586163){if(!_0x4ef0f1)continue;if(!_0x4ef0f1['battler']())continue;_0x4ef0f1['battler']()['refreshMotion']();}},BattleManager[_0x320868(0x86b)]=function(){const _0x55f2cf=_0x320868;!this[_0x55f2cf(0x8f1)][_0x55f2cf(0x3de)]()&&this[_0x55f2cf(0x21f)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x365)]=function(){const _0x5318c7=_0x320868;this[_0x5318c7(0x233)]();if(Imported[_0x5318c7(0x49b)]){const _0x16e5e6=VisuMZ[_0x5318c7(0x8c8)][_0x5318c7(0x1d7)][_0x5318c7(0xaa7)];_0x16e5e6&&_0x16e5e6[_0x5318c7(0x8bb)]===![]&&this[_0x5318c7(0x1ac)](0x1);}else this[_0x5318c7(0x1ac)](0x1);this[_0x5318c7(0x9df)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x9bb)]=BattleManager[_0x320868(0xbde)],BattleManager[_0x320868(0xbde)]=function(_0x2616b5,_0x555571){const _0x353cdd=_0x320868;this[_0x353cdd(0x165)]=!![],VisuMZ['BattleCore'][_0x353cdd(0x9bb)][_0x353cdd(0x5a6)](this,_0x2616b5,_0x555571),this['_bypassCanCounterCheck']=undefined;},BattleManager['makeEscapeRatio']=function(){const _0x10a924=_0x320868;this[_0x10a924(0x65b)]=VisuMZ[_0x10a924(0x5c8)][_0x10a924(0x1d7)][_0x10a924(0x96c)][_0x10a924(0x85f)][_0x10a924(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x208)]=BattleManager['onEscapeSuccess'],BattleManager[_0x320868(0x83c)]=function(){const _0x4c78b8=_0x320868;this[_0x4c78b8(0x306)](_0x4c78b8(0x14c)),BattleManager[_0x4c78b8(0xa26)][_0x4c78b8(0x327)](),VisuMZ[_0x4c78b8(0x5c8)][_0x4c78b8(0x208)][_0x4c78b8(0x5a6)](this),this[_0x4c78b8(0x73a)](_0x4c78b8(0x397));},VisuMZ[_0x320868(0x5c8)][_0x320868(0x22c)]=BattleManager['onEscapeFailure'],BattleManager[_0x320868(0xb61)]=function(){const _0x332f3d=_0x320868;this[_0x332f3d(0x306)](_0x332f3d(0x846));const _0x1ca1e9=this[_0x332f3d(0x65b)];VisuMZ['BattleCore'][_0x332f3d(0x22c)][_0x332f3d(0x5a6)](this),this[_0x332f3d(0x65b)]=_0x1ca1e9+VisuMZ['BattleCore'][_0x332f3d(0x1d7)][_0x332f3d(0x96c)][_0x332f3d(0x9b6)][_0x332f3d(0x5a6)](this),this['_inputting']=![],this[_0x332f3d(0x73a)]('EscapeFail');},BattleManager[_0x320868(0x170)]=function(){const _0x485ca5=_0x320868;let _0x5eba0f=![];if(this[_0x485ca5(0x75c)]())for(const _0x2d394a of $gameTroop['enemyNames']()){this[_0x485ca5(0x8f1)]['push'](_0x485ca5(0x81f),TextManager['emerge'][_0x485ca5(0x8b0)](_0x2d394a)),this[_0x485ca5(0x8f1)]['push'](_0x485ca5(0x419)),_0x5eba0f=!![];}if(this['_preemptive'])this[_0x485ca5(0x8f1)][_0x485ca5(0x205)]('addText',TextManager[_0x485ca5(0x840)][_0x485ca5(0x8b0)]($gameParty[_0x485ca5(0x3e0)]())),this[_0x485ca5(0x8f1)][_0x485ca5(0x205)](_0x485ca5(0x419));else this['_surprise']&&(this[_0x485ca5(0x8f1)]['push']('addText',TextManager[_0x485ca5(0x178)][_0x485ca5(0x8b0)]($gameParty[_0x485ca5(0x3e0)]())),this['_logWindow'][_0x485ca5(0x205)](_0x485ca5(0x419)));_0x5eba0f&&(this[_0x485ca5(0x8f1)][_0x485ca5(0x205)](_0x485ca5(0x419)),this['_logWindow'][_0x485ca5(0x205)]('clear')),this['isTpb']()&&this['isSkipPartyCommandWindow']()&&(this[_0x485ca5(0xc22)]=![]);},BattleManager[_0x320868(0x75c)]=function(){const _0x4374de=_0x320868;if(BattleManager[_0x4374de(0x16d)])return![];return VisuMZ[_0x4374de(0x5c8)][_0x4374de(0x1d7)][_0x4374de(0x14d)]['EmergeText'];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x62b)]=BattleManager['startInput'],BattleManager[_0x320868(0xaa4)]=function(){const _0x48a0df=_0x320868;VisuMZ[_0x48a0df(0x5c8)][_0x48a0df(0x62b)]['call'](this),this[_0x48a0df(0xba7)]()&&this[_0x48a0df(0x121)]()&&!this[_0x48a0df(0x737)]&&$gameParty[_0x48a0df(0xbe8)]()&&this[_0x48a0df(0x8eb)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x257e02=_0x320868;return VisuMZ[_0x257e02(0x5c8)][_0x257e02(0x1d7)][_0x257e02(0x24b)]['SkipPartyCmd'];},BattleManager[_0x320868(0xb32)]=function(){const _0x388ba0=_0x320868;this[_0x388ba0(0x1bb)]()&&this[_0x388ba0(0x8eb)]();},VisuMZ[_0x320868(0x5c8)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x20d)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x20d)]=function(){const _0x22b906=_0x320868;VisuMZ[_0x22b906(0x5c8)]['Scene_Battle_startActorCommandSelection']['call'](this),BattleManager[_0x22b906(0xb9a)]()&&BattleManager[_0x22b906(0xc22)]&&(BattleManager[_0x22b906(0xc22)]=![],this[_0x22b906(0x133)]());},BattleManager['emulateAction']=function(_0x10c74b,_0x40fef5,_0x4ac11d){const _0x4f635a=_0x320868;if(!_0x4ac11d)return;if(!_0x10c74b)return;if(!_0x40fef5)return;const _0x730c18=this['_action'];this[_0x4f635a(0xba2)]=new Game_Action(_0x10c74b);if(DataManager[_0x4f635a(0x1fe)](_0x4ac11d))this[_0x4f635a(0xba2)][_0x4f635a(0x7a2)](_0x4ac11d['id']);if(DataManager['isSkill'](_0x4ac11d))this['_action'][_0x4f635a(0x349)](_0x4ac11d['id']);if(this[_0x4f635a(0xba2)][_0x4f635a(0xc47)]())BattleManager[_0x4f635a(0x4f9)](_0x10c74b,_0x40fef5);this[_0x4f635a(0xba2)]=_0x730c18;},BattleManager[_0x320868(0xa01)]=function(_0x5dc5a6,_0x1d439d){const _0x32e9b0=_0x320868;this[_0x32e9b0(0xba2)][_0x32e9b0(0x659)]=_0x1d439d,this[_0x32e9b0(0x8f1)]['displayReflection'](_0x1d439d),this['_logWindow']['displayReflectionPlayBack'](_0x5dc5a6,this['_action']),this[_0x32e9b0(0xba2)][_0x32e9b0(0x734)](_0x5dc5a6),this['_logWindow']['displayActionResults'](_0x5dc5a6,_0x5dc5a6);},VisuMZ[_0x320868(0x5c8)]['BattleManager_makeActionOrders']=BattleManager[_0x320868(0xc57)],BattleManager['makeActionOrders']=function(){const _0x38b793=_0x320868;VisuMZ['BattleCore'][_0x38b793(0x30e)][_0x38b793(0x5a6)](this),this['_actionBattlers']=this[_0x38b793(0x463)][_0x38b793(0x477)](_0x2f191e=>_0x2f191e&&_0x2f191e[_0x38b793(0x338)]());},VisuMZ['BattleCore']['BattleManager_updatePhase']=BattleManager[_0x320868(0x8ad)],BattleManager[_0x320868(0x8ad)]=function(_0x2d5201){const _0x56391c=_0x320868;if(this[_0x56391c(0x135)]===_0x56391c(0x198))this['updateCustomActionSequence']();else this['_phase']===_0x56391c(0x647)?this['updateForceAction']():VisuMZ[_0x56391c(0x5c8)][_0x56391c(0x99e)][_0x56391c(0x5a6)](this,_0x2d5201);},BattleManager[_0x320868(0xc19)]=function(){const _0x2b4fdc=_0x320868;this[_0x2b4fdc(0xaba)]=this['_targets'][_0x2b4fdc(0xab5)](0x0),this[_0x2b4fdc(0x941)]=0x0,this[_0x2b4fdc(0x33d)]=this['_allTargets'][0x0]||null,this['_phase']=_0x2b4fdc(0x198);},BattleManager['updateCustomActionSequence']=function(){const _0xf21f39=_0x320868;!this[_0xf21f39(0xc15)]()&&!this[_0xf21f39(0x8f1)][_0xf21f39(0x3de)]()&&(this[_0xf21f39(0x135)]=_0xf21f39(0x6b5));},BattleManager[_0x320868(0x647)]=function(_0x5450be){const _0x44c264=_0x320868;this[_0x44c264(0x463)]['remove'](_0x5450be);if(_0x5450be===this[_0x44c264(0xaad)])return;const _0xd23cdc=JsonEx['makeDeepCopy'](_0x5450be[_0x44c264(0x7ce)]());this[_0x44c264(0x580)]['push']([_0x5450be,_0xd23cdc]);},BattleManager[_0x320868(0xacd)]=function(){},BattleManager['updateStart']=function(){const _0x34c000=_0x320868;if(this[_0x34c000(0xb9a)]())this[_0x34c000(0x135)]=_0x34c000(0xbd0);else this[_0x34c000(0x580)]['length']>0x0?this[_0x34c000(0x135)]='turn':this[_0x34c000(0xaa4)]();},BattleManager[_0x320868(0x6e8)]=function(){const _0x23d7a0=_0x320868,_0x2e159b=this[_0x23d7a0(0xaad)];_0x2e159b&&this[_0x23d7a0(0xb9a)]()&&_0x2e159b['setActionState'](_0x23d7a0(0x73b));for(;;){const _0x5284c3=this[_0x23d7a0(0x152)]();if(!_0x5284c3)return null;if(_0x5284c3[_0x23d7a0(0x4ea)]()&&_0x5284c3[_0x23d7a0(0x174)]())return _0x5284c3;}},BattleManager[_0x320868(0x152)]=function(){const _0x3eefb7=_0x320868;if(this[_0x3eefb7(0x580)][_0x3eefb7(0x4c1)]>0x0){const _0x105382=this['_forcedBattlers'][_0x3eefb7(0x97d)](),_0x5783c0=_0x105382[0x0];return _0x5783c0['_actions']=_0x5783c0[_0x3eefb7(0x3b3)]||[],_0x5783c0['_actions'][0x0]=_0x105382[0x1],_0x5783c0;}else return this[_0x3eefb7(0x463)][_0x3eefb7(0x97d)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x76a)]=Game_Battler[_0x320868(0x5bb)][_0x320868(0x647)],Game_Battler['prototype'][_0x320868(0x647)]=function(_0x22a7e1,_0x29730f){const _0x5554d3=_0x320868;VisuMZ['BattleCore'][_0x5554d3(0x76a)][_0x5554d3(0x5a6)](this,_0x22a7e1,_0x29730f),this['_actions'][this[_0x5554d3(0x3b3)][_0x5554d3(0x4c1)]-0x1][_0x5554d3(0x244)]=!![];},Game_Interpreter['prototype']['command339']=function(_0x17a943){return this['iterateBattler'](_0x17a943[0x0],_0x17a943[0x1],_0x3950a8=>{const _0x485ed7=_0x3e02;!_0x3950a8[_0x485ed7(0x2c3)]()&&(_0x3950a8[_0x485ed7(0x647)](_0x17a943[0x2],_0x17a943[0x3]),BattleManager['forceAction'](_0x3950a8));}),!![];},VisuMZ['BattleCore'][_0x320868(0xba1)]=Game_Battler['prototype'][_0x320868(0xb11)],Game_Battler['prototype'][_0x320868(0xb11)]=function(){const _0x22ccac=_0x320868;VisuMZ[_0x22ccac(0x5c8)][_0x22ccac(0xba1)][_0x22ccac(0x5a6)](this),this[_0x22ccac(0x3b3)]['length']<=0x0&&(this[_0x22ccac(0xaef)]=Number[_0x22ccac(0x1d0)]);},BattleManager[_0x320868(0x176)]=function(){const _0x5a5b0e=_0x320868;if(VisuMZ['BattleCore'][_0x5a5b0e(0x1d7)][_0x5a5b0e(0x31c)][_0x5a5b0e(0x791)]??!![])return![];return SceneManager[_0x5a5b0e(0x96d)]()&&this['_endingBattle'];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x70f)]=BattleManager[_0x320868(0x8eb)],BattleManager[_0x320868(0x8eb)]=function(){const _0x3f7da1=_0x320868;this[_0x3f7da1(0xb9a)]()?this[_0x3f7da1(0x5ba)]():VisuMZ[_0x3f7da1(0x5c8)][_0x3f7da1(0x70f)][_0x3f7da1(0x5a6)](this);},BattleManager['selectNextCommandTpb']=function(){const _0x782086=_0x320868;if(this[_0x782086(0x90c)]){if(this[_0x782086(0x90c)]['selectNextCommand']())return;this[_0x782086(0xc27)](),this['checkTpbInputClose'](),!this[_0x782086(0xaad)]&&!this[_0x782086(0x90c)]&&SceneManager[_0x782086(0x64a)]['updateBattleProcess']();}else!this[_0x782086(0xaad)]&&this['selectNextActor']();},BattleManager[_0x320868(0x4c7)]=function(){const _0x1831f0=_0x320868;(!this[_0x1831f0(0x1bb)]()||this[_0x1831f0(0x468)]())&&(this[_0x1831f0(0x7d6)]&&(!$gameParty[_0x1831f0(0x20a)]()[_0x1831f0(0x6d2)](this[_0x1831f0(0x7d6)])&&(this[_0x1831f0(0x7d6)]=null)),!this[_0x1831f0(0x7d6)]?(this['cancelActorInput'](),this[_0x1831f0(0x90c)]=null,this[_0x1831f0(0x6b9)]=![]):this[_0x1831f0(0x35f)]());},BattleManager[_0x320868(0x35f)]=function(){const _0x29ceb=_0x320868;!$gameParty[_0x29ceb(0x20a)]()[_0x29ceb(0x6d2)](this['_tpbSceneChangeCacheActor'])&&(this[_0x29ceb(0x7d6)]=null),this[_0x29ceb(0x7d6)]?(this[_0x29ceb(0x90c)]=this['_tpbSceneChangeCacheActor'],this['_currentActor'][_0x29ceb(0x96a)]=_0x29ceb(0x7cd),this[_0x29ceb(0x6b9)]=!![],this[_0x29ceb(0x7d6)]=null):(this[_0x29ceb(0x613)](),this['_currentActor']=null,this[_0x29ceb(0x6b9)]=![]);},VisuMZ['BattleCore']['BattleManager_isTpbMainPhase']=BattleManager['isTpbMainPhase'],BattleManager[_0x320868(0x42c)]=function(){const _0x345225=_0x320868;return this[_0x345225(0x135)]===_0x345225(0x198)?this[_0x345225(0x452)]():VisuMZ[_0x345225(0x5c8)][_0x345225(0xc34)][_0x345225(0x5a6)](this);},BattleManager[_0x320868(0x452)]=function(){const _0x47b926=_0x320868;return this[_0x47b926(0x76e)]();},VisuMZ['BattleCore'][_0x320868(0xbe2)]=BattleManager[_0x320868(0x613)],BattleManager[_0x320868(0x613)]=function(){const _0x18cf3=_0x320868;this[_0x18cf3(0xb9a)]()&&this[_0x18cf3(0x135)]===_0x18cf3(0x336)&&(this[_0x18cf3(0x90c)]=null),VisuMZ[_0x18cf3(0x5c8)][_0x18cf3(0xbe2)]['call'](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x7b6)]=BattleManager[_0x320868(0x662)],BattleManager[_0x320868(0x662)]=function(){const _0x3f1c97=_0x320868,_0x4ea92e=this['_currentActor'];if(_0x4ea92e&&!_0x4ea92e[_0x3f1c97(0x662)]()){const _0x16cc9b=_0x4ea92e[_0x3f1c97(0xa18)];_0x4ea92e[_0x3f1c97(0x3b3)][_0x16cc9b]=new Game_Action(_0x4ea92e);}return VisuMZ[_0x3f1c97(0x5c8)][_0x3f1c97(0x7b6)][_0x3f1c97(0x5a6)](this);},VisuMZ['BattleCore'][_0x320868(0x334)]=BattleManager[_0x320868(0x7fa)],BattleManager[_0x320868(0x7fa)]=function(_0x4fb93b){const _0x3c5405=_0x320868;if(this[_0x3c5405(0xba2)][_0x3c5405(0xa5d)]())return![];return VisuMZ[_0x3c5405(0x5c8)]['BattleManager_checkSubstitute'][_0x3c5405(0x5a6)](this,_0x4fb93b);},SceneManager['isSceneBattle']=function(){const _0x505001=_0x320868;return this[_0x505001(0x64a)]&&this[_0x505001(0x64a)][_0x505001(0xc58)]===Scene_Battle;},SceneManager[_0x320868(0x19d)]=function(){return Spriteset_Battle['prototype']['isFlipped']();},SceneManager[_0x320868(0x4a8)]=function(){const _0x7b69c6=_0x320868;if(SceneManager[_0x7b69c6(0x50a)](Scene_Options))return!![];return![];},SceneManager[_0x320868(0x262)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x320868(0xab3)]=function(_0x258a0d){const _0x578615=_0x320868;if(!SceneManager[_0x578615(0x96d)]())return!![];const _0x994236=['Scene_Options',_0x578615(0xbc3),_0x578615(0x552)];return _0x994236[_0x578615(0x6d2)](_0x258a0d[_0x578615(0x3e0)]);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc04)]=SceneManager['push'],SceneManager['push']=function(_0x1d0aee){const _0x2329d5=_0x320868;if(!SceneManager[_0x2329d5(0xab3)](_0x1d0aee))return this[_0x2329d5(0xb17)](_0x1d0aee);VisuMZ['BattleCore'][_0x2329d5(0xc04)][_0x2329d5(0x5a6)](this,_0x1d0aee);},SceneManager[_0x320868(0xb17)]=function(_0x3b4a7e){const _0x4cd912=_0x320868;if(!$gameTemp[_0x4cd912(0x219)]())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x4cd912(0xad4)]=!![];let _0x81d97='';_0x81d97+=_0x4cd912(0xc1b),_0x81d97+=_0x4cd912(0xb4b)[_0x4cd912(0x8b0)](_0x3b4a7e['name']),alert(_0x81d97);},VisuMZ[_0x320868(0x5c8)]['Game_Temp_initialize']=Game_Temp[_0x320868(0x5bb)]['initialize'],Game_Temp[_0x320868(0x5bb)][_0x320868(0x136)]=function(){const _0x1dd89a=_0x320868;VisuMZ[_0x1dd89a(0x5c8)][_0x1dd89a(0x85a)][_0x1dd89a(0x5a6)](this),this[_0x1dd89a(0xa44)]=[];},VisuMZ[_0x320868(0x5c8)][_0x320868(0xb26)]=Game_Temp[_0x320868(0x5bb)][_0x320868(0x416)],Game_Temp['prototype']['requestAnimation']=function(_0x1c9346,_0xd8ca25,_0x3a88f2){const _0x1a3d86=_0x320868;_0x1c9346[_0x1a3d86(0x236)](null)[_0x1a3d86(0x236)](undefined),_0x1c9346=_0x1c9346[_0x1a3d86(0x477)]((_0x1abd3f,_0xcda61a,_0x4a91a1)=>_0x4a91a1['indexOf'](_0x1abd3f)===_0xcda61a);SceneManager[_0x1a3d86(0x96d)]()&&SceneManager[_0x1a3d86(0x19d)]()&&(_0x3a88f2=!_0x3a88f2);VisuMZ[_0x1a3d86(0x5c8)][_0x1a3d86(0xb26)]['call'](this,_0x1c9346,_0xd8ca25,_0x3a88f2);SceneManager[_0x1a3d86(0x96d)]()&&BattleManager['_spriteset'][_0x1a3d86(0xb05)]();for(const _0x222831 of _0x1c9346){_0x222831&&_0x222831[_0x1a3d86(0xb8b)]&&_0x222831['isEnemy']()&&_0x222831['resetNameTempVisibility']();}},Game_Temp[_0x320868(0x5bb)][_0x320868(0x95a)]=function(_0x565209){const _0x5473a7=_0x320868;this[_0x5473a7(0x6dd)]=_0x565209;},Game_Temp[_0x320868(0x5bb)]['getLastPluginCommandInterpreter']=function(){const _0x386175=_0x320868;return this[_0x386175(0x6dd)];},Game_Temp[_0x320868(0x5bb)][_0x320868(0x614)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x320868(0x5bb)][_0x320868(0x5c3)]=function(_0x36333a){const _0x5ca044=_0x320868;$gameMap&&$dataMap&&$dataMap[_0x5ca044(0x418)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x5ca044(0x418)]);const _0x13fb0a=$dataTroops[_0x36333a];if(_0x13fb0a){let _0xf54245=DataManager['createTroopNote'](_0x13fb0a['id']);this[_0x5ca044(0x2c7)](_0xf54245);}},Game_Temp[_0x320868(0x5bb)][_0x320868(0x2c7)]=function(_0x266b4b){const _0x1c652b=_0x320868;if(!_0x266b4b)return;if(_0x266b4b[_0x1c652b(0x2e0)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0xb17a30=String(RegExp['$1']);if(_0xb17a30[_0x1c652b(0x2e0)](/DEFAULT/i))this['_forcedBattleLayout']='default';else{if(_0xb17a30[_0x1c652b(0x2e0)](/LIST/i))this[_0x1c652b(0x2d0)]=_0x1c652b(0x69b);else{if(_0xb17a30[_0x1c652b(0x2e0)](/XP/i))this[_0x1c652b(0x2d0)]='xp';else{if(_0xb17a30[_0x1c652b(0x2e0)](/PORTRAIT/i))this[_0x1c652b(0x2d0)]='portrait';else{if(_0xb17a30[_0x1c652b(0x2e0)](/BORDER/i))this[_0x1c652b(0x2d0)]=_0x1c652b(0xba8);else{if(_0xb17a30[_0x1c652b(0x2e0)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported['VisuMZ_3_SideviewBattleUI']?this[_0x1c652b(0x2d0)]=_0x1c652b(0x304):this[_0x1c652b(0x2d0)]=_0x1c652b(0x86a);else _0xb17a30[_0x1c652b(0x2e0)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x1c652b(0xae0)]?this['_forcedBattleLayout']=_0x1c652b(0x8ac):this[_0x1c652b(0x2d0)]=_0x1c652b(0x86a));}}}}}}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x1e4)]=Game_Temp[_0x320868(0x5bb)][_0x320868(0x502)],Game_Temp[_0x320868(0x5bb)][_0x320868(0x502)]=function(_0x2b39e2,_0xdadcc7){const _0x21d1ae=_0x320868;SceneManager[_0x21d1ae(0x96d)]()?this[_0x21d1ae(0x33f)](_0x2b39e2,_0xdadcc7):VisuMZ[_0x21d1ae(0x5c8)][_0x21d1ae(0x1e4)]['call'](this,_0x2b39e2,_0xdadcc7);},Game_Temp[_0x320868(0x5bb)][_0x320868(0x33f)]=function(_0xf4091b,_0x2e2eaa){const _0xef343a=_0x320868,_0x2ac40d={'target':_0xf4091b,'balloonId':_0x2e2eaa};this['_battleBalloonQueue']=this[_0xef343a(0xa44)]||[],this['_battleBalloonQueue']['push'](_0x2ac40d);},Game_Temp['prototype'][_0x320868(0x79c)]=function(){const _0x47ea75=_0x320868;return this['_battleBalloonQueue']=this[_0x47ea75(0xa44)]||[],this[_0x47ea75(0xa44)][_0x47ea75(0x97d)]();},Game_Temp['prototype'][_0x320868(0x24c)]=function(){const _0x4d697f=_0x320868;this[_0x4d697f(0xa44)]=[];},Spriteset_Battle['prototype'][_0x320868(0x34a)]=function(){const _0x541504=_0x320868;this[_0x541504(0x71d)]===undefined&&(this[_0x541504(0x71d)]=[]);for(const _0x457613 of this['_battleBalloonSprites']){!_0x457613[_0x541504(0x126)]()&&this[_0x541504(0x98b)](_0x457613);}this[_0x541504(0x83a)]();},Spriteset_Battle['prototype'][_0x320868(0x83a)]=function(){const _0x4eab13=_0x320868;for(;;){const _0x36b229=$gameTemp[_0x4eab13(0x79c)]();if(_0x36b229)this['createBattleBalloon'](_0x36b229);else break;}},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x996)]=function(_0x34f0ca){const _0x1e6058=_0x320868,_0x487add=this['findTargetSprite'](_0x34f0ca['target']);if(_0x487add){let _0x27ef36=null;Imported[_0x1e6058(0xb30)]&&Array[_0x1e6058(0xb64)](_0x34f0ca['balloonId'])?_0x27ef36=new Sprite_IconBalloon():_0x27ef36=new Sprite_Balloon(),_0x27ef36[_0x1e6058(0xb63)]=_0x34f0ca[_0x1e6058(0x525)],_0x27ef36[_0x1e6058(0x33d)]=_0x487add,_0x27ef36[_0x1e6058(0x33d)][_0x1e6058(0xb1f)]=_0x487add,_0x27ef36[_0x1e6058(0x8ff)](_0x487add,_0x34f0ca[_0x1e6058(0x1d3)]),BattleManager[_0x1e6058(0x1a5)](_0x27ef36),this['_battleBalloonSprites']['push'](_0x27ef36);}},Spriteset_Battle['prototype'][_0x320868(0x98b)]=function(_0x22f8e9){const _0x16e01f=_0x320868;this['_battleBalloonSprites'][_0x16e01f(0x236)](_0x22f8e9),BattleManager[_0x16e01f(0xa90)](_0x22f8e9),_0x22f8e9[_0x16e01f(0x26d)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x8bc)]=function(_0x583fe3,_0xa5d791){},Sprite_Battler['prototype'][_0x320868(0x569)]=function(){return![];},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x915)]=function(){const _0x505c0a=_0x320868;return this[_0x505c0a(0x71d)]=this['_battleBalloonSprites']||[],this[_0x505c0a(0x71d)][_0x505c0a(0x4c1)]>0x0;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x5db)]=Game_System[_0x320868(0x5bb)]['initialize'],Game_System['prototype'][_0x320868(0x136)]=function(){const _0x32f67d=_0x320868;VisuMZ[_0x32f67d(0x5c8)]['Game_System_initialize'][_0x32f67d(0x5a6)](this),this[_0x32f67d(0x6fb)]();},Game_System['prototype'][_0x320868(0x6fb)]=function(){const _0x514200=_0x320868;this['_defeatedEnemies']=this[_0x514200(0x81a)]||[];},Game_System[_0x320868(0x5bb)][_0x320868(0xab9)]=function(){const _0x27bb84=_0x320868;if(this[_0x27bb84(0x81a)]===undefined)this[_0x27bb84(0x6fb)]();return this[_0x27bb84(0x81a)];},Game_System[_0x320868(0x5bb)]['registerDefeatedEnemy']=function(_0x3f443b){const _0x29210d=_0x320868;if(this[_0x29210d(0x81a)]===undefined)this['initBattleCore']();if(!_0x3f443b)return;if(this[_0x29210d(0x81a)]['includes'](_0x3f443b))return;this[_0x29210d(0x81a)][_0x29210d(0x205)](_0x3f443b),this[_0x29210d(0x81a)][_0x29210d(0x811)]((_0x29b6af,_0x3e0635)=>_0x29b6af-_0x3e0635);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x3c7)]=Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0xa63)],Game_BattlerBase[_0x320868(0x5bb)]['addNewState']=function(_0x48157f){const _0x558590=_0x320868,_0x3e0456=this['isAlive'](),_0x3f8584=this[_0x558590(0x33e)]();VisuMZ[_0x558590(0x5c8)]['Game_BattlerBase_addNewState']['call'](this,_0x48157f),this[_0x558590(0xb8b)]()&&_0x3e0456&&this['isDead']()&&(this[_0x558590(0x22e)]=!this[_0x558590(0xa1a)](),$gameSystem[_0x558590(0xb21)](this[_0x558590(0x78a)]())),SceneManager['isSceneBattle']()&&_0x3f8584!==this['stateMotionIndex']()&&(this[_0x558590(0xb31)]()&&this[_0x558590(0xb31)]()[_0x558590(0x47a)]());},Game_Enemy['prototype'][_0x320868(0xa1a)]=function(){const _0x5dbc5f=_0x320868;return $gameSystem[_0x5dbc5f(0xab9)]()[_0x5dbc5f(0x6d2)](this[_0x5dbc5f(0x577)]);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x2a8)]=Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x363)],Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x363)]=function(_0x248121){const _0x251c2c=_0x320868,_0x3ac8ad=this[_0x251c2c(0x85d)][_0x251c2c(0x6d2)](_0x248121),_0x150ac1=this[_0x251c2c(0x33e)]();VisuMZ['BattleCore'][_0x251c2c(0x2a8)][_0x251c2c(0x5a6)](this,_0x248121),this[_0x251c2c(0xb8b)]()&&_0x248121===this[_0x251c2c(0x220)]()&&this[_0x251c2c(0x174)]()&&(this[_0x251c2c(0x22e)]=![]),!this[_0x251c2c(0x2f1)]&&!this[_0x251c2c(0x86e)]&&SceneManager[_0x251c2c(0x96d)]()&&(_0x3ac8ad&&!this[_0x251c2c(0x85d)][_0x251c2c(0x6d2)](_0x248121)&&this[_0x251c2c(0xb14)](),_0x150ac1!==this[_0x251c2c(0x33e)]()&&(this[_0x251c2c(0xb31)]()&&this[_0x251c2c(0xb31)]()[_0x251c2c(0x47a)]()));},VisuMZ[_0x320868(0x5c8)][_0x320868(0xb67)]=Game_Action[_0x320868(0x5bb)]['clear'],Game_Action[_0x320868(0x5bb)]['clear']=function(){const _0x1b85f9=_0x320868;VisuMZ[_0x1b85f9(0x5c8)][_0x1b85f9(0xb67)][_0x1b85f9(0x5a6)](this),this[_0x1b85f9(0x754)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1b85f9(0x9c2)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x1b85f9(0x86a),this['clearTargetBattlerKey']();},Game_Action['prototype'][_0x320868(0x25b)]=function(){this['_targetBattlerKey']='';},VisuMZ['BattleCore'][_0x320868(0xc4f)]=Game_Action[_0x320868(0x5bb)]['setSubject'],Game_Action[_0x320868(0x5bb)][_0x320868(0x388)]=function(_0x187fbf){const _0x1defc5=_0x320868;VisuMZ[_0x1defc5(0x5c8)][_0x1defc5(0xc4f)][_0x1defc5(0x5a6)](this,_0x187fbf),this[_0x1defc5(0x25b)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0xbc4)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x349)],Game_Action[_0x320868(0x5bb)][_0x320868(0x349)]=function(_0x572872){const _0x385d11=_0x320868;VisuMZ[_0x385d11(0x5c8)][_0x385d11(0xbc4)][_0x385d11(0x5a6)](this,_0x572872),this[_0x385d11(0x25b)]();},VisuMZ['BattleCore'][_0x320868(0x53d)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x7a2)],Game_Action['prototype'][_0x320868(0x7a2)]=function(_0x3e87e3){const _0xcee38e=_0x320868;VisuMZ[_0xcee38e(0x5c8)][_0xcee38e(0x53d)][_0xcee38e(0x5a6)](this,_0x3e87e3),this[_0xcee38e(0x25b)]();},Game_Action['prototype'][_0x320868(0x66d)]=function(_0x10205a,_0x931dbf){const _0x5282a5=_0x320868;return VisuMZ[_0x5282a5(0x5c8)]['Settings'][_0x5282a5(0x31c)]['OverallFormulaJS'][_0x5282a5(0x5a6)](this,_0x10205a,_0x931dbf);},Game_Action[_0x320868(0x5bb)][_0x320868(0x570)]=function(_0x376cf0,_0x534a37){const _0x2b0e7a=_0x320868;return VisuMZ[_0x2b0e7a(0x5c8)][_0x2b0e7a(0x1d7)][_0x2b0e7a(0x31c)]['VarianceFormulaJS']['call'](this,_0x376cf0,_0x534a37);},Game_Action[_0x320868(0x5bb)][_0x320868(0x49a)]=function(_0x5a8391,_0x1480e9){const _0x34f152=_0x320868;return VisuMZ[_0x34f152(0x5c8)][_0x34f152(0x1d7)][_0x34f152(0x31c)][_0x34f152(0x835)]['call'](this,_0x5a8391,_0x1480e9);},VisuMZ[_0x320868(0x5c8)]['Game_Action_itemHit']=Game_Action[_0x320868(0x5bb)][_0x320868(0x888)],Game_Action[_0x320868(0x5bb)]['itemHit']=function(_0x40d2ac){const _0x2c409b=_0x320868,_0xa85f76=this['item']()['note'];if(_0xa85f76[_0x2c409b(0x2e0)](/<ALWAYS HIT>/i))return 0x1;else{if(_0xa85f76[_0x2c409b(0x2e0)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4ac6a7=VisuMZ[_0x2c409b(0x5c8)]['Game_Action_itemHit'][_0x2c409b(0x5a6)](this,_0x40d2ac);return _0x4ac6a7=this[_0x2c409b(0x9c2)][_0x2c409b(0x2de)]*_0x4ac6a7+this[_0x2c409b(0x9c2)]['hitFlat'],$gameParty[_0x2c409b(0x3f3)]()&&(_0x4ac6a7=this[_0x2c409b(0x13a)](_0x4ac6a7,_0x40d2ac)),_0x4ac6a7;}}},VisuMZ[_0x320868(0x5c8)]['Game_Action_updateLastTarget']=Game_Action[_0x320868(0x5bb)]['updateLastTarget'],Game_Action[_0x320868(0x5bb)][_0x320868(0x4eb)]=function(_0x73fbf9){const _0x1b1f14=_0x320868;this[_0x1b1f14(0x34f)]=!![],VisuMZ[_0x1b1f14(0x5c8)][_0x1b1f14(0x733)][_0x1b1f14(0x5a6)](this,_0x73fbf9),this['_bypass_applyBattleCoreHitRateJS']=undefined;},Game_Action[_0x320868(0x5bb)][_0x320868(0x30c)]=function(_0x295089){const _0x4b7b6f=_0x320868;window[_0x4b7b6f(0x6b5)]=this,window['a']=this['subject'](),window['b']=_0x295089,window['user']=this[_0x4b7b6f(0x34c)](),window['target']=_0x295089,window[_0x4b7b6f(0xabe)]=this[_0x4b7b6f(0xc47)](),window[_0x4b7b6f(0x5ff)]=this[_0x4b7b6f(0xc47)](),window[_0x4b7b6f(0xc47)]=this['item']();},Game_Action[_0x320868(0x5bb)][_0x320868(0x16f)]=function(_0x3cbb8a){const _0x5f443f=_0x320868;window['action']=undefined,window['a']=undefined,window['b']=undefined,window[_0x5f443f(0x367)]=undefined,window[_0x5f443f(0x525)]=undefined,window[_0x5f443f(0xabe)]=undefined,window['skill']=undefined,window[_0x5f443f(0xc47)]=undefined;},Game_Action[_0x320868(0x5bb)]['applyBattleCoreHitRateJS']=function(_0x4ea016,_0x49f232){const _0x5d0ea9=_0x320868;if(this['_bypass_applyBattleCoreHitRateJS'])return _0x4ea016;this[_0x5d0ea9(0x30c)](_0x49f232);if(this[_0x5d0ea9(0xc47)]()){let _0x331985=VisuMZ[_0x5d0ea9(0x5c8)][_0x5d0ea9(0xb0b)](this[_0x5d0ea9(0xc47)](),_0x5d0ea9(0x179));VisuMZ[_0x5d0ea9(0x5c8)]['JS'][_0x331985]&&(_0x4ea016=VisuMZ['BattleCore']['JS'][_0x331985][_0x5d0ea9(0x5a6)](this,this['subject'](),_0x49f232,this[_0x5d0ea9(0xc47)](),_0x4ea016));}for(const _0x47e66f of this['subject']()[_0x5d0ea9(0x22d)]()){if(!_0x47e66f)continue;key=VisuMZ[_0x5d0ea9(0x5c8)][_0x5d0ea9(0xb0b)](_0x47e66f,_0x5d0ea9(0x779)),VisuMZ[_0x5d0ea9(0x5c8)]['JS'][key]&&(_0x4ea016=VisuMZ['BattleCore']['JS'][key][_0x5d0ea9(0x5a6)](this,this[_0x5d0ea9(0x34c)](),_0x49f232,this[_0x5d0ea9(0xc47)](),_0x4ea016));}for(const _0x402a03 of _0x49f232[_0x5d0ea9(0x22d)]()){if(!_0x402a03)continue;key=VisuMZ[_0x5d0ea9(0x5c8)][_0x5d0ea9(0xb0b)](_0x402a03,_0x5d0ea9(0x610)),VisuMZ[_0x5d0ea9(0x5c8)]['JS'][key]&&(_0x4ea016=VisuMZ['BattleCore']['JS'][key]['call'](this,this[_0x5d0ea9(0x34c)](),_0x49f232,this[_0x5d0ea9(0xc47)](),_0x4ea016));}return this[_0x5d0ea9(0x16f)](_0x49f232),_0x4ea016;},Game_Action[_0x320868(0x5bb)]['itemCri']=function(_0x263b24){const _0x268eca=_0x320868;if(!this[_0x268eca(0xc47)]()['damage'][_0x268eca(0xa39)])return 0x0;let _0x5017ec=VisuMZ[_0x268eca(0x5c8)][_0x268eca(0x1d7)][_0x268eca(0x31c)][_0x268eca(0x4ca)][_0x268eca(0x5a6)](this,_0x263b24);return _0x5017ec=this[_0x268eca(0x9c2)]['criticalHitRate']*_0x5017ec+this[_0x268eca(0x9c2)][_0x268eca(0x879)],$gameParty[_0x268eca(0x3f3)]()&&(_0x5017ec=this[_0x268eca(0x1f4)](_0x5017ec,_0x263b24)),_0x5017ec;},Game_Action[_0x320868(0x5bb)][_0x320868(0x1f4)]=function(_0x2fb5e3,_0x22a262){const _0x3105e5=_0x320868;this['declareGlobalVariables'](_0x22a262),window['rate']=_0x2fb5e3;{const _0x429ff7=this['subject']()[_0x3105e5(0x22d)]();for(const _0x353130 of _0x429ff7){if(!_0x353130)continue;if(_0x353130[_0x3105e5(0x418)][_0x3105e5(0x2e0)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x5f12f6=String(RegExp['$1']);try{eval(_0x5f12f6);}catch(_0x5227c9){if($gameTemp[_0x3105e5(0x219)]())console[_0x3105e5(0x718)](_0x5227c9);}}}}{const _0x59e570=_0x22a262[_0x3105e5(0x22d)]();for(const _0x5d78c1 of _0x59e570){if(!_0x5d78c1)continue;if(_0x5d78c1[_0x3105e5(0x418)][_0x3105e5(0x2e0)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x2f7808=String(RegExp['$1']);try{eval(_0x2f7808);}catch(_0x45ef48){if($gameTemp[_0x3105e5(0x219)]())console[_0x3105e5(0x718)](_0x45ef48);}}}}return _0x2fb5e3=window[_0x3105e5(0x24e)],this['clearGlobalVariables'](_0x22a262),_0x2fb5e3;},Game_Action[_0x320868(0x5bb)][_0x320868(0x1f4)]=function(_0x3493f0,_0x39e20b){const _0x50e9ae=_0x320868;this['declareGlobalVariables'](_0x39e20b);for(const _0x30f0c6 of this[_0x50e9ae(0x34c)]()['traitObjects']()){if(!_0x30f0c6)continue;key=VisuMZ['BattleCore']['createKeyJS'](_0x30f0c6,'jsCritRateAsUser'),VisuMZ[_0x50e9ae(0x5c8)]['JS'][key]&&(_0x3493f0=VisuMZ[_0x50e9ae(0x5c8)]['JS'][key][_0x50e9ae(0x5a6)](this,this[_0x50e9ae(0x34c)](),_0x39e20b,this['item'](),_0x3493f0));}for(const _0x105fb3 of _0x39e20b[_0x50e9ae(0x22d)]()){if(!_0x105fb3)continue;key=VisuMZ[_0x50e9ae(0x5c8)][_0x50e9ae(0xb0b)](_0x105fb3,_0x50e9ae(0x4ac)),VisuMZ[_0x50e9ae(0x5c8)]['JS'][key]&&(_0x3493f0=VisuMZ[_0x50e9ae(0x5c8)]['JS'][key]['call'](this,this[_0x50e9ae(0x34c)](),_0x39e20b,this[_0x50e9ae(0xc47)](),_0x3493f0));}return this[_0x50e9ae(0x16f)](_0x39e20b),_0x3493f0;},Game_Action['prototype'][_0x320868(0x241)]=function(_0x59c3a3){const _0x2fcfca=_0x320868;return _0x59c3a3=VisuMZ[_0x2fcfca(0x5c8)][_0x2fcfca(0x1d7)][_0x2fcfca(0x31c)][_0x2fcfca(0xa1f)][_0x2fcfca(0x5a6)](this,_0x59c3a3),_0x59c3a3=this[_0x2fcfca(0x9c2)][_0x2fcfca(0x70b)]*_0x59c3a3+this['_multipliers']['criticalDmgFlat'],_0x59c3a3;},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc6a)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x50c)],Game_Action[_0x320868(0x5bb)][_0x320868(0x50c)]=function(_0xdb7b9f){const _0xf91c6b=_0x320868;if(this[_0xf91c6b(0x353)]!==_0xf91c6b(0x86a))return this[_0xf91c6b(0xaa6)](_0xdb7b9f);else return DataManager[_0xf91c6b(0xa5c)](this[_0xf91c6b(0xc47)]())===_0xf91c6b(0x3d8)?VisuMZ[_0xf91c6b(0x5c8)][_0xf91c6b(0xc6a)][_0xf91c6b(0x5a6)](this,_0xdb7b9f):this[_0xf91c6b(0x8dd)](_0xdb7b9f);},Game_Action[_0x320868(0x5bb)][_0x320868(0x3a0)]=function(_0x256459){const _0x20d379=_0x320868;this[_0x20d379(0x353)]=_0x256459;},Game_Action[_0x320868(0x5bb)][_0x320868(0xaa6)]=function(_0x1e2f04){const _0x3e49b7=_0x320868,_0x82710d=this['item'](),_0x2ca9a8=_0x82710d['damage']['formula'];_0x82710d['damage'][_0x3e49b7(0xa94)]=this[_0x3e49b7(0x353)];let _0x22582d=VisuMZ[_0x3e49b7(0x5c8)][_0x3e49b7(0xc6a)]['call'](this,_0x1e2f04);return _0x82710d[_0x3e49b7(0x80d)][_0x3e49b7(0xa94)]=_0x2ca9a8,_0x22582d;},Game_Action['prototype']['damageStyle']=function(){const _0x55fd2c=_0x320868;if(this[_0x55fd2c(0xc47)]()[_0x55fd2c(0x418)][_0x55fd2c(0x2e0)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x3a6048=String(RegExp['$1'])[_0x55fd2c(0x2c8)]()[_0x55fd2c(0x761)]();return _0x3a6048;}return _0x55fd2c(0x3d8);},Game_Action[_0x320868(0x5bb)]['evalDamageFormulaBattleCore']=function(_0x43817f){const _0x244bf3=_0x320868,_0x531767=DataManager['getDamageStyle'](this[_0x244bf3(0xc47)]()),_0x160f69=VisuMZ['DamageStyles'][_0x531767];try{return _0x160f69[_0x244bf3(0xc37)]['call'](this,_0x43817f);}catch(_0x13535d){if($gameTemp[_0x244bf3(0x219)]())console[_0x244bf3(0x718)](_0x13535d);return VisuMZ[_0x244bf3(0x5c8)][_0x244bf3(0xc6a)][_0x244bf3(0x5a6)](this);}},Game_Action[_0x320868(0x5bb)][_0x320868(0x84f)]=function(_0x5b8c50,_0x4c8817){const _0x4af770=_0x320868;if(this[_0x4af770(0x53a)]())return _0x4c8817;const _0x3eeb5c=this[_0x4af770(0x34c)](),_0x43b6a9=_0x5b8c50;let _0xc51a80=[],_0x3a4486=[];_0xc51a80['push'](this[_0x4af770(0x754)]['arPenFlat'],this['_armorPenetration'][_0x4af770(0x749)]),_0x3a4486[_0x4af770(0x205)](this[_0x4af770(0x754)][_0x4af770(0x370)],this['_armorPenetration'][_0x4af770(0x616)]);const _0x3a9c20=this[_0x4af770(0xa0a)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x2fd783=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0xe36083=this[_0x4af770(0xa0a)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1accba=this[_0x4af770(0xa0a)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0xc51a80=_0xc51a80[_0x4af770(0x1c0)](_0x43b6a9[_0x4af770(0x22d)]()[_0x4af770(0x200)](_0xd73426=>_0xd73426&&_0xd73426[_0x4af770(0x418)][_0x4af770(0x2e0)](_0x3a9c20)?Number(RegExp['$1']):0x0)),_0x3a4486=_0x3a4486[_0x4af770(0x1c0)](_0x43b6a9['traitObjects']()['map'](_0x731a49=>_0x731a49&&_0x731a49['note']['match'](_0x2fd783)?Number(RegExp['$1'])/0x64:0x0)),_0xc51a80=_0xc51a80[_0x4af770(0x1c0)](_0x3eeb5c['traitObjects']()[_0x4af770(0x200)](_0x1ef5e6=>_0x1ef5e6&&_0x1ef5e6[_0x4af770(0x418)][_0x4af770(0x2e0)](_0xe36083)?Number(RegExp['$1']):0x0)),_0x3a4486=_0x3a4486[_0x4af770(0x1c0)](_0x3eeb5c[_0x4af770(0x22d)]()[_0x4af770(0x200)](_0x5a8c66=>_0x5a8c66&&_0x5a8c66[_0x4af770(0x418)][_0x4af770(0x2e0)](_0x1accba)?Number(RegExp['$1'])/0x64:0x0)),this[_0x4af770(0xc47)]()[_0x4af770(0x418)][_0x4af770(0x2e0)](_0xe36083)&&_0xc51a80[_0x4af770(0x205)](Number(RegExp['$1'])),this[_0x4af770(0xc47)]()[_0x4af770(0x418)]['match'](_0x1accba)&&_0x3a4486[_0x4af770(0x205)](Number(RegExp['$1'])),_0x4c8817=_0xc51a80[_0x4af770(0x2fe)]((_0x5b48b3,_0x24790d)=>_0x5b48b3-_0x24790d,_0x4c8817),_0x4c8817>0x0&&(_0x4c8817=_0x3a4486[_0x4af770(0x2fe)]((_0x231ea8,_0x459f19)=>_0x231ea8*(0x1-_0x459f19),_0x4c8817)),_0x4c8817;},VisuMZ['BattleCore'][_0x320868(0xb12)]=Game_Action['prototype'][_0x320868(0x708)],Game_Action[_0x320868(0x5bb)][_0x320868(0x708)]=function(_0x26df48,_0x561c7a){const _0x43b639=_0x320868;_0x561c7a=_0x561c7a*this[_0x43b639(0x9c2)][_0x43b639(0x757)],_0x561c7a+=this[_0x43b639(0x9c2)][_0x43b639(0x466)]*(_0x561c7a>=0x0?0x1:-0x1),_0x561c7a=this['applyBattleCoreJS']('PreDamage%1JS',_0x26df48,_0x561c7a,![]),_0x561c7a=this[_0x43b639(0xb38)](_0x561c7a),_0x561c7a>0x0?_0x561c7a=Math[_0x43b639(0x5e5)](_0x561c7a):_0x561c7a=Math[_0x43b639(0x5a8)](_0x561c7a),this['_executedValue']=_0x561c7a,this[_0x43b639(0x56b)]=this['_totalValue']||0x0,this['_totalValue']+=_0x561c7a,VisuMZ['BattleCore'][_0x43b639(0xb12)][_0x43b639(0x5a6)](this,_0x26df48,_0x561c7a),this['applyBattleCoreJS'](_0x43b639(0x6ac),_0x26df48,_0x561c7a,!![]);},Game_Action[_0x320868(0x5bb)][_0x320868(0xb38)]=function(_0x26b918){const _0x2daee3=_0x320868;if(this['isBypassDamageCap']())return _0x26b918;return _0x26b918=this[_0x2daee3(0xa19)](_0x26b918),_0x26b918=this[_0x2daee3(0x3ec)](_0x26b918),_0x26b918;},Game_Action['prototype']['isBypassDamageCap']=function(){const _0x22c1ce=_0x320868,_0x584023=/<BYPASS DAMAGE CAP>/i;if(this[_0x22c1ce(0xc47)]()[_0x22c1ce(0x418)]['match'](_0x584023))return!![];if(this[_0x22c1ce(0x34c)]()[_0x22c1ce(0x22d)]()['some'](_0x18da3a=>_0x18da3a&&_0x18da3a[_0x22c1ce(0x418)][_0x22c1ce(0x2e0)](_0x584023)))return!![];return!VisuMZ[_0x22c1ce(0x5c8)]['Settings'][_0x22c1ce(0x31c)][_0x22c1ce(0x32a)];},Game_Action[_0x320868(0x5bb)][_0x320868(0xa19)]=function(_0x58e78d){const _0xab2ce3=_0x320868;if(!VisuMZ[_0xab2ce3(0x5c8)][_0xab2ce3(0x1d7)][_0xab2ce3(0x31c)][_0xab2ce3(0x311)])return _0x58e78d;const _0x1c9ca=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0xab2ce3(0xc47)]()[_0xab2ce3(0x418)][_0xab2ce3(0x2e0)](_0x1c9ca))return _0x58e78d;if(this['subject']()[_0xab2ce3(0x22d)]()['some'](_0x488cab=>_0x488cab&&_0x488cab['note']['match'](_0x1c9ca)))return _0x58e78d;const _0xdbae34=_0x58e78d<0x0?-0x1:0x1;_0x58e78d=Math[_0xab2ce3(0x57e)](_0x58e78d);let _0x5e9306=this['subject']()['softDamageCapRate']();this[_0xab2ce3(0xc47)]()[_0xab2ce3(0x418)][_0xab2ce3(0x2e0)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x5e9306+=Number(RegExp['$1'])/0x64);_0x5e9306=_0x5e9306[_0xab2ce3(0x4a9)](0.01,0x1);const _0x2b702a=this['getHardDamageCap'](),_0x3171f5=_0x5e9306*_0x2b702a;if(_0x58e78d>_0x3171f5&&_0x2b702a>_0x3171f5){_0x58e78d-=_0x3171f5;const _0x1d3027=VisuMZ[_0xab2ce3(0x5c8)][_0xab2ce3(0x1d7)][_0xab2ce3(0x31c)][_0xab2ce3(0x234)],_0x365f06=Math['max'](0x1-_0x58e78d/((_0x2b702a-_0x3171f5)*_0x1d3027+_0x58e78d),0.01);_0x58e78d*=_0x365f06,_0x58e78d+=_0x3171f5;}return _0x58e78d*_0xdbae34;},Game_Action['prototype'][_0x320868(0x92c)]=function(){const _0x5ea470=_0x320868;return this[_0x5ea470(0xc47)]()[_0x5ea470(0x418)][_0x5ea470(0x2e0)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x5ea470(0x34c)]()[_0x5ea470(0x656)]();},Game_Action[_0x320868(0x5bb)][_0x320868(0x3ec)]=function(_0xc395aa){const _0x33a2a6=_0x320868;let _0x2bc0a4=this[_0x33a2a6(0x92c)]();return _0xc395aa[_0x33a2a6(0x4a9)](-_0x2bc0a4,_0x2bc0a4);},Game_Action[_0x320868(0x5bb)][_0x320868(0x43d)]=function(){const _0x214658=_0x320868;if(!this['item']())return![];if(!$gameParty[_0x214658(0x3f3)]())return![];return(this[_0x214658(0xc47)]()[_0x214658(0x418)]||'')[_0x214658(0x2e0)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x320868(0x5bb)][_0x320868(0x3f4)]=function(_0x285f10){const _0x304e75=_0x320868;if(this[_0x304e75(0x43d)]()){let _0x3874d7=BattleManager[_0x304e75(0x7ac)];_0x285f10/=_0x3874d7[_0x304e75(0x4c1)],this[_0x304e75(0x2d9)]()&&(_0x285f10*=this[_0x304e75(0x34c)]()[_0x304e75(0x601)]()+0x1),_0x285f10=_0x285f10>0x0?Math[_0x304e75(0x5e5)](_0x285f10):Math[_0x304e75(0x5a8)](_0x285f10);}return _0x285f10;},VisuMZ[_0x320868(0x5c8)]['Game_Action_makeDamageValueDisperse']=Game_Action[_0x320868(0x5bb)]['makeDamageValue'],Game_Action[_0x320868(0x5bb)][_0x320868(0x66d)]=function(_0x16e7fe,_0x592ffe){const _0x557613=_0x320868;let _0x4de773=VisuMZ[_0x557613(0x5c8)][_0x557613(0x481)][_0x557613(0x5a6)](this,_0x16e7fe,_0x592ffe);return this[_0x557613(0x3f4)](_0x4de773);},Game_Action[_0x320868(0x5bb)][_0x320868(0xa0b)]=function(_0x3b168e,_0x3d84d0){const _0x32c587=_0x320868;let _0x365b33=(_0x3b168e[_0x32c587(0x36d)]*_0x3d84d0['value1']+_0x3d84d0[_0x32c587(0x887)])*_0x3b168e['rec'];_0x365b33=this[_0x32c587(0x3f4)](_0x365b33),this[_0x32c587(0x1fe)]()&&(_0x365b33*=this[_0x32c587(0x34c)]()['pha']),_0x365b33=Math['floor'](_0x365b33),_0x365b33!==0x0&&(_0x3b168e[_0x32c587(0xa64)](_0x365b33),this[_0x32c587(0xc4e)](_0x3b168e));},Game_Action[_0x320868(0x5bb)][_0x320868(0x215)]=function(_0x2818b1,_0x27aa1c){const _0x17c34c=_0x320868;let _0x46c4c6=(_0x2818b1['mmp']*_0x27aa1c[_0x17c34c(0xbf7)]+_0x27aa1c[_0x17c34c(0x887)])*_0x2818b1[_0x17c34c(0x2e7)];_0x46c4c6=this['disperseDamage'](_0x46c4c6),this[_0x17c34c(0x1fe)]()&&(_0x46c4c6*=this['subject']()['pha']),_0x46c4c6=Math['floor'](_0x46c4c6),_0x46c4c6!==0x0&&(_0x2818b1['gainMp'](_0x46c4c6),this[_0x17c34c(0xc4e)](_0x2818b1));},Game_Action['prototype']['itemEffectGainTp']=function(_0x472e1f,_0x55834b){const _0x5e1e77=_0x320868;let _0x449f92=Math[_0x5e1e77(0x5a8)](_0x55834b['value1']);_0x449f92=this[_0x5e1e77(0x3f4)](_0x449f92),_0x449f92!==0x0&&(_0x472e1f[_0x5e1e77(0x910)](_0x449f92),this[_0x5e1e77(0xc4e)](_0x472e1f));},VisuMZ[_0x320868(0x5c8)][_0x320868(0x401)]=Game_Action['prototype'][_0x320868(0x734)],Game_Action[_0x320868(0x5bb)][_0x320868(0x734)]=function(_0x40920e){const _0x45cd6e=_0x320868;if(_0x40920e&&_0x40920e[_0x45cd6e(0xb8b)]())_0x40920e[_0x45cd6e(0x44c)]();this[_0x45cd6e(0xc05)](_0x45cd6e(0xc31),_0x40920e,0x0,!![]),VisuMZ['BattleCore'][_0x45cd6e(0x401)]['call'](this,_0x40920e),this[_0x45cd6e(0xc05)](_0x45cd6e(0x1f1),_0x40920e,this[_0x45cd6e(0x598)]||0x0,!![]),this[_0x45cd6e(0x80e)](_0x40920e);},Game_Action[_0x320868(0x5bb)][_0x320868(0xc05)]=function(_0x57adbd,_0x4a2b22,_0x56628a,_0xb0db29){const _0x1b175b=_0x320868;if(this['_tempBattler']||this['_tempActor'])return;_0x56628a=_0x56628a||0x0;const _0x34d33e=_0x56628a,_0x49935d=VisuMZ[_0x1b175b(0x5c8)][_0x1b175b(0x1d7)][_0x1b175b(0x96c)],_0x1df6fe=_0x57adbd[_0x1b175b(0x8b0)]('');if(_0x49935d[_0x1df6fe]){_0x56628a=_0x49935d[_0x1df6fe][_0x1b175b(0x5a6)](this,_0x56628a,_0x4a2b22);if(_0xb0db29)_0x56628a=_0x34d33e;}let _0xbcf1eb=VisuMZ[_0x1b175b(0x5c8)][_0x1b175b(0xb0b)](this[_0x1b175b(0xc47)](),_0x57adbd[_0x1b175b(0x8b0)](''));if(VisuMZ[_0x1b175b(0x5c8)]['JS'][_0xbcf1eb]){_0x56628a=VisuMZ[_0x1b175b(0x5c8)]['JS'][_0xbcf1eb][_0x1b175b(0x5a6)](this,this[_0x1b175b(0x34c)](),_0x4a2b22,this[_0x1b175b(0xc47)](),_0x56628a);if(_0xb0db29)_0x56628a=_0x34d33e;}for(const _0x37d306 of this[_0x1b175b(0x34c)]()['traitObjects']()){if(!_0x37d306)continue;_0xbcf1eb=VisuMZ[_0x1b175b(0x5c8)][_0x1b175b(0xb0b)](_0x37d306,_0x57adbd[_0x1b175b(0x8b0)](_0x1b175b(0x4b2)));if(VisuMZ['BattleCore']['JS'][_0xbcf1eb]){_0x56628a=VisuMZ[_0x1b175b(0x5c8)]['JS'][_0xbcf1eb]['call'](this,this[_0x1b175b(0x34c)](),_0x4a2b22,_0x37d306,_0x56628a);if(_0xb0db29)_0x56628a=_0x34d33e;}}for(const _0x25392d of _0x4a2b22['traitObjects']()){if(!_0x25392d)continue;_0xbcf1eb=VisuMZ['BattleCore'][_0x1b175b(0xb0b)](_0x25392d,_0x57adbd[_0x1b175b(0x8b0)](_0x1b175b(0x776)));if(VisuMZ['BattleCore']['JS'][_0xbcf1eb]){_0x56628a=VisuMZ[_0x1b175b(0x5c8)]['JS'][_0xbcf1eb][_0x1b175b(0x5a6)](this,this[_0x1b175b(0x34c)](),_0x4a2b22,_0x25392d,_0x56628a);if(_0xb0db29)_0x56628a=_0x34d33e;}}return _0x56628a;},Game_Action['prototype']['actionBattleCoreJS']=function(_0x5ec88d){const _0x378995=_0x320868,_0x4f0cb5=this[_0x378995(0x56b)]||0x0,_0x551941=VisuMZ[_0x378995(0x5c8)][_0x378995(0x1d7)][_0x378995(0x96c)],_0x5c17b3=_0x5ec88d['format']('');_0x551941[_0x5c17b3]&&_0x551941[_0x5c17b3][_0x378995(0x5a6)](this,_0x4f0cb5);let _0x17e584=VisuMZ[_0x378995(0x5c8)][_0x378995(0xb0b)](this[_0x378995(0xc47)](),_0x5ec88d);VisuMZ[_0x378995(0x5c8)]['JS'][_0x17e584]&&VisuMZ[_0x378995(0x5c8)]['JS'][_0x17e584][_0x378995(0x5a6)](this,this[_0x378995(0x34c)](),this['subject'](),this[_0x378995(0xc47)](),_0x4f0cb5);for(const _0x4be28b of this[_0x378995(0x34c)]()[_0x378995(0x22d)]()){if(!_0x4be28b)continue;_0x17e584=VisuMZ['BattleCore'][_0x378995(0xb0b)](_0x4be28b,_0x5ec88d),VisuMZ['BattleCore']['JS'][_0x17e584]&&VisuMZ[_0x378995(0x5c8)]['JS'][_0x17e584][_0x378995(0x5a6)](this,this[_0x378995(0x34c)](),this['subject'](),_0x4be28b,_0x4f0cb5);}},Game_Action[_0x320868(0x5bb)][_0x320868(0xb20)]=function(){const _0x4f1126=_0x320868;return VisuMZ[_0x4f1126(0x5c8)][_0x4f1126(0x1d7)][_0x4f1126(0x96c)][_0x4f1126(0x26c)][_0x4f1126(0x5a6)](this);},Game_Action[_0x320868(0x5bb)][_0x320868(0x2db)]=function(){const _0x3509a7=_0x320868;return VisuMZ['BattleCore'][_0x3509a7(0x1d7)]['Mechanics'][_0x3509a7(0x97b)];},Game_Action[_0x320868(0x5bb)]['isCustomBattleScope']=function(){const _0x2f3675=_0x320868;if(this[_0x2f3675(0xb1e)]===_0x2f3675(0x587))return![];if(this[_0x2f3675(0xb1e)]==='all\x20enemies')return![];if(!this[_0x2f3675(0xc47)]())return![];return this[_0x2f3675(0xc47)]()[_0x2f3675(0x418)][_0x2f3675(0x2e0)](/<JS TARGETS>/i);},Game_Action[_0x320868(0x5bb)][_0x320868(0x5b3)]=function(){const _0x54fdfc=_0x320868;if(this[_0x54fdfc(0xb1e)]===_0x54fdfc(0x587))return![];if(this[_0x54fdfc(0xb1e)]===_0x54fdfc(0xa65))return![];if(!this[_0x54fdfc(0x951)]&&this[_0x54fdfc(0x34c)]()[_0x54fdfc(0x5c7)]())return![];if(this[_0x54fdfc(0xbe9)]())return!![];if(!this['item']())return![];return typeof this[_0x54fdfc(0xc47)]()[_0x54fdfc(0x3d9)]==='string';},VisuMZ[_0x320868(0x5c8)][_0x320868(0x6d6)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x61b)],Game_Action[_0x320868(0x5bb)][_0x320868(0x61b)]=function(){const _0x2ffcf0=_0x320868;if(this[_0x2ffcf0(0xb1e)]===_0x2ffcf0(0x587))return![];if(this['_targetBattlerKey']==='all\x20enemies')return!![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x2ffcf0(0x1f0)]():VisuMZ[_0x2ffcf0(0x5c8)][_0x2ffcf0(0x6d6)][_0x2ffcf0(0x5a6)](this);},Game_Action[_0x320868(0x5bb)]['isForOpponentBattleCore']=function(){const _0x105f46=_0x320868,_0x2094ee=String(this['item']()['scope']);if(_0x2094ee[_0x105f46(0x2e0)](/ANY/i))return!![];return _0x2094ee['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x320868(0x5c8)]['Game_Action_isForFriend']=Game_Action[_0x320868(0x5bb)][_0x320868(0xa5d)],Game_Action[_0x320868(0x5bb)]['isForFriend']=function(){const _0x49222c=_0x320868;if(this[_0x49222c(0xb1e)]==='all\x20actors')return!![];if(this[_0x49222c(0xb1e)]===_0x49222c(0xa65))return![];return this['isBattleCoreTargetScope']()&&!this[_0x49222c(0xbe9)]()?this[_0x49222c(0xba9)]():VisuMZ[_0x49222c(0x5c8)][_0x49222c(0x41b)][_0x49222c(0x5a6)](this);},Game_Action[_0x320868(0x5bb)][_0x320868(0xba9)]=function(){const _0x39b62b=_0x320868,_0x23bb05=String(this[_0x39b62b(0xc47)]()['scope']);return _0x23bb05[_0x39b62b(0x2e0)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype'][_0x320868(0x629)]=function(){const _0x5323de=_0x320868;if(this['isBattleCoreTargetScope']()&&!this[_0x5323de(0xbe9)]()){const _0x37f428=String(this['item']()[_0x5323de(0x3d9)]);return _0x37f428[_0x5323de(0x2e0)](/(?:ENEMY|FOE)/i)&&_0x37f428[_0x5323de(0x2e0)](/OR/i)&&_0x37f428[_0x5323de(0x2e0)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x320868(0x5bb)][_0x320868(0x9d0)]=function(){const _0x5c9df1=_0x320868;if(this[_0x5c9df1(0x629)]()){const _0x2253e4=String(this[_0x5c9df1(0xc47)]()[_0x5c9df1(0x3d9)]);if(_0x2253e4['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x320868(0x5bb)][_0x320868(0x683)]=function(){const _0x5d3d61=_0x320868;if(this[_0x5d3d61(0x629)]()){const _0x1a29cd=String(this[_0x5d3d61(0xc47)]()['scope']);if(_0x1a29cd[_0x5d3d61(0x2e0)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x810)]=Game_Action[_0x320868(0x5bb)]['isForAliveFriend'],Game_Action[_0x320868(0x5bb)][_0x320868(0x391)]=function(){const _0x3f957e=_0x320868;if(this[_0x3f957e(0xb1e)]===_0x3f957e(0x587))return!![];return this[_0x3f957e(0x5b3)]()&&!this[_0x3f957e(0xbe9)]()?this[_0x3f957e(0x66b)]():VisuMZ['BattleCore'][_0x3f957e(0x810)][_0x3f957e(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x520)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x581)],Game_Action['prototype'][_0x320868(0x581)]=function(){const _0x2c37fd=_0x320868;if(this[_0x2c37fd(0xb1e)]===_0x2c37fd(0x587))return VisuMZ['BattleCore'][_0x2c37fd(0x520)][_0x2c37fd(0x5a6)](this);return VisuMZ[_0x2c37fd(0x5c8)][_0x2c37fd(0x520)][_0x2c37fd(0x5a6)](this);},Game_Action[_0x320868(0x5bb)][_0x320868(0x66b)]=function(){const _0x4d762d=_0x320868;if(this[_0x4d762d(0x629)]())return!![];return![];},Game_Action['prototype']['isForNotUser']=function(){const _0xfaffa0=_0x320868;return this['item']()&&this['item']()[_0xfaffa0(0x418)][_0xfaffa0(0x2e0)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore'][_0x320868(0xba3)]=Game_Action[_0x320868(0x5bb)][_0x320868(0xacf)],Game_Action[_0x320868(0x5bb)][_0x320868(0xacf)]=function(){const _0x2846a5=_0x320868;if(this[_0x2846a5(0xb1e)]===_0x2846a5(0x587))return![];if(this['_targetBattlerKey']===_0x2846a5(0xa65))return![];return this[_0x2846a5(0x5b3)]()&&!this[_0x2846a5(0xbe9)]()?this[_0x2846a5(0x8e4)]():VisuMZ[_0x2846a5(0x5c8)]['Game_Action_isForOne'][_0x2846a5(0x5a6)](this);},Game_Action[_0x320868(0x5bb)][_0x320868(0x8e4)]=function(){if(this['isForAnyone']())return!![];return![];},VisuMZ['BattleCore']['Game_Action_isForRandom']=Game_Action['prototype']['isForRandom'],Game_Action[_0x320868(0x5bb)][_0x320868(0x245)]=function(){const _0x3387c8=_0x320868;if(this[_0x3387c8(0xb1e)]===_0x3387c8(0x587))return![];if(this[_0x3387c8(0xb1e)]===_0x3387c8(0xa65))return![];return this[_0x3387c8(0x5b3)]()&&!this[_0x3387c8(0xbe9)]()?this[_0x3387c8(0xc3c)]():VisuMZ[_0x3387c8(0x5c8)][_0x3387c8(0x8d1)]['call'](this);},Game_Action[_0x320868(0x5bb)][_0x320868(0xc3c)]=function(){const _0x3f868a=_0x320868,_0x32683e=String(this[_0x3f868a(0xc47)]()[_0x3f868a(0x3d9)]);return _0x32683e[_0x3f868a(0x2e0)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xaf8)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x76d)],Game_Action[_0x320868(0x5bb)][_0x320868(0x76d)]=function(){const _0x5081b5=_0x320868;if(this['_targetBattlerKey']===_0x5081b5(0x587))return!![];if(this[_0x5081b5(0xb1e)]===_0x5081b5(0xa65))return!![];return VisuMZ[_0x5081b5(0x5c8)][_0x5081b5(0xaf8)][_0x5081b5(0x5a6)](this);},Game_Action[_0x320868(0x5bb)][_0x320868(0x260)]=function(){const _0x3fc01e=_0x320868;if(!this['item']())return![];if(this[_0x3fc01e(0x581)]())return![];return(this['item']()[_0x3fc01e(0x418)]||'')[_0x3fc01e(0x2e0)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x320868(0x16a)]=Game_Action['prototype'][_0x320868(0xbda)],Game_Action[_0x320868(0x5bb)][_0x320868(0xbda)]=function(_0xe5707a){const _0xaf4b5d=_0x320868;if(this[_0xaf4b5d(0x703)]()&&_0xe5707a===this[_0xaf4b5d(0x34c)]())return![];return VisuMZ[_0xaf4b5d(0x5c8)][_0xaf4b5d(0x16a)][_0xaf4b5d(0x5a6)](this,_0xe5707a);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x7ec)]=Game_Action[_0x320868(0x5bb)][_0x320868(0xc4d)],Game_Action[_0x320868(0x5bb)][_0x320868(0xc4d)]=function(){const _0x6094da=_0x320868,_0x177d96=VisuMZ['BattleCore']['Game_Action_itemTargetCandidates'][_0x6094da(0x5a6)](this);if(this[_0x6094da(0x703)]())_0x177d96[_0x6094da(0x236)](this[_0x6094da(0x34c)]());return _0x177d96;},VisuMZ[_0x320868(0x5c8)]['Game_Action_needsSelection']=Game_Action[_0x320868(0x5bb)][_0x320868(0x2f7)],Game_Action[_0x320868(0x5bb)][_0x320868(0x2f7)]=function(){const _0x15afed=_0x320868;return this[_0x15afed(0x5b3)]()&&!this[_0x15afed(0xbe9)]()?this[_0x15afed(0x62e)]():VisuMZ[_0x15afed(0x5c8)]['Game_Action_needsSelection'][_0x15afed(0x5a6)](this);},Game_Action['prototype'][_0x320868(0x62e)]=function(){const _0x527d5c=_0x320868,_0xcb7867=String(this['item']()[_0x527d5c(0x3d9)]);if(_0xcb7867[_0x527d5c(0x2e0)](/RANDOM/i))return![];if(_0xcb7867[_0x527d5c(0x2e0)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0xcb7867['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0xcb7867['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0xcb7867[_0x527d5c(0x2e0)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ['BattleCore'][_0x527d5c(0xbd8)]['call'](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xadb)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x6a1)],Game_Action[_0x320868(0x5bb)]['makeTargets']=function(){const _0x519bec=_0x320868;let _0x468d64=[];return this['isBattleCoreTargetScope']()?this['isCustomBattleScope']()?_0x468d64=this[_0x519bec(0x93b)]():_0x468d64=this['makeTargetsBattleCore']():_0x468d64=VisuMZ[_0x519bec(0x5c8)][_0x519bec(0xadb)]['call'](this),_0x468d64=this[_0x519bec(0xb0f)](_0x468d64),_0x468d64;},Game_Action[_0x320868(0x5bb)]['isSubjectValidForAnyoneSelect']=function(){const _0x425ff9=_0x320868;return this[_0x425ff9(0x34c)]()[_0x425ff9(0x94e)]()&&!this['subject']()[_0x425ff9(0x1e5)]();},Game_Action['prototype'][_0x320868(0x93b)]=function(){const _0x1bfbac=_0x320868,_0x398aff=VisuMZ[_0x1bfbac(0x5c8)][_0x1bfbac(0xb0b)](this['item'](),_0x1bfbac(0xa6d));if(VisuMZ[_0x1bfbac(0x5c8)]['JS'][_0x398aff]){targets=VisuMZ[_0x1bfbac(0x5c8)]['Game_Action_makeTargets'][_0x1bfbac(0x5a6)](this);const _0x3073a2=VisuMZ[_0x1bfbac(0x5c8)]['createKeyJS'](this[_0x1bfbac(0xc47)](),_0x1bfbac(0xa6d));return targets=VisuMZ[_0x1bfbac(0x5c8)]['JS'][_0x3073a2]['call'](this,this[_0x1bfbac(0x34c)](),targets),this[_0x1bfbac(0x158)](targets);}return this[_0x1bfbac(0x8d9)]();},Game_Action[_0x320868(0x5bb)][_0x320868(0x8d9)]=function(){const _0x44d8c7=_0x320868;let _0xe7a394=[];const _0x21382a=String(this[_0x44d8c7(0xc47)]()[_0x44d8c7(0x3d9)]);if(this['isForAnyoneFocusOpponents']())return this['isSubjectValidForAnyoneSelect']()?(_0xe7a394=this[_0x44d8c7(0x57a)](),this[_0x44d8c7(0x158)](_0xe7a394)):(this['_targetIndex']=-0x1,_0xe7a394[_0x44d8c7(0x205)](...this['targetsForOpponents']()),this[_0x44d8c7(0x158)](_0xe7a394));if(this[_0x44d8c7(0x9d0)]()){if(this[_0x44d8c7(0x4c6)]())return _0xe7a394=this[_0x44d8c7(0x57a)](),this['repeatTargets'](_0xe7a394);else{if(Imported[_0x44d8c7(0x201)]){if(VisuMZ[_0x44d8c7(0x6cb)][_0x44d8c7(0x43b)]<1.19){let _0x11669d='';_0x11669d+=_0x44d8c7(0xb34),_0x11669d+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x11669d+=_0x44d8c7(0xb24),alert(_0x11669d),SceneManager[_0x44d8c7(0x9d9)]();}}return this[_0x44d8c7(0x941)]=-0x1,_0xe7a394['push'](...this[_0x44d8c7(0xa2f)]()),this[_0x44d8c7(0x158)](_0xe7a394);}}if(_0x21382a['match'](/(\d+) RANDOM ANY/i)){let _0x449670=Number(RegExp['$1']);while(_0x449670--){const _0xe842e3=Math[_0x44d8c7(0x4cb)](0x2)===0x0?this[_0x44d8c7(0x7e4)]():this[_0x44d8c7(0xc67)]();_0xe7a394[_0x44d8c7(0x205)](_0xe842e3[_0x44d8c7(0xa85)]());}return this[_0x44d8c7(0x158)](_0xe7a394);}if(_0x21382a[_0x44d8c7(0x2e0)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x42d8e0=Number(RegExp['$1']);while(_0x42d8e0--){_0xe7a394['push'](this[_0x44d8c7(0x7e4)]()[_0x44d8c7(0xa85)]());}return this['repeatTargets'](_0xe7a394);}if(_0x21382a[_0x44d8c7(0x2e0)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x1fce25=Number(RegExp['$1']);while(_0x1fce25--){_0xe7a394['push'](this['friendsUnit']()['trueRandomTarget']());}return this[_0x44d8c7(0x158)](_0xe7a394);}if(_0x21382a['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0xe7a394[_0x44d8c7(0x205)](...this[_0x44d8c7(0xc67)]()['aliveMembers']()[_0x44d8c7(0x477)](_0x423244=>_0x423244!==this[_0x44d8c7(0x34c)]())),this[_0x44d8c7(0x158)](_0xe7a394);return VisuMZ['BattleCore'][_0x44d8c7(0xadb)][_0x44d8c7(0x5a6)](this);},Game_Action['prototype']['randomTargets']=function(_0xb26112){const _0x569105=_0x320868,_0x14dd61=[];for(let _0x377412=0x0;_0x377412<this[_0x569105(0xa73)]();_0x377412++){_0x14dd61[_0x569105(0x205)](_0xb26112[_0x569105(0xa85)]());}return _0x14dd61;},Game_Action['prototype'][_0x320868(0xb0f)]=function(_0x47f5ff){const _0x1574ac=_0x320868;if(!this[_0x1574ac(0xc47)]())return _0x47f5ff;const _0x2f7bba=this[_0x1574ac(0xc47)]()[_0x1574ac(0x418)];if(this[_0x1574ac(0x703)]()){this['isForAll']()&&_0x47f5ff['remove'](this[_0x1574ac(0x34c)]());if(_0x47f5ff['includes'](this[_0x1574ac(0x34c)]())){const _0x5823c9=this[_0x1574ac(0xc67)]()[_0x1574ac(0x83b)]()[_0x1574ac(0x236)](this[_0x1574ac(0x34c)]());if(_0x5823c9[_0x1574ac(0x4c1)]>0x0){_0x5823c9[_0x1574ac(0x811)]((_0x31e879,_0x4f5242)=>_0x31e879[_0x1574ac(0x231)]()-_0x4f5242[_0x1574ac(0x231)]());while(_0x47f5ff['includes'](this[_0x1574ac(0x34c)]())){const _0x4f2ee6=_0x47f5ff[_0x1574ac(0x77f)](this[_0x1574ac(0x34c)]());_0x47f5ff[_0x4f2ee6]=_0x5823c9[Math[_0x1574ac(0x4cb)](_0x5823c9[_0x1574ac(0x4c1)])];}}else _0x47f5ff[_0x1574ac(0x236)](this[_0x1574ac(0x34c)]());}}return _0x47f5ff;},VisuMZ['BattleCore'][_0x320868(0x3cd)]=Game_Action[_0x320868(0x5bb)][_0x320868(0xb2d)],Game_Action[_0x320868(0x5bb)][_0x320868(0xb2d)]=function(_0x58e9d3,_0x3e370c){const _0x23fe70=_0x320868;VisuMZ[_0x23fe70(0x5c8)][_0x23fe70(0x3cd)][_0x23fe70(0x5a6)](this,_0x58e9d3,_0x3e370c);if(!_0x58e9d3[_0x23fe70(0x8b2)]())return;for(const _0xdb4a03 of this[_0x23fe70(0x34c)]()['attackStates']()){if(_0xdb4a03===_0x58e9d3[_0x23fe70(0x220)]()){let _0x4adc6a=_0x3e370c[_0x23fe70(0xbf7)];_0x4adc6a*=_0x58e9d3[_0x23fe70(0x6ce)](_0xdb4a03),_0x4adc6a*=this['subject']()[_0x23fe70(0xbb2)](_0xdb4a03),_0x4adc6a*=this[_0x23fe70(0x857)](_0x58e9d3),Math[_0x23fe70(0xa3d)]()<_0x4adc6a&&(_0x58e9d3['_deathStateApplied']=!![],this[_0x23fe70(0xc4e)](_0x58e9d3));}}},VisuMZ[_0x320868(0x5c8)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x320868(0x5bb)][_0x320868(0x75d)],Game_Action['prototype']['itemEffectAddNormalState']=function(_0x244534,_0x8e0669){const _0x478d57=_0x320868;VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState'][_0x478d57(0x5a6)](this,_0x244534,_0x8e0669);if(!_0x244534[_0x478d57(0x8b2)]())return;if(_0x8e0669[_0x478d57(0xb1a)]!==_0x244534[_0x478d57(0x220)]())return;let _0x578028=_0x8e0669['value1'];!this[_0x478d57(0x53a)]()&&(_0x578028*=_0x244534['stateRate'](_0x8e0669[_0x478d57(0xb1a)]),_0x578028*=this[_0x478d57(0x857)](_0x244534)),Math[_0x478d57(0xa3d)]()<_0x578028&&(_0x244534[_0x478d57(0x7fe)]=!![],this[_0x478d57(0xc4e)](_0x244534));},VisuMZ['BattleCore'][_0x320868(0x5a5)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x4fb)],Game_Action[_0x320868(0x5bb)][_0x320868(0x4fb)]=function(){const _0x4b0fb8=_0x320868;VisuMZ[_0x4b0fb8(0x5c8)][_0x4b0fb8(0x5a5)]['call'](this),this[_0x4b0fb8(0x793)](),this[_0x4b0fb8(0x123)]();},Game_Action[_0x320868(0x5bb)][_0x320868(0x793)]=function(){const _0x6b475a=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x2e3936=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x51d55a=this[_0x6b475a(0xc47)]()[_0x6b475a(0x418)][_0x6b475a(0x2e0)](_0x2e3936);if(_0x51d55a)for(const _0x54c841 of _0x51d55a){if(!_0x54c841)continue;_0x54c841['match'](_0x2e3936);const _0x1142a9=String(RegExp['$1'])[_0x6b475a(0x867)](',')[_0x6b475a(0x200)](_0x41ad9b=>String(_0x41ad9b)[_0x6b475a(0x761)]()),_0x43ea42=_0x1142a9[_0x6b475a(0x200)](_0x50653a=>DataManager['getCommonEventIdWithName'](_0x50653a));for(const _0x1a896b of _0x43ea42){const _0x5af5d8=$dataCommonEvents[_0x1a896b];_0x5af5d8&&$gameTemp[_0x6b475a(0x278)](_0x1a896b);}}},DataManager[_0x320868(0x279)]=function(_0x78a2bc){const _0x267ef2=_0x320868;_0x78a2bc=_0x78a2bc[_0x267ef2(0x2c8)]()[_0x267ef2(0x761)](),this['_commonEventIDs']=this['_commonEventIDs']||{};if(this[_0x267ef2(0x4e8)][_0x78a2bc])return this[_0x267ef2(0x4e8)][_0x78a2bc];for(const _0x1e1832 of $dataCommonEvents){if(!_0x1e1832)continue;let _0x45c563=_0x1e1832[_0x267ef2(0x3e0)];_0x45c563=_0x45c563[_0x267ef2(0x550)](/\x1I\[(\d+)\]/gi,''),_0x45c563=_0x45c563[_0x267ef2(0x550)](/\\I\[(\d+)\]/gi,''),this[_0x267ef2(0x4e8)][_0x45c563['toUpperCase']()[_0x267ef2(0x761)]()]=_0x1e1832['id'];}return this[_0x267ef2(0x4e8)][_0x78a2bc]||0x0;},Game_Action[_0x320868(0x5bb)][_0x320868(0x123)]=function(){const _0x35c65f=_0x320868;if(!SceneManager[_0x35c65f(0x96d)]())return;const _0x27435c=VisuMZ['BattleCore'][_0x35c65f(0x1d7)][_0x35c65f(0x96c)];_0x27435c[_0x35c65f(0x263)]&&$gameSwitches[_0x35c65f(0x79a)](_0x27435c[_0x35c65f(0x263)],![]),_0x27435c[_0x35c65f(0xa88)]&&$gameSwitches[_0x35c65f(0x79a)](_0x27435c[_0x35c65f(0xa88)],![]),_0x27435c[_0x35c65f(0x6e9)]&&$gameVariables[_0x35c65f(0x79a)](_0x27435c[_0x35c65f(0x6e9)],0x0),_0x27435c[_0x35c65f(0x72d)]&&$gameVariables[_0x35c65f(0x79a)](_0x27435c['VariableHeal'],0x0);},Game_Action['prototype'][_0x320868(0x80e)]=function(_0x51fa17){const _0x16d478=_0x320868;if(!SceneManager[_0x16d478(0x96d)]())return;if(!_0x51fa17)return;const _0x123721=_0x51fa17[_0x16d478(0x7c7)](),_0x9f16f=VisuMZ[_0x16d478(0x5c8)][_0x16d478(0x1d7)]['Mechanics'];_0x9f16f[_0x16d478(0x263)]&&_0x123721[_0x16d478(0xa39)]&&$gameSwitches[_0x16d478(0x79a)](_0x9f16f[_0x16d478(0x263)],!![]);_0x9f16f[_0x16d478(0xa88)]&&(_0x123721[_0x16d478(0x566)]||_0x123721[_0x16d478(0x243)])&&$gameSwitches[_0x16d478(0x79a)](_0x9f16f[_0x16d478(0xa88)],!![]);if(_0x9f16f[_0x16d478(0x6e9)]){let _0x212092=$gameVariables[_0x16d478(0xb4e)](_0x9f16f[_0x16d478(0x6e9)]);_0x123721['hpDamage']>0x0&&(_0x212092+=Math[_0x16d478(0x57e)](_0x123721[_0x16d478(0x7de)])),$gameVariables[_0x16d478(0x79a)](_0x9f16f[_0x16d478(0x6e9)],_0x212092);}if(_0x9f16f[_0x16d478(0x72d)]){let _0x5ca388=$gameVariables[_0x16d478(0xb4e)](_0x9f16f[_0x16d478(0x72d)]);_0x123721[_0x16d478(0x7de)]<0x0&&(_0x5ca388+=Math['abs'](_0x123721[_0x16d478(0x7de)])),$gameVariables[_0x16d478(0x79a)](_0x9f16f['VariableHeal'],_0x5ca388);}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x59a)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ['BattleCore'][_0x320868(0x9e0)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x2ea)],Game_Action[_0x320868(0x5bb)]['executeHpDamage']=function(_0x32a537,_0x2d6383){const _0x25f8d1=_0x320868;VisuMZ[_0x25f8d1(0x5c8)][_0x25f8d1(0x9e0)][_0x25f8d1(0x5a6)](this,_0x32a537,_0x2d6383);!this[_0x25f8d1(0x8f4)]()&&_0x32a537&&_0x32a537['result']()[_0x25f8d1(0x7de)]>0x0&&this[_0x25f8d1(0x531)]('HP',_0x32a537,_0x32a537[_0x25f8d1(0x7c7)]()[_0x25f8d1(0x7de)]);if(_0x32a537){this[_0x25f8d1(0x429)]=this[_0x25f8d1(0x429)]||{};const _0x555381=_0x32a537[_0x25f8d1(0x15e)]();this[_0x25f8d1(0x429)][_0x555381]=_0x2d6383;}},Game_Action[_0x320868(0x5bb)][_0x320868(0x35c)]=function(_0x2cf629){const _0x30329b=_0x320868;this[_0x30329b(0x429)]=this[_0x30329b(0x429)]||{};const _0x3ceafb=_0x2cf629[_0x30329b(0x15e)]();return this[_0x30329b(0x429)][_0x3ceafb]||0x0;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x3e9)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x8ef)],Game_Action['prototype'][_0x320868(0x8ef)]=function(_0x4a28a7,_0x1df682){const _0x350cd6=_0x320868;VisuMZ[_0x350cd6(0x5c8)]['Game_Action_executeMpDamage'][_0x350cd6(0x5a6)](this,_0x4a28a7,_0x1df682),!this[_0x350cd6(0x8f4)]()&&_0x4a28a7&&_0x4a28a7[_0x350cd6(0x7c7)]()['mpDamage']>0x0&&this['performLifeSteal']('MP',_0x4a28a7,_0x4a28a7[_0x350cd6(0x7c7)]()['mpDamage']);},Game_Action[_0x320868(0x5bb)][_0x320868(0x531)]=function(_0x32cd9f,_0x2dec40,_0x357d91){const _0x58135b=_0x320868;_0x32cd9f=_0x32cd9f[_0x58135b(0x2c8)]()[_0x58135b(0x761)]();const _0x366f0a=this[_0x58135b(0x147)](_0x32cd9f,_0x2dec40);if(_0x366f0a<=0x0)return;const _0x585b12=Math['round'](_0x357d91*_0x366f0a);if(_0x585b12<=0x0)return;let _0x35d003=this[_0x58135b(0x34c)]();if(this[_0x58135b(0x659)])_0x35d003=this[_0x58135b(0x659)];const _0x475043=_0x2dec40[_0x58135b(0x579)](_0x32cd9f)?-0x1:0x1;if(_0x32cd9f==='HP')_0x35d003[_0x58135b(0xa64)](_0x475043*_0x585b12);if(_0x32cd9f==='MP')_0x35d003[_0x58135b(0x4f5)](_0x475043*_0x585b12);},Game_Action[_0x320868(0x5bb)][_0x320868(0x147)]=function(_0x12c448,_0x16d48d){const _0x3a5591=_0x320868;if(this[_0x3a5591(0x27a)](_0x12c448))return 0x0;if(this[_0x3a5591(0x34c)]()[_0x3a5591(0x369)](_0x12c448))return 0x0;if(_0x16d48d['isGuardLifeSteal'](_0x12c448))return 0x0;let _0x2ab14b=0x0;return _0x2ab14b+=this[_0x3a5591(0xc03)](_0x12c448),_0x2ab14b+=this['subject']()['lifeStealRate'](_0x12c448,this[_0x3a5591(0xc47)]()[_0x3a5591(0xa11)]),_0x2ab14b[_0x3a5591(0x4a9)](0x0,0x1);},Game_Action['prototype'][_0x320868(0x27a)]=function(_0x3b97e2){const _0x7b5580=_0x320868;_0x3b97e2=_0x3b97e2[_0x7b5580(0x2c8)]()[_0x7b5580(0x761)]();const _0x45e3a6=VisuMZ['BattleCore']['LifeStealRegExp'],_0x3f832d=this[_0x7b5580(0xc47)]()[_0x7b5580(0x418)]||'';if(_0x3f832d[_0x7b5580(0x2e0)](_0x45e3a6[_0x7b5580(0x736)]))return!![];if(_0x3b97e2==='HP'&&_0x3f832d[_0x7b5580(0x2e0)](_0x45e3a6[_0x7b5580(0x465)]))return!![];if(_0x3b97e2==='MP'&&_0x3f832d[_0x7b5580(0x2e0)](_0x45e3a6[_0x7b5580(0x8ea)]))return!![];return![];},Game_Action[_0x320868(0x5bb)][_0x320868(0xc03)]=function(_0x382fd6){const _0x27b996=_0x320868,_0x3c32a9=VisuMZ['BattleCore'][_0x27b996(0x59a)],_0x578b70=this['item']()[_0x27b996(0x418)]||'';_0x382fd6=_0x382fd6[_0x27b996(0x2c8)]()[_0x27b996(0x761)]();const _0xfa323c=_0x578b70[_0x27b996(0x2e0)](_0x3c32a9[_0x27b996(0x81e)]);if(_0xfa323c)for(const _0x44f2a0 of _0xfa323c){_0x44f2a0[_0x27b996(0x2e0)](_0x3c32a9[_0x27b996(0x81e)]);const _0x27da53=String(RegExp['$1'])[_0x27b996(0x2c8)]()[_0x27b996(0x761)](),_0x1faacf=Number(RegExp['$2'])*0.01;if(_0x27da53!==_0x382fd6)continue;return _0x1faacf;}return 0x0;},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x147)]=function(_0x4e9ffb,_0xbcaf31){const _0x3f2cbe=_0x320868,_0x4aa910=VisuMZ['BattleCore'][_0x3f2cbe(0x59a)];let _0x12a602=0x0;_0x4e9ffb=_0x4e9ffb['toUpperCase']()[_0x3f2cbe(0x761)]();for(const _0x46a17a of this[_0x3f2cbe(0x22d)]()){if(!_0x46a17a)continue;const _0x94c438=_0x46a17a['note']||'',_0x1a1961=_0x94c438[_0x3f2cbe(0x2e0)](_0x4aa910['lifeStealTrait']);if(_0x1a1961)for(const _0x489dcd of _0x1a1961){_0x489dcd[_0x3f2cbe(0x2e0)](_0x4aa910[_0x3f2cbe(0xb93)]);const _0x16089b=String(RegExp['$1'])['toUpperCase']()['trim'](),_0x29e335=String(RegExp['$2']),_0x54c95b=Number(RegExp['$3'])*0.01;if(_0x16089b!==_0x4e9ffb)continue;if(_0xbcaf31===Game_Action[_0x3f2cbe(0x72b)]&&_0x29e335[_0x3f2cbe(0x2e0)](/CERTAIN/i))_0x12a602+=_0x54c95b;else{if(_0xbcaf31===Game_Action[_0x3f2cbe(0x57b)]&&_0x29e335[_0x3f2cbe(0x2e0)](/PHYS/i))_0x12a602+=_0x54c95b;else _0xbcaf31===Game_Action[_0x3f2cbe(0x461)]&&_0x29e335['match'](/MAGIC/i)&&(_0x12a602+=_0x54c95b);}}}return _0x12a602;},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x369)]=function(_0x5292e5){const _0x3f6321=_0x320868;_0x5292e5=_0x5292e5['toUpperCase']()['trim']();const _0x3f4232=VisuMZ['BattleCore'][_0x3f6321(0x59a)];for(const _0x491b5b of this['traitObjects']()){if(!_0x491b5b)continue;const _0x178589=_0x491b5b[_0x3f6321(0x418)]||'';if(_0x178589[_0x3f6321(0x2e0)](_0x3f4232[_0x3f6321(0x18b)]))return!![];if(_0x5292e5==='HP'&&_0x178589[_0x3f6321(0x2e0)](_0x3f4232[_0x3f6321(0x6d9)]))return!![];if(_0x5292e5==='MP'&&_0x178589['match'](_0x3f4232[_0x3f6321(0x57c)]))return!![];}return![];},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x579)]=function(_0xe9b5dd){const _0x346f81=_0x320868;_0xe9b5dd=_0xe9b5dd[_0x346f81(0x2c8)]()['trim']();const _0xb4fbb5=VisuMZ[_0x346f81(0x5c8)][_0x346f81(0x59a)];for(const _0x3237ef of this[_0x346f81(0x22d)]()){if(!_0x3237ef)continue;const _0x54be1f=_0x3237ef[_0x346f81(0x418)]||'';if(_0x54be1f['match'](_0xb4fbb5[_0x346f81(0x507)]))return!![];if(_0xe9b5dd==='HP'&&_0x54be1f['match'](_0xb4fbb5[_0x346f81(0x7fb)]))return!![];if(_0xe9b5dd==='MP'&&_0x54be1f[_0x346f81(0x2e0)](_0xb4fbb5['negativeMpLifeSteal']))return!![];}return![];},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x745)]=function(_0x29e787){const _0xd2db0d=_0x320868;_0x29e787=_0x29e787['toUpperCase']()[_0xd2db0d(0x761)]();const _0x397b7d=VisuMZ[_0xd2db0d(0x5c8)][_0xd2db0d(0x59a)];for(const _0x469876 of this['traitObjects']()){if(!_0x469876)continue;const _0x5d8fcf=_0x469876[_0xd2db0d(0x418)]||'';if(_0x5d8fcf[_0xd2db0d(0x2e0)](_0x397b7d[_0xd2db0d(0x3a1)]))return!![];if(_0x29e787==='HP'&&_0x5d8fcf[_0xd2db0d(0x2e0)](_0x397b7d[_0xd2db0d(0x358)]))return!![];if(_0x29e787==='MP'&&_0x5d8fcf[_0xd2db0d(0x2e0)](_0x397b7d[_0xd2db0d(0x7f4)]))return!![];}return![];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x192)]=Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x92d)],Game_BattlerBase['prototype']['initMembers']=function(){const _0x539187=_0x320868;VisuMZ[_0x539187(0x5c8)][_0x539187(0x192)][_0x539187(0x5a6)](this),this[_0x539187(0x1de)]();},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x1de)]=function(){const _0xadf14a=_0x320868;this[_0xadf14a(0x716)]=![];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x331)]=Game_BattlerBase['prototype'][_0x320868(0xbc2)],Game_BattlerBase[_0x320868(0x5bb)]['refresh']=function(){const _0x25a936=_0x320868;this[_0x25a936(0x312)]={},VisuMZ[_0x25a936(0x5c8)][_0x25a936(0x331)][_0x25a936(0x5a6)](this);},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x138)]=function(_0x1ef524){const _0x20e548=_0x320868;return this['_cache']=this[_0x20e548(0x312)]||{},this[_0x20e548(0x312)][_0x1ef524]!==undefined;},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x656)]=function(){const _0x2ac896=_0x320868;if(this[_0x2ac896(0x312)][_0x2ac896(0x656)]!==undefined)return this[_0x2ac896(0x312)][_0x2ac896(0x656)];const _0x1ef7f4=/<DAMAGE CAP:[ ](\d+)>/i,_0x360ab2=this[_0x2ac896(0x22d)]()[_0x2ac896(0x200)](_0x5f06ac=>_0x5f06ac&&_0x5f06ac['note'][_0x2ac896(0x2e0)](_0x1ef7f4)?Number(RegExp['$1']):0x0);let _0x53b378=_0x360ab2[_0x2ac896(0x4c1)]>0x0?Math[_0x2ac896(0x382)](..._0x360ab2):0x0;if(_0x53b378<=0x0)_0x53b378=VisuMZ[_0x2ac896(0x5c8)][_0x2ac896(0x1d7)][_0x2ac896(0x31c)][_0x2ac896(0xaf6)];return this['_cache'][_0x2ac896(0x656)]=_0x53b378,this[_0x2ac896(0x312)]['hardDamageCap'];},Game_BattlerBase['prototype']['softDamageCapRate']=function(){const _0xe8aeee=_0x320868;if(this[_0xe8aeee(0x312)][_0xe8aeee(0x646)]!==undefined)return this[_0xe8aeee(0x312)]['softDamageCap'];let _0x1cc116=VisuMZ['BattleCore'][_0xe8aeee(0x1d7)][_0xe8aeee(0x31c)]['DefaultSoftCap'];const _0x56a88f=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x42289d=this['traitObjects']()[_0xe8aeee(0x200)](_0x4a5b78=>_0x4a5b78&&_0x4a5b78[_0xe8aeee(0x418)]['match'](_0x56a88f)?Number(RegExp['$1'])/0x64:0x0);return _0x1cc116=_0x42289d[_0xe8aeee(0x2fe)]((_0x11b9a3,_0x604d16)=>_0x11b9a3+_0x604d16,_0x1cc116),this[_0xe8aeee(0x312)][_0xe8aeee(0x646)]=_0x1cc116,this[_0xe8aeee(0x312)][_0xe8aeee(0x646)][_0xe8aeee(0x4a9)](0.01,0x1);},VisuMZ[_0x320868(0x5c8)]['Game_BattlerBase_die']=Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0xc65)],Game_BattlerBase['prototype'][_0x320868(0xc65)]=function(){const _0x13b5ca=_0x320868;VisuMZ[_0x13b5ca(0x5c8)]['Game_BattlerBase_die'][_0x13b5ca(0x5a6)](this),SceneManager[_0x13b5ca(0x96d)]()&&(this[_0x13b5ca(0x235)]('dead'),this[_0x13b5ca(0x8bd)]=undefined);},Game_BattlerBase[_0x320868(0x5bb)]['battler']=function(){const _0x364dc5=_0x320868;if(!SceneManager[_0x364dc5(0x96d)]())return null;if(!SceneManager[_0x364dc5(0x64a)]['_spriteset'])return null;return SceneManager[_0x364dc5(0x64a)][_0x364dc5(0xa26)][_0x364dc5(0x4a6)](this);},Game_BattlerBase['prototype'][_0x320868(0x2bc)]=function(){const _0x23a891=_0x320868;return VisuMZ[_0x23a891(0x5c8)][_0x23a891(0x1d7)][_0x23a891(0x818)]['AnchorX'];},Game_BattlerBase['prototype'][_0x320868(0x881)]=function(){const _0x1e7bc1=_0x320868;return VisuMZ['BattleCore'][_0x1e7bc1(0x1d7)][_0x1e7bc1(0x818)][_0x1e7bc1(0xaa8)];},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x930)]=function(){const _0x5bd36d=_0x320868;return this[_0x5bd36d(0x94e)]&&this[_0x5bd36d(0x94e)]()?VisuMZ[_0x5bd36d(0x5c8)][_0x5bd36d(0x1d7)][_0x5bd36d(0x818)]['Shadow']:VisuMZ[_0x5bd36d(0x5c8)][_0x5bd36d(0x1d7)][_0x5bd36d(0x14d)][_0x5bd36d(0x42f)];},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0xa4c)]=function(){return!![];},Game_BattlerBase[_0x320868(0x5bb)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x320868(0x5bb)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x323)]=function(_0x1298b9){const _0x41d9f7=_0x320868;if(!_0x1298b9)return 0x0;let _0x4002aa=0x0;const _0x3e1842=_0x1298b9['note'];return _0x3e1842['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4002aa+=Number(RegExp['$1'])),_0x3e1842[_0x41d9f7(0x2e0)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4002aa+=Number(RegExp['$1'])),_0x4002aa;},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x592)]=function(_0x2f40ca){const _0x197fba=_0x320868;if(!_0x2f40ca)return 0x0;let _0x4ba595=0x0;const _0x58bc6e=_0x2f40ca[_0x197fba(0x418)];return _0x58bc6e[_0x197fba(0x2e0)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x4ba595+=Number(RegExp['$1'])),_0x58bc6e[_0x197fba(0x2e0)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4ba595+=Number(RegExp['$2'])),_0x4ba595;},VisuMZ['BattleCore'][_0x320868(0x44e)]=Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x64f)],Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x64f)]=function(_0x514f2){const _0x479dc6=_0x320868;if(_0x514f2===this['deathStateId']()&&this[_0x479dc6(0x8b2)]())return!![];return VisuMZ[_0x479dc6(0x5c8)]['Game_BattlerBase_isStateResist'][_0x479dc6(0x5a6)](this,_0x514f2);},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x8b2)]=function(){const _0x570ff7=_0x320868;return this[_0x570ff7(0x716)];},Game_BattlerBase['prototype'][_0x320868(0x511)]=function(_0xb0c43a){const _0x500d40=_0x320868;_0xb0c43a?this[_0x500d40(0xbcc)]():this[_0x500d40(0x4e3)]();},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0xbcc)]=function(){const _0x1e22b9=_0x320868;if(this[_0x1e22b9(0x3e3)]())return;this[_0x1e22b9(0x716)]=!![],this[_0x1e22b9(0x7fe)]=![];},Game_BattlerBase['prototype'][_0x320868(0x4e3)]=function(){const _0x5766d9=_0x320868,_0x45a001=this['isAlive']();this[_0x5766d9(0x716)]=![],_0x45a001&&this['_deathStateApplied']&&this['die'](),this[_0x5766d9(0x7fe)]=![],this[_0x5766d9(0xbc2)](),this[_0x5766d9(0x3e3)]()&&_0x45a001&&(this['performCollapse'](),this[_0x5766d9(0xb14)]());},VisuMZ['BattleCore']['Game_Action_numRepeats']=Game_Action[_0x320868(0x5bb)][_0x320868(0x4c2)],Game_Action[_0x320868(0x5bb)][_0x320868(0x4c2)]=function(){const _0x2b225c=_0x320868;return this[_0x2b225c(0xc47)]()?VisuMZ[_0x2b225c(0x5c8)][_0x2b225c(0x90a)][_0x2b225c(0x5a6)](this):0x0;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x8f7)]=Game_Action[_0x320868(0x5bb)]['setAttack'],Game_Action['prototype'][_0x320868(0x950)]=function(){const _0x52c7e1=_0x320868;if(this[_0x52c7e1(0x34c)]()&&this['subject']()[_0x52c7e1(0x931)]())VisuMZ[_0x52c7e1(0x5c8)][_0x52c7e1(0x8f7)][_0x52c7e1(0x5a6)](this);else BattleManager[_0x52c7e1(0x165)]?VisuMZ[_0x52c7e1(0x5c8)]['Game_Action_setAttack'][_0x52c7e1(0x5a6)](this):this[_0x52c7e1(0x927)]();},VisuMZ['BattleCore'][_0x320868(0x7d4)]=Game_BattlerBase['prototype'][_0x320868(0x931)],Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x931)]=function(){const _0x34b343=_0x320868;if(!this[_0x34b343(0x3e2)]())return![];return VisuMZ[_0x34b343(0x5c8)][_0x34b343(0x7d4)][_0x34b343(0x5a6)](this);},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x3e2)]=function(){const _0x2b3b4c=_0x320868;for(const _0x44e297 of this['traitObjects']()){if(!_0x44e297)continue;if(_0x44e297[_0x2b3b4c(0x418)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x320868(0x5c8)]['Game_Action_setGuard']=Game_Action[_0x320868(0x5bb)][_0x320868(0x600)],Game_Action[_0x320868(0x5bb)][_0x320868(0x600)]=function(){const _0x52e663=_0x320868;this[_0x52e663(0x34c)]()[_0x52e663(0x5ae)]()&&VisuMZ['BattleCore'][_0x52e663(0x95c)][_0x52e663(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x6aa)]=Game_BattlerBase['prototype'][_0x320868(0x5ae)],Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x5ae)]=function(){const _0x3f8506=_0x320868;if(!this['canGuardBattleCore']())return![];return VisuMZ[_0x3f8506(0x5c8)]['Game_BattlerBase_canGuard'][_0x3f8506(0x5a6)](this);},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x137)]=function(){const _0x51f2cd=_0x320868;for(const _0x1455c4 of this[_0x51f2cd(0x22d)]()){if(!_0x1455c4)continue;if(_0x1455c4[_0x51f2cd(0x418)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x320868(0xae6)]=function(){const _0x15aaf3=_0x320868;for(const _0xcf963d of this['traitObjects']()){if(!_0xcf963d)continue;if(_0xcf963d[_0x15aaf3(0x418)][_0x15aaf3(0x2e0)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x320868(0x63d)]=Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x7f2)],Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x7f2)]=function(_0x417eff){const _0x3570eb=_0x320868;if(_0x417eff&&_0x417eff[_0x3570eb(0x418)][_0x3570eb(0x2e0)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0xaefc1e=this['friendsUnit']()[_0x3570eb(0x83b)]();if(_0xaefc1e[_0x3570eb(0x4c1)]===0x1&&_0xaefc1e[0x0]===this)return![];}return VisuMZ[_0x3570eb(0x5c8)][_0x3570eb(0x63d)][_0x3570eb(0x5a6)](this,_0x417eff);},Game_Battler[_0x320868(0x5bb)]['allowRandomSpeed']=function(){const _0x3a4753=_0x320868;return VisuMZ['BattleCore']['Settings'][_0x3a4753(0x96c)][_0x3a4753(0x97b)];},VisuMZ['BattleCore'][_0x320868(0xc4a)]=Game_Battler[_0x320868(0x5bb)][_0x320868(0x131)],Game_Battler['prototype'][_0x320868(0x131)]=function(){const _0x25e82d=_0x320868;if(SceneManager['isSceneBattle']()){if(BattleManager[_0x25e82d(0xb9a)]()){if(this[_0x25e82d(0x21d)]()<=0x0)return;}else{if($gameTroop[_0x25e82d(0x21d)]()<=0x0)return;}}if(SceneManager[_0x25e82d(0x96d)]()&&BattleManager[_0x25e82d(0xb9a)]()&&this[_0x25e82d(0x654)]===Graphics['frameCount'])return;this['_lastRegenFrameCount']=Graphics['frameCount'],SceneManager[_0x25e82d(0x96d)]()&&this[_0x25e82d(0x306)](_0x25e82d(0x4fa)),VisuMZ['BattleCore'][_0x25e82d(0xc4a)][_0x25e82d(0x5a6)](this),SceneManager[_0x25e82d(0x96d)]()&&(this[_0x25e82d(0x3e4)](),this[_0x25e82d(0x306)]('PostRegenerateJS'));},Game_Battler['prototype'][_0x320868(0x3e4)]=function(){const _0x1268b9=_0x320868;if(SceneManager['isSceneBattle']())for(const _0x30196b of this[_0x1268b9(0x22d)]()){if(!_0x30196b)continue;this[_0x1268b9(0xba6)](_0x30196b);}},Game_Battler[_0x320868(0x5bb)]['onRegeneratePlayStateAnimation']=function(_0x3b8892){const _0x5161a9=_0x320868;if(!Imported[_0x5161a9(0x1c8)])return;if(!SceneManager[_0x5161a9(0x96d)]())return;if(this[_0x5161a9(0x3e3)]())return;if(this['isHidden']())return;if(_0x3b8892[_0x5161a9(0x418)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x3e9d59=Number(RegExp['$1']);$gameTemp[_0x5161a9(0x6f0)]([this],_0x3e9d59,![],![]);}},VisuMZ['BattleCore']['Game_Battler_startTpbTurn']=Game_Battler['prototype'][_0x320868(0x51d)],Game_Battler[_0x320868(0x5bb)][_0x320868(0x51d)]=function(){const _0x5e34b2=_0x320868;this['processBattleCoreJS'](_0x5e34b2(0x77e)),VisuMZ['BattleCore']['Game_Battler_startTpbTurn']['call'](this),this[_0x5e34b2(0x306)]('PostStartTurnJS');},VisuMZ[_0x320868(0x5c8)][_0x320868(0x47e)]=Game_Battler[_0x320868(0x5bb)][_0x320868(0x1c4)],Game_Battler[_0x320868(0x5bb)]['onTurnEnd']=function(){const _0x34cd74=_0x320868;this['processBattleCoreJS'](_0x34cd74(0xad0)),VisuMZ[_0x34cd74(0x5c8)][_0x34cd74(0x47e)][_0x34cd74(0x5a6)](this),VisuMZ['BattleCore']['Settings'][_0x34cd74(0x96c)][_0x34cd74(0x554)]&&this[_0x34cd74(0x9df)](),this['processBattleCoreJS'](_0x34cd74(0x6ca));},Game_Battler[_0x320868(0x5bb)]['processBattleCoreJS']=function(_0xff873b){const _0x4818af=_0x320868;if(this[_0x4818af(0x86e)]||this[_0x4818af(0x2f1)])return;const _0x3e9af8=VisuMZ['BattleCore'][_0x4818af(0x1d7)][_0x4818af(0x96c)];if(_0x3e9af8[_0xff873b])_0x3e9af8[_0xff873b][_0x4818af(0x5a6)](this);for(const _0x30b821 of this[_0x4818af(0x22d)]()){if(!_0x30b821)continue;key=VisuMZ['BattleCore'][_0x4818af(0xb0b)](_0x30b821,_0xff873b),VisuMZ[_0x4818af(0x5c8)]['JS'][key]&&VisuMZ['BattleCore']['JS'][key][_0x4818af(0x5a6)](this,this,this,_0x30b821,0x0);}},Game_Battler[_0x320868(0x5bb)][_0x320868(0xbd7)]=function(){const _0x15eec8=_0x320868;return VisuMZ['BattleCore']['Settings'][_0x15eec8(0x818)][_0x15eec8(0x210)]||![];},Game_Battler[_0x320868(0x5bb)][_0x320868(0x45b)]=function(){const _0x1680ff=_0x320868;if(this[_0x1680ff(0xb66)]()){if(this[_0x1680ff(0xbd7)]()){if(this[_0x1680ff(0x3b3)][_0x1680ff(0x41d)](_0x11bb33=>_0x11bb33[_0x1680ff(0xc47)]()&&_0x11bb33[_0x1680ff(0x1a8)]()))return!![];}else{if(this[_0x1680ff(0x3b3)][_0x1680ff(0x41d)](_0x36ba14=>_0x36ba14[_0x1680ff(0xc47)]()&&_0x36ba14['isMagicSkill']()))return!![];}}if(BattleManager[_0x1680ff(0xb9a)]()&&this[_0x1680ff(0x96a)]==='casting')return this['chantStyle']()?this[_0x1680ff(0x7ce)]()&&this['currentAction']()[_0x1680ff(0xc47)]()&&this[_0x1680ff(0x7ce)]()[_0x1680ff(0x1a8)]():this[_0x1680ff(0x7ce)]()&&this['currentAction']()[_0x1680ff(0xc47)]()&&this[_0x1680ff(0x7ce)]()['isMagicSkill']();return![];},Game_Battler[_0x320868(0x5bb)][_0x320868(0xa80)]=function(){const _0x1fb259=_0x320868;if(BattleManager[_0x1fb259(0xb9a)]()&&this[_0x1fb259(0x96a)]===_0x1fb259(0x9a3))return this[_0x1fb259(0xbd7)]()?this['currentAction']()&&this[_0x1fb259(0x7ce)]()[_0x1fb259(0xc47)]()&&!this[_0x1fb259(0x7ce)]()[_0x1fb259(0x1a8)]():this[_0x1fb259(0x7ce)]()&&this[_0x1fb259(0x7ce)]()['item']()&&!this[_0x1fb259(0x7ce)]()['isMagicSkill']();return![];},VisuMZ[_0x320868(0x5c8)]['Game_Battler_clearDamagePopup']=Game_Battler[_0x320868(0x5bb)][_0x320868(0x4ec)],Game_Battler['prototype'][_0x320868(0x4ec)]=function(){const _0x41a0b1=_0x320868;VisuMZ[_0x41a0b1(0x5c8)]['Game_Battler_clearDamagePopup'][_0x41a0b1(0x5a6)](this),this[_0x41a0b1(0x906)]=[];},Game_Battler[_0x320868(0x5bb)][_0x320868(0x8f5)]=function(){const _0x19e174=_0x320868;if(!this['_damagePopupArray'])this[_0x19e174(0x4ec)]();return this['_damagePopupArray']['length']>0x0;},Game_Battler[_0x320868(0x5bb)][_0x320868(0xac1)]=function(){const _0x251b72=_0x320868;if(!SceneManager[_0x251b72(0x96d)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x251b72(0x906)])this[_0x251b72(0x4ec)]();this[_0x251b72(0x8e0)]();const _0x362e85=this[_0x251b72(0xb31)]();if(_0x362e85)_0x362e85['setupDamagePopup']();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x8e0)]=function(){const _0x1e0c84=_0x320868,_0x40c4aa=this[_0x1e0c84(0x7c7)]();if(_0x40c4aa[_0x1e0c84(0x566)]||_0x40c4aa[_0x1e0c84(0x243)]){const _0xb9c3a9=JsonEx['makeDeepCopy'](_0x40c4aa);_0xb9c3a9[_0x1e0c84(0x964)]=![],_0xb9c3a9[_0x1e0c84(0x880)]=0x0,this[_0x1e0c84(0x906)]['push'](_0xb9c3a9);if(!_0x40c4aa['hpDamage']&&!_0x40c4aa[_0x1e0c84(0x880)])return;}if(_0x40c4aa[_0x1e0c84(0x964)]){const _0x435133=JsonEx[_0x1e0c84(0x1b2)](_0x40c4aa);_0x435133['missed']=![],_0x435133[_0x1e0c84(0x243)]=![],_0x435133[_0x1e0c84(0x880)]=0x0,this[_0x1e0c84(0x906)][_0x1e0c84(0x205)](_0x435133);}if(_0x40c4aa[_0x1e0c84(0x880)]!==0x0){const _0x33f9d0=JsonEx['makeDeepCopy'](_0x40c4aa);_0x33f9d0[_0x1e0c84(0x566)]=![],_0x33f9d0[_0x1e0c84(0x243)]=![],_0x33f9d0[_0x1e0c84(0x964)]=![],this[_0x1e0c84(0x906)][_0x1e0c84(0x205)](_0x33f9d0);}},Game_Battler[_0x320868(0x5bb)][_0x320868(0x394)]=function(){const _0x2687f8=_0x320868;if(!this[_0x2687f8(0x906)])this[_0x2687f8(0x4ec)]();return VisuMZ[_0x2687f8(0x5c8)][_0x2687f8(0x1d7)][_0x2687f8(0x31c)][_0x2687f8(0xc4c)]?this[_0x2687f8(0x906)]['shift']():this[_0x2687f8(0x906)][_0x2687f8(0x5a1)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x443)]=function(_0x587987,_0x154e34){const _0x5e1904=_0x320868;if(!SceneManager[_0x5e1904(0x96d)]())return;if(BattleManager[_0x5e1904(0x176)]())return;if(!this[_0x5e1904(0xb31)]())return;if(_0x587987['length']<=0x0)return;_0x154e34=_0x154e34||{},_0x154e34[_0x5e1904(0x1b7)]=_0x154e34[_0x5e1904(0x1b7)]||'#ffffff',_0x154e34[_0x5e1904(0x710)]=_0x154e34[_0x5e1904(0x710)]||[0x0,0x0,0x0,0x0],_0x154e34['flashDuration']=_0x154e34['flashDuration']||0x0,this['battler']()[_0x5e1904(0x443)](_0x587987,_0x154e34);},Game_Battler[_0x320868(0x5bb)][_0x320868(0xbdf)]=function(_0x2a59b8,_0x5b6fe5,_0x14318f){const _0xcb6556=_0x320868;if(!SceneManager[_0xcb6556(0x96d)]())return;if(BattleManager[_0xcb6556(0x176)]())return;if(!this['battler']())return;if(_0x5b6fe5[_0xcb6556(0x4c1)]<=0x0)return;_0x14318f=_0x14318f||{},_0x14318f['textColor']=_0x14318f['textColor']||_0xcb6556(0x594),_0x14318f[_0xcb6556(0x710)]=_0x14318f[_0xcb6556(0x710)]||[0x0,0x0,0x0,0x0],_0x14318f['flashDuration']=_0x14318f[_0xcb6556(0x1be)]||0x0,this[_0xcb6556(0xb31)]()[_0xcb6556(0xbdf)](_0x2a59b8,_0x5b6fe5,_0x14318f);},Game_Battler[_0x320868(0x5bb)][_0x320868(0x624)]=function(){const _0x9f1dfe=_0x320868;if(this[_0x9f1dfe(0x2b4)]())return![];if(this['isAlive']()&&this[_0x9f1dfe(0x338)]())return!![];if(this['isEnemy']()&&this[_0x9f1dfe(0xb85)]()){if(this[_0x9f1dfe(0x3e3)]()&&this[_0x9f1dfe(0x3ab)]())return![];}else{if(this[_0x9f1dfe(0x3e3)]())return![];}return!![];},VisuMZ[_0x320868(0x5c8)][_0x320868(0xbb0)]=Game_Battler[_0x320868(0x5bb)][_0x320868(0x2af)],Game_Battler[_0x320868(0x5bb)][_0x320868(0x2af)]=function(){const _0x38f303=_0x320868;VisuMZ[_0x38f303(0x5c8)]['Game_Battler_clearMotion'][_0x38f303(0x5a6)](this),this[_0x38f303(0x406)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x3ed)]=function(){return!![];},Game_Battler[_0x320868(0x5bb)][_0x320868(0x513)]=function(){return![];},VisuMZ[_0x320868(0x5c8)]['Game_Battler_onBattleStart']=Game_Battler[_0x320868(0x5bb)][_0x320868(0xaf4)],Game_Battler['prototype']['onBattleStart']=function(_0x5949e8){const _0x3647d5=_0x320868;VisuMZ[_0x3647d5(0x5c8)][_0x3647d5(0x8be)][_0x3647d5(0x5a6)](this,_0x5949e8),this[_0x3647d5(0xbf0)](_0x5949e8),this['clearDamagePopup']();},Game_Battler[_0x320868(0x5bb)][_0x320868(0xbf0)]=function(_0x1c8dff){const _0x24beda=_0x320868;this['setBattlerFlip'](![]),this['_forcedHomeX']=undefined,this[_0x24beda(0x6c3)]=undefined;},VisuMZ[_0x320868(0x5c8)]['Game_Battler_onBattleEnd']=Game_Battler[_0x320868(0x5bb)][_0x320868(0x18c)],Game_Battler[_0x320868(0x5bb)][_0x320868(0x18c)]=function(){const _0x1aea35=_0x320868;VisuMZ[_0x1aea35(0x5c8)][_0x1aea35(0x4d0)]['call'](this),this[_0x1aea35(0x9a9)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x9a9)]=function(){this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ['BattleCore']['Game_Battler_performActionStart']=Game_Battler[_0x320868(0x5bb)][_0x320868(0xb03)],Game_Battler[_0x320868(0x5bb)][_0x320868(0xb03)]=function(_0x474ba1){const _0x46bf08=_0x320868;VisuMZ['BattleCore'][_0x46bf08(0x435)][_0x46bf08(0x5a6)](this,_0x474ba1);if(!_0x474ba1[_0x46bf08(0x720)]()){const _0x80f4d9=this[_0x46bf08(0xb31)]();_0x80f4d9&&_0x80f4d9['stepForward']();}this[_0x46bf08(0xac3)](![]);},Game_Battler[_0x320868(0x5bb)][_0x320868(0x3c8)]=function(){const _0x534886=_0x320868;this['_performDamageMotion']=undefined;const _0xd70c2b=this[_0x534886(0x9cf)];this['_flinched']=![];if(BattleManager['isActiveTpb']()&&this[_0x534886(0x760)]()){const _0x511157=this['battler']();if(_0x511157&&_0xd70c2b)_0x511157[_0x534886(0x7ca)]();return;}const _0xb34575=this[_0x534886(0xb31)]();if(_0xb34575)_0xb34575[_0x534886(0x794)]();this['setBattlerFlip'](![]),this[_0x534886(0xb14)]();},Game_Battler['prototype']['performActionMotions']=function(_0x27a417){const _0x328ad7=_0x320868;if(_0x27a417['isAttack']())this[_0x328ad7(0x830)]();else{if(_0x27a417[_0x328ad7(0x720)]())this[_0x328ad7(0x235)](_0x328ad7(0xa12));else{if(_0x27a417[_0x328ad7(0x1a8)]())this['requestMotion'](_0x328ad7(0xa0d));else{if(_0x27a417[_0x328ad7(0x7cf)]())[0x1,0x2,0x5,0x6]['includes'](_0x27a417[_0x328ad7(0xc47)]()[_0x328ad7(0x80d)][_0x328ad7(0x97c)])?this[_0x328ad7(0x830)]():this[_0x328ad7(0x235)](_0x328ad7(0x5ff));else _0x27a417[_0x328ad7(0x1fe)]()&&this['requestMotion']('item');}}}},Game_Battler['prototype'][_0x320868(0x1e3)]=function(){const _0x4a1962=_0x320868;return $dataSystem[_0x4a1962(0x538)][0x0];},Game_Battler[_0x320868(0x5bb)][_0x320868(0x6dc)]=function(){const _0x3062e5=_0x320868,_0x3e0041=this[_0x3062e5(0x1e3)]();return _0x3e0041?_0x3e0041['weaponImageId']:0x0;},Game_Battler[_0x320868(0x5bb)][_0x320868(0x583)]=function(_0xeadde2){const _0x405973=_0x320868;if(!$gameSystem[_0x405973(0x5a9)]())return;const _0x2e7c13=this[_0x405973(0xb31)](),_0x421515=_0xeadde2[_0x405973(0xb31)]();if(!_0x2e7c13||!_0x421515)return;const _0x3c9c26=_0x421515[_0x405973(0xb8e)],_0x14658e=_0x421515[_0x405973(0xba4)];this[_0x405973(0x7c4)](_0x3c9c26,_0x14658e,0x0,![],_0x405973(0x4ff),-0x1),_0x2e7c13['updatePosition']();const _0x18772a=VisuMZ[_0x405973(0x5c8)][_0x405973(0x1d7)][_0x405973(0x32c)];let _0x130e08=(_0x421515['width']+_0x2e7c13['width'])/0x2;_0x130e08*=this[_0x405973(0x94e)]()?0x1:-0x1;let _0x4a3ee0=_0x18772a['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0xeadde2['moveBattlerDistance'](_0x130e08,_0x4a3ee0,0x0,![],_0x405973(0x4ff)),_0x421515[_0x405973(0x752)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x235)]=function(_0x5d8800){const _0x312d93=_0x320868;if(SceneManager[_0x312d93(0x96d)]()){const _0x32d8bd=this[_0x312d93(0xb31)]();_0x32d8bd&&(_0x32d8bd[_0x312d93(0x851)](_0x5d8800),[_0x312d93(0x509),'thrust',_0x312d93(0x69e)][_0x312d93(0x6d2)](_0x5d8800)&&this[_0x312d93(0x553)]());}this[_0x312d93(0x406)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x553)]=function(){},Game_Battler[_0x320868(0x5bb)][_0x320868(0x2a7)]=function(_0x136397){const _0x50cbe0=_0x320868;if(SceneManager[_0x50cbe0(0x96d)]()){const _0x588114=this[_0x50cbe0(0xb31)]();if(_0x588114)_0x588114['forceWeaponAnimation'](_0x136397);}},Game_Battler[_0x320868(0x5bb)]['startAttackWeaponAnimation']=function(){const _0x5cddc3=_0x320868;if(SceneManager['isSceneBattle']()){const _0x4fcbea=this['getAttackWeaponAnimationId']();this[_0x5cddc3(0x2a7)](_0x4fcbea);}},Game_Battler[_0x320868(0x5bb)][_0x320868(0x5c9)]=function(_0x386223,_0x12f2b3){const _0x4e5f10=_0x320868;if(!_0x386223)return;if(!_0x386223[_0x4e5f10(0xc47)]())return;if(_0x386223[_0x4e5f10(0x2d9)]())return;if(_0x386223[_0x4e5f10(0x720)]())return;if(_0x386223[_0x4e5f10(0x1fe)]())return;if($gameTemp[_0x4e5f10(0x6e5)])return;let _0x4feb80=0x0;const _0x416bfb=VisuMZ[_0x4e5f10(0x5c8)][_0x4e5f10(0x1d7)][_0x4e5f10(0x32c)],_0x527386=_0x386223[_0x4e5f10(0xc47)]()[_0x4e5f10(0x418)];if(_0x527386[_0x4e5f10(0x2e0)](/<CAST ANIMATION: (\d+)>/i))_0x4feb80=Number(RegExp['$1']);else{if(_0x527386[_0x4e5f10(0x2e0)](/<NO CAST ANIMATION>/i))return;else{if(_0x386223['isCertainHit']())_0x4feb80=_0x416bfb['CastCertain'];else{if(_0x386223[_0x4e5f10(0xa0a)]())_0x4feb80=_0x416bfb['CastPhysical'];else _0x386223['isMagical']()&&(_0x4feb80=_0x416bfb[_0x4e5f10(0x543)]);}}}_0x4feb80>0x0&&$gameTemp[_0x4e5f10(0x416)]([this],_0x4feb80,!!_0x12f2b3);},Game_Battler[_0x320868(0x5bb)][_0x320868(0x203)]=function(){const _0x2f7f1d=_0x320868;SoundManager[_0x2f7f1d(0x688)]();let _0x3d0666=VisuMZ[_0x2f7f1d(0x5c8)][_0x2f7f1d(0x1d7)][_0x2f7f1d(0x32c)][_0x2f7f1d(0x593)];_0x3d0666>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp[_0x2f7f1d(0x6f0)]([this],_0x3d0666):$gameTemp['requestAnimation']([this],_0x3d0666));},Game_Battler[_0x320868(0x5bb)][_0x320868(0x151)]=function(){const _0x576891=_0x320868;if(!$gameSystem['isSideView']())return![];if(!BattleManager[_0x576891(0x76e)]())return![];if(!this[_0x576891(0x174)]())return![];if(this['isInputting']())return!![];if(this[_0x576891(0x977)]())return!![];if(this[_0x576891(0x88a)]>=0x1)return!![];return![];},VisuMZ['BattleCore'][_0x320868(0x768)]=Game_Battler[_0x320868(0x5bb)][_0x320868(0x37d)],Game_Battler[_0x320868(0x5bb)][_0x320868(0x37d)]=function(){const _0xc375c=_0x320868;this[_0xc375c(0x151)]()&&(this[_0xc375c(0x8bd)]=!![]),VisuMZ['BattleCore']['Game_Battler_performDamage'][_0xc375c(0x5a6)](this),this[_0xc375c(0x968)](),this[_0xc375c(0x1c1)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x705)]=Game_Battler['prototype'][_0x320868(0x588)],Game_Battler[_0x320868(0x5bb)]['performMiss']=function(){const _0x196069=_0x320868;this[_0x196069(0x151)]()&&(this[_0x196069(0x8bd)]=!![]),VisuMZ[_0x196069(0x5c8)]['Game_Battler_performMiss'][_0x196069(0x5a6)](this),this['performFlinch']();},VisuMZ['BattleCore'][_0x320868(0xb82)]=Game_Battler['prototype'][_0x320868(0x46d)],Game_Battler[_0x320868(0x5bb)][_0x320868(0x46d)]=function(){const _0xd6b471=_0x320868;this['isActiveTpbReady']()&&(this[_0xd6b471(0x8bd)]=!![]),VisuMZ[_0xd6b471(0x5c8)][_0xd6b471(0xb82)][_0xd6b471(0x5a6)](this),this[_0xd6b471(0x968)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x968)]=function(){const _0x25e619=_0x320868;if(!$gameSystem[_0x25e619(0x5a9)]())return;if(this[_0x25e619(0x9cf)])return;this[_0x25e619(0x9cf)]=!![];const _0x4c66f8=this[_0x25e619(0xb31)]();if(_0x4c66f8)_0x4c66f8[_0x25e619(0xbbc)]();},Game_Battler['prototype'][_0x320868(0x1c1)]=function(){const _0x4384b0=_0x320868;if(!this[_0x4384b0(0x3ed)]())return;const _0xa17e28=VisuMZ[_0x4384b0(0x5c8)][_0x4384b0(0x1d7)][_0x4384b0(0x818)];if(!(_0xa17e28[_0x4384b0(0x4d6)]??![]))return;if(this[_0x4384b0(0x6e7)]<=0x0)return;const _0x1203ff=this[_0x4384b0(0xb31)]();if(_0x1203ff){const _0x23ea00=this[_0x4384b0(0x6e7)],_0x1071a1=(_0x23ea00/this[_0x4384b0(0x36d)])[_0x4384b0(0x4a9)](0.8,0x1),_0x551fd3=_0xa17e28['ShakeFlinchPower']??0x30,_0x4b1433=_0x1071a1*_0x551fd3;_0x1203ff[_0x4384b0(0xa8e)](_0x4b1433,_0x1071a1);}},Game_Battler[_0x320868(0x5bb)][_0x320868(0xb14)]=function(){const _0x33335d=_0x320868;if(this[_0x33335d(0x3e3)]()&&this[_0x33335d(0x7bf)]!=='dead'){this[_0x33335d(0x235)](_0x33335d(0xa23));return;}if(this['isDead']()&&this['_motionType']===_0x33335d(0xa23))return;if(!!this['_freezeMotionData'])return;if(this[_0x33335d(0xb8b)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x33335d(0xaad)]){if(this['battler']())this[_0x33335d(0xb31)]()[_0x33335d(0x47a)]();}this[_0x33335d(0x406)]();return;}if(this[_0x33335d(0x7bf)]==='victory')return;if(this[_0x33335d(0x7bf)]===_0x33335d(0x4c9)&&!BattleManager[_0x33335d(0x760)]())return;if(this[_0x33335d(0x7bf)]==='guard'&&!BattleManager[_0x33335d(0x760)]())return;this[_0x33335d(0x2af)]();if(BattleManager[_0x33335d(0x76e)]()&&this===BattleManager[_0x33335d(0xaad)])return;if(this[_0x33335d(0xb31)]()&&BattleManager['isInputting']()){this['battler']()[_0x33335d(0x47a)](),this['clearFreezeMotion']();return;}},Game_Enemy[_0x320868(0x5bb)][_0x320868(0xb46)]=function(){const _0x5301df=_0x320868;if(!this['hasSvBattler']())return![];const _0x35cbde=this[_0x5301df(0xb31)]();if(!_0x35cbde)return![];const _0x3431ef=_0x35cbde['_svBattlerSprite'];if(!_0x3431ef)return![];const _0x57c0ae=_0x3431ef[_0x5301df(0x4c4)];return _0x57c0ae&&!_0x57c0ae[_0x5301df(0x53b)];},Game_Battler[_0x320868(0x5bb)][_0x320868(0x7e6)]=function(){const _0x258422=_0x320868;return this[_0x258422(0x396)];},Game_Battler[_0x320868(0x5bb)]['setBattlerFlip']=function(_0xd11031){const _0xf3f71d=_0x320868;if(!$gameSystem['isSideView']())return;this[_0xf3f71d(0x396)]=_0xd11031;const _0x311b25=this[_0xf3f71d(0xb31)]();if(_0x311b25)_0x311b25[_0xf3f71d(0x1cf)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x545)]=function(_0x328fa4,_0x2e4de0,_0x753d89){const _0xa1c967=_0x320868;if(!$gameSystem[_0xa1c967(0x5a9)]())return;const _0x335686=this['battler']();if(!_0x335686)return;if(_0x328fa4===_0x335686[_0xa1c967(0xb8e)])return;let _0x42db65=![];if(this['isActor']()){if(_0x328fa4>_0x335686[_0xa1c967(0xb8e)])_0x42db65=!![];if(_0x328fa4<_0x335686[_0xa1c967(0xb8e)])_0x42db65=![];}else{if(this[_0xa1c967(0xb8b)]()){if(_0x328fa4>_0x335686[_0xa1c967(0xb8e)])_0x42db65=![];if(_0x328fa4<_0x335686['_baseX'])_0x42db65=!![];}};this[_0xa1c967(0xac3)](_0x753d89?!_0x42db65:_0x42db65),_0x335686[_0xa1c967(0x1cf)]();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x731)]=function(_0x3c11ab,_0x47f476,_0x3a2476,_0x191ff0,_0x565e38){const _0x95125d=_0x320868;if(!$gameSystem['isSideView']())return;const _0x3249cd=this['battler']();if(!_0x3249cd)return;if(_0x191ff0)this['setBattlerFacePoint'](_0x3c11ab+_0x3249cd[_0x95125d(0xb8e)],_0x47f476+_0x3249cd[_0x95125d(0xba4)],![]);_0x3c11ab+=_0x3249cd[_0x95125d(0xb8e)]-_0x3249cd['_homeX'],_0x47f476+=_0x3249cd[_0x95125d(0xba4)]-_0x3249cd['_homeY'],_0x3249cd['startMove'](_0x3c11ab,_0x47f476,_0x3a2476);if(Imported[_0x95125d(0x1c8)])_0x3249cd[_0x95125d(0x1ad)](_0x565e38||'Linear');},Game_Battler[_0x320868(0x5bb)][_0x320868(0x7c4)]=function(_0x3cb748,_0x50a86f,_0x466cb7,_0x43d2ca,_0x137646,_0x4ae80c){const _0x36a6d6=_0x320868;if(!$gameSystem['isSideView']())return;const _0xbc64b6=this[_0x36a6d6(0xb31)]();if(!_0xbc64b6)return;if(_0x3cb748===Infinity||_0x50a86f===Infinity)return;if(isNaN(_0x3cb748)||isNaN(_0x50a86f))return;_0x4ae80c=_0x4ae80c||0x0;if(_0x4ae80c>0x0){if(_0xbc64b6[_0x36a6d6(0xb8e)]>_0x3cb748)_0x3cb748+=_0xbc64b6[_0x36a6d6(0x529)]/0x2+_0x4ae80c;if(_0xbc64b6['_baseX']<_0x3cb748)_0x3cb748-=_0xbc64b6['width']/0x2+_0x4ae80c;}if(_0x43d2ca)this[_0x36a6d6(0x545)](_0x3cb748,_0x50a86f,![]);_0x3cb748-=_0xbc64b6['_homeX'],_0x50a86f-=_0xbc64b6['_homeY'],_0xbc64b6['startMove'](_0x3cb748,_0x50a86f,_0x466cb7);if(Imported[_0x36a6d6(0x1c8)])_0xbc64b6[_0x36a6d6(0x1ad)](_0x137646||_0x36a6d6(0x4ff));},Game_Battler[_0x320868(0x5bb)][_0x320868(0x184)]=function(_0x5b7703,_0x59ad56,_0x427652,_0x4faa04,_0x20c605){const _0x479e1c=_0x320868;if(!$gameSystem[_0x479e1c(0x5a9)]())return;const _0x23113a=this[_0x479e1c(0xb31)]();if(!_0x23113a)return;if(_0x4faa04)this[_0x479e1c(0x545)](_0x5b7703+_0x23113a['_baseX'],_0x59ad56+_0x23113a[_0x479e1c(0xba4)],![]);_0x5b7703+=_0x23113a[_0x479e1c(0xa91)],_0x59ad56+=_0x23113a[_0x479e1c(0x379)],_0x23113a[_0x479e1c(0x59b)](_0x5b7703,_0x59ad56,_0x427652,_0x20c605),this[_0x479e1c(0x3e5)]=_0x5b7703,this[_0x479e1c(0x6c3)]=_0x59ad56;},Game_Battler[_0x320868(0x5bb)][_0x320868(0x7d1)]=function(_0xdd0b21,_0x30d2b8,_0x241c47,_0x1f069d,_0x2a6bb5,_0x17b8ea){const _0x12a4cf=_0x320868;if(!$gameSystem[_0x12a4cf(0x5a9)]())return;const _0xb087b9=this[_0x12a4cf(0xb31)]();if(!_0xb087b9)return;_0x17b8ea=_0x17b8ea||0x0;if(_0x17b8ea>0x0){if(_0xb087b9[_0x12a4cf(0xb8e)]>_0xdd0b21)_0xdd0b21+=_0xb087b9['width']/0x2+_0x17b8ea;if(_0xb087b9[_0x12a4cf(0xb8e)]<_0xdd0b21)_0xdd0b21-=_0xb087b9[_0x12a4cf(0x529)]/0x2+_0x17b8ea;}if(_0x1f069d)this[_0x12a4cf(0x545)](_0xdd0b21,_0x30d2b8,![]);_0xb087b9['startHomeMove'](_0xdd0b21,_0x30d2b8,_0x241c47,_0x2a6bb5),this[_0x12a4cf(0x3e5)]=_0xdd0b21,this[_0x12a4cf(0x6c3)]=_0x30d2b8;},Game_Battler[_0x320868(0x5bb)][_0x320868(0x28f)]=function(_0xa424d5,_0x1e393b,_0x41d85e){const _0xd2aa3d=_0x320868;if(!$gameSystem[_0xd2aa3d(0x5a9)]())return;const _0x50aca5=this['battler']();if(!_0x50aca5)return;_0x50aca5['startFloat'](_0xa424d5,_0x1e393b,_0x41d85e);},Game_Battler['prototype'][_0x320868(0x527)]=function(_0x93a1c1,_0x385e01){const _0x1c5fe3=_0x320868;if(!$gameSystem[_0x1c5fe3(0x5a9)]())return;const _0xdc7396=this[_0x1c5fe3(0xb31)]();if(!_0xdc7396)return;_0xdc7396[_0x1c5fe3(0x2ec)](_0x93a1c1,_0x385e01);},Game_Battler[_0x320868(0x5bb)][_0x320868(0x56f)]=function(_0xe92cb8,_0x47bbe8,_0x4d255f,_0x547afb){const _0x5d4c19=_0x320868;if(!$gameSystem[_0x5d4c19(0x5a9)]())return;const _0x475b68=this[_0x5d4c19(0xb31)]();if(!_0x475b68)return;_0x475b68[_0x5d4c19(0x596)](_0xe92cb8,_0x47bbe8,_0x4d255f,_0x547afb);},Game_Battler[_0x320868(0x5bb)][_0x320868(0x373)]=function(_0x18854c,_0xc23aee,_0x26434b,_0x1660d4){const _0x4ae61d=_0x320868;if(!$gameSystem[_0x4ae61d(0x5a9)]())return;const _0x3b2589=this[_0x4ae61d(0xb31)]();if(!_0x3b2589)return;this[_0x4ae61d(0x94e)]()&&(_0x18854c*=-0x1,_0xc23aee*=-0x1),_0x3b2589['startSkew'](_0x18854c,_0xc23aee,_0x26434b,_0x1660d4);},Game_Battler[_0x320868(0x5bb)]['growBattler']=function(_0x54030d,_0x127941,_0x219b91,_0x1fc585){const _0x1c70d3=_0x320868;if(!$gameSystem['isSideView']())return;const _0x532075=this[_0x1c70d3(0xb31)]();if(!_0x532075)return;_0x532075[_0x1c70d3(0x8fb)](_0x54030d,_0x127941,_0x219b91,_0x1fc585);},Game_Battler[_0x320868(0x5bb)][_0x320868(0x58d)]=function(_0x526661,_0x58ed17,_0xdc15db){const _0xb28e25=_0x320868;if(!$gameSystem['isSideView']())return;const _0x3e8c7b=this[_0xb28e25(0xb31)]();if(!_0x3e8c7b)return;_0x3e8c7b['startOpacity'](_0x526661,_0x58ed17,_0xdc15db);},Game_Battler[_0x320868(0x5bb)]['clearFreezeMotion']=function(){const _0x3f514e=_0x320868,_0x1b957a=!!this[_0x3f514e(0x485)];this['_freezeMotionData']=undefined,_0x1b957a&&(this[_0x3f514e(0xb14)](),this[_0x3f514e(0xb02)]());},Game_Battler['prototype']['clearFreezeMotionForWeapons']=function(){const _0x336815=_0x320868;if(!SceneManager[_0x336815(0x96d)]())return;const _0xde58e9=this[_0x336815(0xb31)]();if(!_0xde58e9)return;let _0x2dd30d=this[_0x336815(0x94e)]()?_0xde58e9['_weaponSprite']:_0xde58e9[_0x336815(0x6c4)][_0x336815(0x7be)];_0x2dd30d&&_0x2dd30d['setup'](0x0);},Game_Battler[_0x320868(0x5bb)]['freezeMotion']=function(_0x22a519,_0x503d73,_0x1194a2){const _0x59611b=_0x320868;if(this[_0x59611b(0xb8b)]()&&!this[_0x59611b(0xb85)]())return;let _0x1998e5=0x0,_0x4099e6=0x0;_0x22a519[_0x59611b(0x2e0)](/ATTACK[ ](\d+)/i)&&(_0x4099e6=Number(RegExp['$1']),_0x4099e6--);if(this[_0x59611b(0x94e)]()){const _0x2745a3=this[_0x59611b(0xa2d)]();_0x1998e5=_0x2745a3[_0x4099e6]?_0x2745a3[_0x4099e6][_0x59611b(0x827)]:0x0;}else this[_0x59611b(0xb8b)]()&&(_0x1998e5=this['svBattlerData']()['wtypeId']||0x0);const _0x3278c1=$dataSystem[_0x59611b(0x538)][_0x1998e5];_0x22a519[_0x59611b(0x2e0)](/attack/i)&&(_0x22a519=[_0x59611b(0x120),_0x59611b(0x509),_0x59611b(0x69e)][_0x3278c1['type']]||'swing'),this[_0x59611b(0x485)]={'motionType':_0x22a519,'weaponImageId':_0x503d73?_0x3278c1['weaponImageId']:0x0,'pattern':_0x1194a2};},Game_Battler[_0x320868(0x5bb)][_0x320868(0x497)]=function(_0x5e1d08){const _0x541d2e=_0x320868;if(!_0x5e1d08)return![];return _0x5e1d08[_0x541d2e(0xc67)]()===this['friendsUnit']();},Game_Battler[_0x320868(0x5bb)][_0x320868(0x7e3)]=function(_0x5339be){const _0x1db27a=_0x320868;if(!_0x5339be)return![];return _0x5339be[_0x1db27a(0x7e4)]()===this[_0x1db27a(0xc67)]();},Game_Battler['prototype'][_0x320868(0x974)]=function(){return![];},Game_Actor['prototype'][_0x320868(0x974)]=function(){const _0x274508=_0x320868;return this['battlerName']()[_0x274508(0x2e0)](/\$/i);},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x974)]=function(){const _0x29432c=_0x320868;return this[_0x29432c(0xb85)]()&&this[_0x29432c(0x9e7)]()[_0x29432c(0x2e0)](/\$/i);},VisuMZ['BattleCore'][_0x320868(0x3f7)]=Game_Actor[_0x320868(0x5bb)][_0x320868(0x8ff)],Game_Actor['prototype'][_0x320868(0x8ff)]=function(_0x57a534){const _0x2c0842=_0x320868;VisuMZ['BattleCore'][_0x2c0842(0x3f7)][_0x2c0842(0x5a6)](this,_0x57a534),this['initBattlePortrait']();},Game_Actor['prototype'][_0x320868(0x56d)]=function(){const _0x290bfd=_0x320868;this[_0x290bfd(0x4e6)]='',this[_0x290bfd(0xb94)]()&&this['actor']()['note'][_0x290bfd(0x2e0)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x290bfd(0x4e6)]=String(RegExp['$1']));},Game_Actor[_0x320868(0x5bb)][_0x320868(0x37b)]=function(){const _0x28f308=_0x320868;if(this[_0x28f308(0x82d)]()!=='')return this[_0x28f308(0x82d)]();else{if(Imported[_0x28f308(0x6c2)]&&this[_0x28f308(0x762)]()!=='')return this[_0x28f308(0x762)]();}return'';},Game_Actor[_0x320868(0x5bb)]['getBattlePortrait']=function(){const _0xf681f=_0x320868;if(this[_0xf681f(0x4e6)]===undefined)this['initBattlePortrait']();return this[_0xf681f(0x4e6)];},Game_Actor[_0x320868(0x5bb)][_0x320868(0x604)]=function(_0x57f281){const _0x3fab83=_0x320868;if(this[_0x3fab83(0x4e6)]===undefined)this[_0x3fab83(0x56d)]();this[_0x3fab83(0x4e6)]=_0x57f281;if(SceneManager[_0x3fab83(0x96d)]()&&$gameParty[_0x3fab83(0x20a)]()['includes'](this)){const _0x2f1cb8=SceneManager[_0x3fab83(0x64a)]['_statusWindow'];_0x2f1cb8&&_0x2f1cb8[_0x3fab83(0x98d)](this);}},Game_Actor[_0x320868(0x5bb)][_0x320868(0x539)]=function(){return!![];},Game_Actor[_0x320868(0x5bb)][_0x320868(0x1e5)]=function(){const _0x2af5f0=_0x320868;if(!this['isConfused']()&&BattleManager[_0x2af5f0(0x16d)])return!![];return Game_Battler[_0x2af5f0(0x5bb)][_0x2af5f0(0x1e5)]['call'](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x806)]=Game_Actor['prototype'][_0x320868(0xbb8)],Game_Actor[_0x320868(0x5bb)]['makeActionList']=function(){const _0x214d04=_0x320868;if(BattleManager[_0x214d04(0x16d)]&&!ConfigManager[_0x214d04(0x8ab)])return this[_0x214d04(0x7e7)]();else{return VisuMZ[_0x214d04(0x5c8)][_0x214d04(0x806)]['call'](this);;}},Game_Actor[_0x320868(0x5bb)]['makeActionListAutoAttack']=function(){const _0x8aeb06=_0x320868,_0x824020=[],_0x1ba51e=new Game_Action(this);return _0x1ba51e['setAttack'](),_0x824020[_0x8aeb06(0x205)](_0x1ba51e),_0x824020;},Game_Actor[_0x320868(0x5bb)][_0x320868(0x25d)]=function(){const _0x3261de=_0x320868;return this[_0x3261de(0x901)]()[_0x3261de(0x418)][_0x3261de(0x2e0)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x3261de(0x867)](/[\r\n]+/):VisuMZ[_0x3261de(0x5c8)][_0x3261de(0x1d7)]['ActorCmd'][_0x3261de(0xa9a)];},Game_Actor[_0x320868(0x5bb)][_0x320868(0x2bc)]=function(){const _0x3c8af1=_0x320868;if(this[_0x3c8af1(0x312)][_0x3c8af1(0xc30)]!==undefined)return this['_cache'][_0x3c8af1(0xc30)];return this[_0x3c8af1(0xb94)]()[_0x3c8af1(0x418)][_0x3c8af1(0x2e0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x3c8af1(0x312)][_0x3c8af1(0xc30)]=eval(RegExp['$1']),this['_cache'][_0x3c8af1(0xb40)]=eval(RegExp['$2'])):this['_cache'][_0x3c8af1(0xc30)]=Game_Battler[_0x3c8af1(0x5bb)][_0x3c8af1(0x2bc)]['call'](this),this['_cache']['svAnchorX'];},Game_Actor[_0x320868(0x5bb)][_0x320868(0x881)]=function(){const _0xb0331=_0x320868;if(this[_0xb0331(0x312)][_0xb0331(0xb40)]!==undefined)return this['_cache'][_0xb0331(0xb40)];return this[_0xb0331(0xb94)]()[_0xb0331(0x418)][_0xb0331(0x2e0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xb0331(0x312)][_0xb0331(0xc30)]=eval(RegExp['$1']),this['_cache'][_0xb0331(0xb40)]=eval(RegExp['$2'])):this['_cache'][_0xb0331(0xb40)]=Game_Battler[_0xb0331(0x5bb)][_0xb0331(0x881)][_0xb0331(0x5a6)](this),this['_cache'][_0xb0331(0xb40)];},Game_Actor[_0x320868(0x5bb)]['svBattlerShadowVisible']=function(){const _0x55f9ee=_0x320868;if(this[_0x55f9ee(0x312)]['svShadow']!==undefined)return this[_0x55f9ee(0x312)]['svShadow'];if(this[_0x55f9ee(0xb94)]()[_0x55f9ee(0x418)][_0x55f9ee(0x2e0)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x55f9ee(0x312)][_0x55f9ee(0x4b1)]=!![];else this[_0x55f9ee(0xb94)]()[_0x55f9ee(0x418)][_0x55f9ee(0x2e0)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x55f9ee(0x312)]['svShadow']=![]:this[_0x55f9ee(0x312)][_0x55f9ee(0x4b1)]=Game_Battler[_0x55f9ee(0x5bb)][_0x55f9ee(0x930)]['call'](this);return this[_0x55f9ee(0x312)]['svShadow'];},Game_Actor[_0x320868(0x5bb)][_0x320868(0xa4c)]=function(){const _0x2173b9=_0x320868;return VisuMZ[_0x2173b9(0x5c8)][_0x2173b9(0x1d7)][_0x2173b9(0x818)][_0x2173b9(0x7f0)];},Game_Actor[_0x320868(0x5bb)][_0x320868(0x553)]=function(){const _0x3b498f=_0x320868,_0x31e098=this[_0x3b498f(0xa2d)](),_0x5d7ef0=_0x31e098[0x0]?_0x31e098[0x0][_0x3b498f(0x827)]:0x0,_0x478cc1=$dataSystem[_0x3b498f(0x538)][_0x5d7ef0];_0x478cc1&&this[_0x3b498f(0x2a7)](_0x478cc1['weaponImageId']);},Game_Actor[_0x320868(0x5bb)]['performAction']=function(_0x3c1874){const _0x8ea00b=_0x320868;Game_Battler[_0x8ea00b(0x5bb)][_0x8ea00b(0x63c)][_0x8ea00b(0x5a6)](this,_0x3c1874),this[_0x8ea00b(0xad7)](_0x3c1874);},Game_Actor[_0x320868(0x5bb)]['getAttackMotion']=function(){const _0xe81d38=_0x320868,_0x263dba=this['weapons'](),_0x482fdd=_0x263dba[0x0]?_0x263dba[0x0][_0xe81d38(0x827)]:0x0;return $dataSystem[_0xe81d38(0x538)][_0x482fdd];},Game_Actor[_0x320868(0x5bb)][_0x320868(0x3eb)]=function(_0x1b81fd){const _0x43f685=_0x320868;_0x1b81fd=_0x1b81fd||0x1,_0x1b81fd--;const _0x3d3502=this[_0x43f685(0xa2d)]();return _0x3d3502[_0x1b81fd]?_0x3d3502[_0x1b81fd]['animationId']:0x0;},Game_Actor['prototype'][_0x320868(0x310)]=function(_0x3d9221){const _0x37991a=_0x320868;_0x3d9221=_0x3d9221||0x1,_0x3d9221--;const _0x1ccaa8=this[_0x37991a(0xa2d)](),_0x4616e8=_0x1ccaa8[_0x3d9221]?_0x1ccaa8[_0x3d9221]['wtypeId']:0x0;return $dataSystem['attackMotions'][_0x4616e8];},Game_Actor['prototype'][_0x320868(0x71a)]=function(_0x2f6446){const _0x181a7f=_0x320868;_0x2f6446=_0x2f6446||0x1,_0x2f6446--;const _0x2d0e9a=this[_0x181a7f(0xa2d)](),_0x3c1502=_0x2d0e9a[_0x2f6446]?_0x2d0e9a[_0x2f6446]['wtypeId']:0x0,_0xd868f1=$dataSystem[_0x181a7f(0x538)][_0x3c1502];if(_0xd868f1){if(_0xd868f1['type']===0x0)this[_0x181a7f(0x235)](_0x181a7f(0x120));else{if(_0xd868f1[_0x181a7f(0x97c)]===0x1)this[_0x181a7f(0x235)](_0x181a7f(0x509));else _0xd868f1[_0x181a7f(0x97c)]===0x2&&this[_0x181a7f(0x235)](_0x181a7f(0x69e));}this[_0x181a7f(0x2a7)](_0xd868f1[_0x181a7f(0x456)]);}},Game_Battler[_0x320868(0x5bb)][_0x320868(0x748)]=function(_0x6b04b7){const _0x4bbf1d=_0x320868;if(this['isActor']()){const _0x3c74ec=this[_0x4bbf1d(0xa2d)]();if(_0x3c74ec[_0x4bbf1d(0x4c1)]>0x0){const _0x5cdf63=_0x3c74ec[_0x6b04b7];if(_0x5cdf63)_0x6b04b7=this[_0x4bbf1d(0x918)]()[_0x4bbf1d(0x77f)](_0x5cdf63);}}this['_activeWeaponSlot']=_0x6b04b7||0x0,this[_0x4bbf1d(0x312)]={};},Game_Battler[_0x320868(0x5bb)][_0x320868(0x44f)]=function(){const _0x62dcf8=_0x320868;this[_0x62dcf8(0xbea)]=this[_0x62dcf8(0xbea)]||0x0,this[_0x62dcf8(0xbea)]++,this[_0x62dcf8(0x312)]={};},Game_Battler[_0x320868(0x5bb)][_0x320868(0x207)]=function(){this['_activeWeaponSlot']=undefined,this['_cache']={};},VisuMZ['BattleCore'][_0x320868(0xae5)]=Game_Actor[_0x320868(0x5bb)][_0x320868(0x918)],Game_Actor['prototype'][_0x320868(0x918)]=function(){const _0x1cac38=_0x320868;let _0x511cf1=VisuMZ['BattleCore'][_0x1cac38(0xae5)]['call'](this);if(this[_0x1cac38(0xab6)])return _0x511cf1;if(this['_activeWeaponSlot']!==undefined){this[_0x1cac38(0xab6)]=!![];const _0x121be4=this[_0x1cac38(0x408)]();for(let _0x349a65=0x0;_0x349a65<_0x121be4[_0x1cac38(0x4c1)];_0x349a65++){_0x121be4[_0x349a65]===0x1&&this[_0x1cac38(0xbea)]!==_0x349a65&&(_0x511cf1[_0x349a65]=null);}this[_0x1cac38(0xab6)]=undefined;}return _0x511cf1;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x6fe)]=Game_BattlerBase[_0x320868(0x5bb)]['param'],Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x1ce)]=function(_0x9cbac1){const _0x4d24ef=_0x320868;this[_0x4d24ef(0xbea)]!==undefined&&[0x0,0x1][_0x4d24ef(0x6d2)](_0x9cbac1)&&(this[_0x4d24ef(0xab6)]=!![]);const _0x567bfd=VisuMZ[_0x4d24ef(0x5c8)][_0x4d24ef(0x6fe)][_0x4d24ef(0x5a6)](this,_0x9cbac1);return this[_0x4d24ef(0xbea)]!==undefined&&[0x0,0x1]['includes'](_0x9cbac1)&&(this[_0x4d24ef(0xab6)]=![]),_0x567bfd;},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x1b3)]=function(_0x5d7026){const _0x444742=_0x320868;return _0x5d7026[_0x444742(0x94e)]()?_0x5d7026[_0x444742(0xa2d)]()['length']||0x1:0x1;},Window_BattleLog['prototype'][_0x320868(0xac4)]=function(_0x4e9373,_0x5bb267){const _0xc88470=_0x320868;_0x4e9373&&_0x4e9373[_0xc88470(0x94e)]()&&_0x4e9373[_0xc88470(0x748)](_0x5bb267),this[_0xc88470(0x7af)]();},Window_BattleLog['prototype'][_0x320868(0x709)]=function(_0x366630){const _0x4277bd=_0x320868;_0x366630&&_0x366630['isActor']()&&_0x366630[_0x4277bd(0x207)](),this['callNextMethod']();},Game_Actor['prototype'][_0x320868(0x1e8)]=function(){const _0x7780b9=_0x320868;let _0x2208bf=_0x7780b9(0x1e8);if(this[_0x7780b9(0x138)](_0x2208bf))return this[_0x7780b9(0x312)][_0x2208bf];return this[_0x7780b9(0x312)][_0x2208bf]=this['createBattleUIOffsetX'](this[_0x7780b9(0xb94)]()),this[_0x7780b9(0x312)][_0x2208bf];},Game_Actor[_0x320868(0x5bb)][_0x320868(0xb8f)]=function(){const _0x1f283e=_0x320868;let _0x1c0c08=_0x1f283e(0xb8f);if(this[_0x1f283e(0x138)](_0x1c0c08))return this[_0x1f283e(0x312)][_0x1c0c08];return this[_0x1f283e(0x312)][_0x1c0c08]=this[_0x1f283e(0x592)](this[_0x1f283e(0xb94)]()),this[_0x1f283e(0x312)][_0x1c0c08];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x7df)]=Game_Enemy[_0x320868(0x5bb)]['setup'],Game_Enemy[_0x320868(0x5bb)][_0x320868(0x8ff)]=function(_0x226329,_0x53ebd4,_0x25b898){const _0x75b0c2=_0x320868;_0x226329=DataManager[_0x75b0c2(0x574)](_0x226329),VisuMZ['BattleCore'][_0x75b0c2(0x7df)][_0x75b0c2(0x5a6)](this,_0x226329,_0x53ebd4,_0x25b898),Imported[_0x75b0c2(0x357)]&&this[_0x75b0c2(0x512)](),this[_0x75b0c2(0x7c6)](),this['setupBattleCoreData'](),this[_0x75b0c2(0xb76)](),Imported[_0x75b0c2(0x357)]&&this[_0x75b0c2(0x360)]();},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x7c6)]=function(){const _0x38595b=_0x320868,_0x2d8225=VisuMZ[_0x38595b(0x5c8)][_0x38595b(0x1d7)][_0x38595b(0x14d)];this[_0x38595b(0x782)]=_0x2d8225[_0x38595b(0xc17)],this[_0x38595b(0xa78)]={},this[_0x38595b(0x44c)]();},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x6de)]=function(){const _0x576e5a=_0x320868,_0x4b758c=VisuMZ[_0x576e5a(0x5c8)][_0x576e5a(0x1d7)]['Enemy'],_0x4848ab=this[_0x576e5a(0x568)]()[_0x576e5a(0x418)];this[_0x576e5a(0xa78)]={'name':'','wtypeId':_0x4b758c['WtypeId'],'collapse':_0x4b758c[_0x576e5a(0x254)],'motionIdle':_0x4b758c[_0x576e5a(0x474)],'width':_0x4b758c[_0x576e5a(0xa58)]||0x40,'height':_0x4b758c[_0x576e5a(0x1c5)]||0x40,'anchorX':_0x4b758c[_0x576e5a(0x24a)]||0x0,'anchorY':_0x4b758c[_0x576e5a(0xaa8)]||0x0,'shadow':_0x4b758c[_0x576e5a(0x42f)]};_0x4848ab['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x576e5a(0x782)]=Number(RegExp['$1']));const _0x32b60e=this[_0x576e5a(0xa78)];if(_0x4848ab['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x32b60e[_0x576e5a(0x3e0)]=String(RegExp['$1']);else{if(_0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x41cc6c=String(RegExp['$1'])[_0x576e5a(0x867)](/[\r\n]+/)[_0x576e5a(0x236)]('');_0x32b60e['name']=DataManager[_0x576e5a(0x33a)](_0x41cc6c);}}_0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x32b60e['anchorX']=eval(RegExp['$1']),_0x32b60e['anchorY']=eval(RegExp['$2']));if(_0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW COLLAPSE>/i))_0x32b60e[_0x576e5a(0x93e)]=!![];else _0x4848ab['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x32b60e['collapse']=![]);if(_0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW SHOW SHADOW>/i))_0x32b60e[_0x576e5a(0xa43)]=!![];else _0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x32b60e[_0x576e5a(0xa43)]=![]);if(_0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x32b60e[_0x576e5a(0x896)]=String(RegExp['$1'])[_0x576e5a(0xc44)]()['trim']();else{if(_0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x5c0cf3=String(RegExp['$1'])[_0x576e5a(0x867)](/[\r\n]+/)['remove']('');_0x32b60e[_0x576e5a(0x896)]=DataManager['processRandomizedData'](_0x5c0cf3);}}_0x4848ab['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x32b60e[_0x576e5a(0x529)]=Number(RegExp['$1']),_0x32b60e[_0x576e5a(0x351)]=Number(RegExp['$2']));if(_0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW WEAPON: (.*)>/i))_0x32b60e['wtypeId']=DataManager[_0x576e5a(0x395)](RegExp['$1']);else{if(_0x4848ab[_0x576e5a(0x2e0)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x11dda9=String(RegExp['$1'])[_0x576e5a(0x867)](/[\r\n]+/)[_0x576e5a(0x236)](''),_0x76d15f=DataManager[_0x576e5a(0x33a)](_0x11dda9);_0x32b60e[_0x576e5a(0x827)]=DataManager['getWtypeIdWithName'](_0x76d15f);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x4c74ed=this[_0x576e5a(0x14b)]();for(const _0x43952e of _0x4c74ed){const _0x835ec3=this[_0x576e5a(0xacb)](_0x43952e)[_0x576e5a(0x828)]['toUpperCase']()[_0x576e5a(0x761)](),_0x44462e=_0x43952e[_0x576e5a(0x2c8)]()[_0x576e5a(0x761)]();if(_0x4848ab['match'](VisuMZ['ElementStatusCore'][_0x576e5a(0x3f9)]['SvBattlerSolo-%1-%2'[_0x576e5a(0x8b0)](_0x44462e,_0x835ec3)]))_0x32b60e[_0x576e5a(0x3e0)]=String(RegExp['$1']);else{if(_0x4848ab['match'](VisuMZ[_0x576e5a(0x153)]['RegExp'][_0x576e5a(0x1d1)[_0x576e5a(0x8b0)](_0x44462e,_0x835ec3)])){const _0x519ab5=String(RegExp['$1'])[_0x576e5a(0x867)](/[\r\n]+/)['remove']('');_0x32b60e['name']=DataManager['processRandomizedData'](_0x519ab5);}}if(_0x4848ab[_0x576e5a(0x2e0)](VisuMZ['ElementStatusCore'][_0x576e5a(0x3f9)][_0x576e5a(0x5e6)[_0x576e5a(0x8b0)](_0x44462e,_0x835ec3)]))_0x32b60e[_0x576e5a(0x827)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x4848ab['match'](VisuMZ[_0x576e5a(0x153)][_0x576e5a(0x3f9)][_0x576e5a(0xb3c)['format'](_0x44462e,_0x835ec3)])){const _0x21129f=String(RegExp['$1'])[_0x576e5a(0x867)](/[\r\n]+/)[_0x576e5a(0x236)](''),_0x2f1f7c=DataManager[_0x576e5a(0x33a)](_0x21129f);_0x32b60e[_0x576e5a(0x827)]=DataManager['getWtypeIdWithName'](_0x2f1f7c);}}if(_0x4848ab[_0x576e5a(0x2e0)](VisuMZ[_0x576e5a(0x153)][_0x576e5a(0x3f9)]['SvMotionIdleSolo-%1-%2'['format'](_0x44462e,_0x835ec3)]))_0x32b60e[_0x576e5a(0x896)]=String(RegExp['$1'])[_0x576e5a(0xc44)]()[_0x576e5a(0x761)]();else{if(_0x4848ab[_0x576e5a(0x2e0)](VisuMZ[_0x576e5a(0x153)][_0x576e5a(0x3f9)][_0x576e5a(0x1b9)[_0x576e5a(0x8b0)](_0x44462e,_0x835ec3)])){const _0x45d109=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x576e5a(0x236)]('');_0x32b60e[_0x576e5a(0x896)]=DataManager[_0x576e5a(0x33a)](_0x45d109);}}}}},Game_Enemy[_0x320868(0x5bb)][_0x320868(0xa52)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x320868(0x5bb)][_0x320868(0xc32)]=function(){const _0x25ae20=_0x320868;return this[_0x25ae20(0xa52)]();},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x3eb)]=function(_0x430e2e){const _0xfd8c5b=_0x320868;return this[_0xfd8c5b(0xa52)]();},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x3ed)]=function(){const _0x10ba01=_0x320868;if(this['enemy']()[_0x10ba01(0x418)][_0x10ba01(0x2e0)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x10ba01(0x5bb)][_0x10ba01(0x3ed)][_0x10ba01(0x5a6)](this);},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x513)]=function(){const _0x52c90e=_0x320868;if(this['enemy']()[_0x52c90e(0x418)][_0x52c90e(0x2e0)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype']['skills']=function(){const _0x4956a9=_0x320868,_0x4dff9d=[];for(const _0x26acce of this[_0x4956a9(0x568)]()[_0x4956a9(0x295)]){const _0x3748a3=$dataSkills[_0x26acce[_0x4956a9(0x2c4)]];if(_0x3748a3&&!_0x4dff9d['includes'](_0x3748a3))_0x4dff9d[_0x4956a9(0x205)](_0x3748a3);}return _0x4dff9d;},Game_Enemy[_0x320868(0x5bb)]['battleUIOffsetX']=function(){const _0x25cc18=_0x320868;let _0x101803=_0x25cc18(0x1e8);if(this[_0x25cc18(0x138)](_0x101803))return this['_cache'][_0x101803];return this['_cache'][_0x101803]=this['createBattleUIOffsetX'](this[_0x25cc18(0x568)]()),this[_0x25cc18(0x312)][_0x101803];},Game_Enemy[_0x320868(0x5bb)]['battleUIOffsetY']=function(){const _0x12f474=_0x320868;let _0x52b2cb=_0x12f474(0xb8f);if(this['checkCacheKey'](_0x52b2cb))return this[_0x12f474(0x312)][_0x52b2cb];return this['_cache'][_0x52b2cb]=this['createBattleUIOffsetY'](this['enemy']()),this[_0x12f474(0x312)][_0x52b2cb];},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x2a5)]=function(){const _0x3ef8e0=_0x320868;if(this[_0x3ef8e0(0xa78)]!==undefined)return this[_0x3ef8e0(0xa78)];return this['setupBattleCoreData'](),this[_0x3ef8e0(0xa78)];},Game_Enemy['prototype'][_0x320868(0xb85)]=function(){const _0x2ec160=_0x320868;return this[_0x2ec160(0x2a5)]()[_0x2ec160(0x3e0)]!=='';},Game_Enemy[_0x320868(0x5bb)]['svBattlerName']=function(){const _0x319d1a=_0x320868;return this[_0x319d1a(0x2a5)]()[_0x319d1a(0x3e0)];},Game_Enemy['prototype']['battlerSmoothImage']=function(){const _0x515e33=_0x320868;return this[_0x515e33(0xb85)]()?VisuMZ[_0x515e33(0x5c8)][_0x515e33(0x1d7)][_0x515e33(0x818)][_0x515e33(0x7f0)]:VisuMZ[_0x515e33(0x5c8)][_0x515e33(0x1d7)]['Enemy'][_0x515e33(0x7f0)];},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x63c)]=function(_0x175758){const _0x2ef6da=_0x320868;Game_Battler['prototype']['performAction'][_0x2ef6da(0x5a6)](this,_0x175758);if(this[_0x2ef6da(0xb85)]())this['performActionMotions'](_0x175758);},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x830)]=function(){const _0xe1817a=_0x320868,_0xd9bbbe=this[_0xe1817a(0x2a5)]()[_0xe1817a(0x827)]||0x0,_0x1bbdf0=$dataSystem[_0xe1817a(0x538)][_0xd9bbbe];if(_0x1bbdf0){if(_0x1bbdf0[_0xe1817a(0x97c)]===0x0)this[_0xe1817a(0x235)](_0xe1817a(0x120));else{if(_0x1bbdf0[_0xe1817a(0x97c)]===0x1)this[_0xe1817a(0x235)](_0xe1817a(0x509));else _0x1bbdf0[_0xe1817a(0x97c)]===0x2&&this[_0xe1817a(0x235)](_0xe1817a(0x69e));}}},Game_Enemy['prototype'][_0x320868(0x553)]=function(){const _0x46fafb=_0x320868,_0xd3259a=this[_0x46fafb(0x2a5)]()[_0x46fafb(0x827)]||0x0,_0x52b569=$dataSystem['attackMotions'][_0xd3259a];_0x52b569&&this[_0x46fafb(0x2a7)](_0x52b569['weaponImageId']);},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x1e3)]=function(){const _0x5df485=_0x320868,_0x163686=this['svBattlerData']()['wtypeId']||0x0;return $dataSystem[_0x5df485(0x538)][_0x163686];},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x310)]=function(_0x26d4de){const _0x2c9137=_0x320868;return this[_0x2c9137(0x1e3)]();},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x37d)]=function(){const _0x3b5873=_0x320868;Game_Battler['prototype'][_0x3b5873(0x37d)][_0x3b5873(0x5a6)](this),this[_0x3b5873(0x539)]()&&this[_0x3b5873(0xb85)]()&&this[_0x3b5873(0x235)](_0x3b5873(0x80d)),SoundManager[_0x3b5873(0x8fd)]();},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x46d)]=function(){const _0x5185da=_0x320868;Game_Battler['prototype']['performEvasion']['call'](this),this[_0x5185da(0x235)](_0x5185da(0xa49));},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x834)]=function(){const _0x3136ce=_0x320868;Game_Battler[_0x3136ce(0x5bb)][_0x3136ce(0x834)][_0x3136ce(0x5a6)](this),this['requestMotion'](_0x3136ce(0xa49));},Game_Enemy[_0x320868(0x5bb)]['performCounter']=function(){const _0x3b1c3a=_0x320868;Game_Battler['prototype'][_0x3b1c3a(0x903)][_0x3b1c3a(0x5a6)](this),this[_0x3b1c3a(0x830)]();},Game_Enemy['prototype'][_0x320868(0x3ab)]=function(){const _0x1f0429=_0x320868;if(this[_0x1f0429(0xb85)]()){if(this[_0x1f0429(0x171)]()>=0x1)return!![];return this['svBattlerData']()[_0x1f0429(0x93e)];}else return!![];},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x2bc)]=function(){const _0x30d3e7=_0x320868;return this['svBattlerData']()[_0x30d3e7(0x175)];},Game_Enemy[_0x320868(0x5bb)]['svBattlerAnchorY']=function(){const _0x44ee9c=_0x320868;return this[_0x44ee9c(0x2a5)]()[_0x44ee9c(0x9fc)];},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x930)]=function(){const _0x538f2b=_0x320868;return this[_0x538f2b(0x2a5)]()[_0x538f2b(0xa43)];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x3aa)]=Game_Enemy['prototype']['transform'],Game_Enemy[_0x320868(0x5bb)]['transform']=function(_0x19df29){const _0x199bb4=_0x320868;VisuMZ[_0x199bb4(0x5c8)]['Game_Enemy_transform'][_0x199bb4(0x5a6)](this,_0x19df29),this[_0x199bb4(0x7c6)](),this['setupBattleCoreData']();const _0x4858db=this[_0x199bb4(0xb31)]();_0x4858db&&(_0x4858db['_battlerName']=undefined,_0x4858db[_0x199bb4(0x9c3)](this));},Game_Enemy['prototype'][_0x320868(0x44c)]=function(){const _0x973cdb=_0x320868,_0xe384ca=VisuMZ[_0x973cdb(0x5c8)][_0x973cdb(0x1d7)]['Enemy'];this[_0x973cdb(0x28d)]=_0xe384ca[_0x973cdb(0xa0c)]??0x0;},Game_Enemy[_0x320868(0x5bb)]['isNameTemporarilyVisible']=function(){return this['_nameTempVisibleDuration']&&this['_nameTempVisibleDuration']>0x0;},Game_Enemy['prototype']['updateNameTempVisibility']=function(){const _0x478235=_0x320868;this[_0x478235(0x28d)]&&this[_0x478235(0x28d)]>0x0&&this['_nameTempVisibleDuration']--;},Game_Enemy[_0x320868(0x5bb)]['clearNameTempVisibility']=function(){const _0x7abe74=_0x320868;this[_0x7abe74(0x28d)]=0x0;},Game_Enemy[_0x320868(0x5bb)][_0x320868(0xb76)]=function(){const _0x4ff55b=_0x320868;this['clearBattleCoreAspects']();const _0x23be99=this[_0x4ff55b(0x568)]()[_0x4ff55b(0x418)]||'';if(_0x23be99['match'](/<ASPECT NAME:[ ](.*)>/i)){const _0x532a40=String(RegExp['$1']);this[_0x4ff55b(0x84b)]()[_0x4ff55b(0x3e0)]=_0x532a40[_0x4ff55b(0x8b0)](this[_0x4ff55b(0x11f)]());}_0x23be99[_0x4ff55b(0x2e0)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x4ff55b(0x84b)]()[_0x4ff55b(0xc49)]=Number(RegExp['$1'])),_0x23be99[_0x4ff55b(0x2e0)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x4ff55b(0x84b)]()[_0x4ff55b(0x348)]=String(RegExp['$1'])),_0x23be99[_0x4ff55b(0x2e0)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x4ff55b(0x84b)]()[_0x4ff55b(0x5b5)]=String(RegExp['$1']));},Game_Enemy[_0x320868(0x5bb)][_0x320868(0xb35)]=function(){const _0xd4702f=_0x320868,_0x1c87a6=VisuMZ[_0xd4702f(0x5c8)]['Settings'][_0xd4702f(0x14d)][_0xd4702f(0x824)]??_0xd4702f(0x504);this[_0xd4702f(0x90f)]={'name':_0x1c87a6[_0xd4702f(0x8b0)](this[_0xd4702f(0x11f)]()),'iconIndex':VisuMZ['BattleCore'][_0xd4702f(0x1d7)]['Enemy'][_0xd4702f(0x4e5)]??0x1a,'nameColor':VisuMZ[_0xd4702f(0x5c8)]['Settings'][_0xd4702f(0x14d)][_0xd4702f(0x9fa)]??'2','description':''};},Game_Enemy[_0x320868(0x5bb)]['getAspectData']=function(){const _0xedf1ba=_0x320868;if(this[_0xedf1ba(0x90f)]===undefined)this[_0xedf1ba(0xb76)]();return this[_0xedf1ba(0x90f)];},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x478)]=function(){const _0x742c9f=_0x320868;return(this[_0x742c9f(0x84b)]()[_0x742c9f(0x5b5)]||'')['length']>0x0;},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x521)]=function(){const _0x1ac83a=_0x320868;return VisuMZ['BattleCore']['Settings'][_0x1ac83a(0x31c)][_0x1ac83a(0x3d4)];},Game_Enemy['prototype']['damagePopupPosition']=function(){const _0x19df8e=_0x320868,_0x1a32be=this[_0x19df8e(0x568)]()?this[_0x19df8e(0x568)]()[_0x19df8e(0x418)]||'':'';if(_0x1a32be[_0x19df8e(0x2e0)](/<POPUP POSITION: HEAD>/i))return _0x19df8e(0x30d);else{if(_0x1a32be[_0x19df8e(0x2e0)](/<POPUP POSITION: CENTER>/i))return _0x19df8e(0xb10);else{if(_0x1a32be[_0x19df8e(0x2e0)](/<POPUP POSITION: BASE>/i))return _0x19df8e(0x1fa);}}return Game_BattlerBase['prototype'][_0x19df8e(0x521)][_0x19df8e(0x5a6)](this);},Game_BattlerBase['prototype'][_0x320868(0x6ec)]=function(){return 0x0;},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x6ec)]=function(){const _0x7b68d4=_0x320868,_0x113db0=this[_0x7b68d4(0x568)]()?this[_0x7b68d4(0x568)]()['note']||'':'';if(_0x113db0[_0x7b68d4(0x2e0)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x7b68d4(0x6ec)][_0x7b68d4(0x5a6)](this);},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x81d)]=function(){return 0x0;},Game_Enemy[_0x320868(0x5bb)][_0x320868(0x81d)]=function(){const _0x23a06a=_0x320868,_0x53bf38=this[_0x23a06a(0x568)]()?this[_0x23a06a(0x568)]()[_0x23a06a(0x418)]||'':'';if(_0x53bf38[_0x23a06a(0x2e0)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x23a06a(0x5bb)][_0x23a06a(0x81d)][_0x23a06a(0x5a6)](this);},Game_Unit[_0x320868(0x5bb)][_0x320868(0x306)]=function(_0x54d70c){const _0x4c8403=_0x320868;for(const _0x37d8ca of this[_0x4c8403(0xb0d)]()){if(_0x37d8ca)_0x37d8ca[_0x4c8403(0x306)](_0x54d70c);}},Game_Unit[_0x320868(0x5bb)][_0x320868(0xa85)]=function(){const _0x36d364=_0x320868,_0x38a2d6=this['aliveMembers']();return _0x38a2d6[Math[_0x36d364(0x4cb)](_0x38a2d6[_0x36d364(0x4c1)])];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x94b)]=Game_Party[_0x320868(0x5bb)][_0x320868(0xb43)],Game_Party[_0x320868(0x5bb)][_0x320868(0xb43)]=function(_0x139aa4){const _0x217432=_0x320868;VisuMZ[_0x217432(0x5c8)]['Game_Party_addActor'][_0x217432(0x5a6)](this,_0x139aa4),BattleManager[_0x217432(0xa6f)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x6eb)]=Game_Party[_0x320868(0x5bb)][_0x320868(0x1ea)],Game_Party[_0x320868(0x5bb)][_0x320868(0x1ea)]=function(_0x125d83){const _0x2098c8=_0x320868;VisuMZ[_0x2098c8(0x5c8)][_0x2098c8(0x6eb)][_0x2098c8(0x5a6)](this,_0x125d83),BattleManager['refreshStatusWindow']();},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc62)]=Game_Troop[_0x320868(0x5bb)][_0x320868(0x8ff)],Game_Troop[_0x320868(0x5bb)][_0x320868(0x8ff)]=function(_0x37ba23){const _0x37cc44=_0x320868;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x37cc44(0x5c3)](_0x37ba23),VisuMZ[_0x37cc44(0x5c8)][_0x37cc44(0xc62)][_0x37cc44(0x5a6)](this,_0x37ba23),this[_0x37cc44(0x6af)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc40)]=Game_Troop[_0x320868(0x5bb)][_0x320868(0x52f)],Game_Troop[_0x320868(0x5bb)][_0x320868(0x52f)]=function(){const _0x42bf03=_0x320868;let _0x541b1c=VisuMZ[_0x42bf03(0x5c8)][_0x42bf03(0xc40)][_0x42bf03(0x5a6)](this);return this[_0x42bf03(0x8b1)]&&(_0x541b1c*=this[_0x42bf03(0x8b1)]()),Math[_0x42bf03(0x5e5)](_0x541b1c);},Game_Troop[_0x320868(0x5bb)]['expRate']=function(){return 0x1;},Game_Troop[_0x320868(0x5bb)]['extendTroopMembers']=function(){const _0x5a448d=_0x320868,_0xc90ed9=DataManager[_0x5a448d(0x43f)](this[_0x5a448d(0x1b4)]()['id']);if(_0xc90ed9[_0x5a448d(0x2e0)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0xf11986=RegExp['$1']['split'](',')[_0x5a448d(0x200)](_0x4191c9=>Number(_0x4191c9));this[_0x5a448d(0x61c)](),this[_0x5a448d(0x76c)](_0xf11986);}},Game_Troop[_0x320868(0x5bb)][_0x320868(0x61c)]=function(){const _0x469dc9=_0x320868;let _0x13469c=_0x469dc9(0x2fb)+'\x0a';_0x13469c+=_0x469dc9(0x3f6),Imported[_0x469dc9(0x798)]&&(VisuMZ[_0x469dc9(0x82c)][_0x469dc9(0x43b)]<1.11&&(alert(_0x13469c[_0x469dc9(0x8b0)](_0x469dc9(0x54b))),SceneManager['exit']())),Imported[_0x469dc9(0x617)]&&(VisuMZ['BattleSystemCTB'][_0x469dc9(0x43b)]<1.19&&(alert(_0x13469c[_0x469dc9(0x8b0)](_0x469dc9(0x1d2))),SceneManager[_0x469dc9(0x9d9)]())),Imported[_0x469dc9(0x626)]&&(VisuMZ[_0x469dc9(0x2f4)]['version']<1.15&&(alert(_0x13469c[_0x469dc9(0x8b0)](_0x469dc9(0x161))),SceneManager[_0x469dc9(0x9d9)]()));},Game_Troop['prototype'][_0x320868(0x76c)]=function(_0x3e413d){const _0x1e92d0=_0x320868;this[_0x1e92d0(0x1ed)]={};for(const _0x148b41 of this[_0x1e92d0(0xb0d)]()){if(!_0x148b41)continue;_0x148b41['setLetter']('');}for(const _0x3cd1fa of _0x3e413d){const _0x4e05cc=$dataTroops[_0x3cd1fa];if(_0x4e05cc)this[_0x1e92d0(0xa08)](_0x4e05cc);}this[_0x1e92d0(0x40c)]();},Game_Troop['prototype'][_0x320868(0xa08)]=function(_0x2f6550){const _0x3967df=_0x320868;for(const _0x560e9e of _0x2f6550[_0x3967df(0xb0d)]){if($dataEnemies[_0x560e9e['enemyId']]){const _0x28a85f=_0x560e9e['enemyId'],_0x2f41ec=_0x560e9e['x'],_0x43bfd7=_0x560e9e['y'],_0x2835d8=new Game_Enemy(_0x28a85f,_0x2f41ec,_0x43bfd7);_0x560e9e[_0x3967df(0x2b3)]&&_0x2835d8[_0x3967df(0x190)](),this[_0x3967df(0xa62)]['push'](_0x2835d8);}}},VisuMZ[_0x320868(0x5c8)]['Game_Map_setupBattleback']=Game_Map[_0x320868(0x5bb)][_0x320868(0xa81)],Game_Map[_0x320868(0x5bb)]['setupBattleback']=function(){const _0xaac1c4=_0x320868;VisuMZ['BattleCore'][_0xaac1c4(0x71c)]['call'](this),this['setupBattlebackBattleCore']();},Game_Map[_0x320868(0x5bb)][_0x320868(0xade)]=function(){const _0x48256a=_0x320868;this[_0x48256a(0xb01)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x126f42=$dataMap[_0x48256a(0x418)];if(!_0x126f42)return;const _0x5ac404=_0x126f42['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x5ac404)for(const _0x4214e0 of _0x5ac404){_0x4214e0[_0x48256a(0x2e0)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x1b572f=Number(RegExp['$1']),_0x41f3ae=Number(RegExp['$2']),_0x2b917e=_0x41f3ae===0x1?this[_0x48256a(0xb01)]:this[_0x48256a(0x3cb)],_0x3a5d2a=String(RegExp['$3']);_0x2b917e[_0x1b572f]=_0x3a5d2a;}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x5ab)]=Game_Map[_0x320868(0x5bb)][_0x320868(0x5b6)],Game_Map[_0x320868(0x5bb)][_0x320868(0x5b6)]=function(){const _0x51841d=_0x320868;if(!BattleManager['isBattleTest']()){const _0x11b0cd=$gamePlayer[_0x51841d(0x91e)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x51841d(0xb01)]&&this[_0x51841d(0xb01)][_0x11b0cd])return this[_0x51841d(0xb01)][_0x11b0cd];}return VisuMZ[_0x51841d(0x5c8)][_0x51841d(0x5ab)][_0x51841d(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x3b9)]=Game_Map[_0x320868(0x5bb)][_0x320868(0x773)],Game_Map[_0x320868(0x5bb)][_0x320868(0x773)]=function(){const _0x24ed82=_0x320868;if(!BattleManager[_0x24ed82(0x685)]()){const _0x200d1e=$gamePlayer[_0x24ed82(0x91e)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this['_regionBattleback2'][_0x200d1e])return this[_0x24ed82(0x3cb)][_0x200d1e];}return VisuMZ[_0x24ed82(0x5c8)][_0x24ed82(0x3b9)][_0x24ed82(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x2b5)]=Game_Map[_0x320868(0x5bb)][_0x320868(0x4d3)],Game_Map[_0x320868(0x5bb)][_0x320868(0x4d3)]=function(){const _0xe5b1d8=_0x320868;let _0x4dc465=JsonEx[_0xe5b1d8(0x1b2)](VisuMZ[_0xe5b1d8(0x5c8)][_0xe5b1d8(0x2b5)][_0xe5b1d8(0x5a6)](this));return VisuMZ[_0xe5b1d8(0x5c8)][_0xe5b1d8(0x94d)](_0x4dc465);},VisuMZ['BattleCore'][_0x320868(0x94d)]=function(_0x17ea35){const _0x3546a2=_0x320868;var _0x4eb1d2,_0x5e5a8d,_0x26ec5b;for(_0x26ec5b=_0x17ea35[_0x3546a2(0x4c1)]-0x1;_0x26ec5b>0x0;_0x26ec5b--){_0x4eb1d2=Math['floor'](Math['random']()*(_0x26ec5b+0x1)),_0x5e5a8d=_0x17ea35[_0x26ec5b],_0x17ea35[_0x26ec5b]=_0x17ea35[_0x4eb1d2],_0x17ea35[_0x4eb1d2]=_0x5e5a8d;}return _0x17ea35;},VisuMZ['BattleCore'][_0x320868(0x43e)]=Game_Interpreter['prototype'][_0x320868(0x33b)],Game_Interpreter[_0x320868(0x5bb)][_0x320868(0x33b)]=function(_0x25c134){const _0x24df94=_0x320868;return $gameTemp[_0x24df94(0x95a)](this),VisuMZ[_0x24df94(0x5c8)]['Game_Interpreter_PluginCommand'][_0x24df94(0x5a6)](this,_0x25c134);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x407)]=Game_Interpreter[_0x320868(0x5bb)]['updateWaitMode'],Game_Interpreter['prototype'][_0x320868(0xada)]=function(){const _0x383df9=_0x320868;if(SceneManager[_0x383df9(0x96d)]())switch(this['_waitMode']){case _0x383df9(0x727):if(Imported[_0x383df9(0xa68)]){if($gameScreen['battleCameraData']()[_0x383df9(0x805)]>0x0)return!![];this['_waitMode']='';}break;case'battleAnimation':if(BattleManager[_0x383df9(0xa26)][_0x383df9(0x5df)]())return!![];this['_waitMode']='';break;case _0x383df9(0xbab):if(BattleManager[_0x383df9(0xa26)]['isAnyBattleBalloonPlaying']())return!![];this[_0x383df9(0x8b3)]='';break;case _0x383df9(0xab4):if(Imported[_0x383df9(0xa68)]){if($gameScreen['battleCameraData']()[_0x383df9(0xbff)]>0x0)return!![];if($gameScreen[_0x383df9(0x40b)]()[_0x383df9(0x8f3)]>0x0)return!![];this[_0x383df9(0x8b3)]='';}break;case _0x383df9(0x578):if(BattleManager['_spriteset'][_0x383df9(0x2f9)]())return!![];this['_waitMode']='';break;case'battleFloat':if(BattleManager['_spriteset']['isAnyoneFloating']())return!![];this[_0x383df9(0x8b3)]='';break;case _0x383df9(0xbc1):if(BattleManager['_spriteset']['isAnyoneJumping']())return!![];this[_0x383df9(0x8b3)]='';break;case'battlelog':if(BattleManager[_0x383df9(0x8f1)][_0x383df9(0x3de)]())return!![];this[_0x383df9(0x8b3)]='';break;case _0x383df9(0x3fd):if(BattleManager[_0x383df9(0xa26)]['isAnyoneMoving']())return!![];this[_0x383df9(0x8b3)]='';break;case _0x383df9(0x5e3):if(BattleManager[_0x383df9(0xa26)][_0x383df9(0x52a)]())return!![];this['_waitMode']='';break;case _0x383df9(0xa20):if(BattleManager['_spriteset'][_0x383df9(0x547)]())return!![];this[_0x383df9(0x8b3)]='';break;case'battleSpriteSkew':if(BattleManager[_0x383df9(0xa26)][_0x383df9(0x21e)]())return!![];this[_0x383df9(0x8b3)]='';break;case _0x383df9(0x22a):if(Imported[_0x383df9(0x945)]){if(BattleManager[_0x383df9(0xa26)][_0x383df9(0x50e)]())return!![];this[_0x383df9(0x8b3)]='';}break;case _0x383df9(0xadf):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x383df9(0x40b)]()['skewDuration']>0x0)return!![];this[_0x383df9(0x8b3)]='';}break;case _0x383df9(0x447):if(BattleManager['_spriteset']['isAnyoneSpinning']())return!![];this[_0x383df9(0x8b3)]='';break;case _0x383df9(0x211):if(Imported[_0x383df9(0xa68)]){if($gameScreen['battleCameraData']()[_0x383df9(0x185)]>0x0)return!![];this['_waitMode']='';}break;case _0x383df9(0x7f8):if(Imported[_0x383df9(0x4e4)]){if(BattleManager[_0x383df9(0xa26)]['isAnyoneInjectAniPrepping']){if(BattleManager[_0x383df9(0xa26)][_0x383df9(0xbf5)]())return!![];this[_0x383df9(0x8b3)]=_0x383df9(0x602);}else this['_waitMode']='';break;}break;case _0x383df9(0x602):if(Imported[_0x383df9(0x4e4)]){if(BattleManager[_0x383df9(0xa26)][_0x383df9(0x2da)]())return!![];this[_0x383df9(0x8b3)]='';}break;}return VisuMZ[_0x383df9(0x5c8)]['Game_Interpreter_updateWaitMode'][_0x383df9(0x5a6)](this);},VisuMZ['BattleCore'][_0x320868(0x9d7)]=Game_Interpreter['prototype'][_0x320868(0x7ee)],Game_Interpreter[_0x320868(0x5bb)][_0x320868(0x7ee)]=function(_0x39485a){const _0x314639=_0x320868;return!$gameParty[_0x314639(0x3f3)]()?this[_0x314639(0x5af)](_0x39485a):VisuMZ[_0x314639(0x5c8)][_0x314639(0x9d7)][_0x314639(0x5a6)](this,_0x39485a);},Game_Interpreter['prototype']['command3011']=function(_0x8f7e56){const _0xfd6b29=_0x320868;return VisuMZ[_0xfd6b29(0x5c8)][_0xfd6b29(0x9d7)][_0xfd6b29(0x5a6)](this,_0x8f7e56),BattleManager[_0xfd6b29(0x6f3)](_0x223de1=>{const _0x28dade=_0xfd6b29;this[_0x28dade(0x47c)][this[_0x28dade(0x729)]]=_0x223de1;}),!![];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x85b)]=function(_0x3c227a){const _0x5f34e8=_0x320868,_0x3b93e4=$dataCommonEvents[_0x3c227a];if(!_0x3b93e4)return![];if(_0x3b93e4[_0x5f34e8(0x69b)][_0x5f34e8(0x4c1)]<=0x1)return![];return!![];},Game_Interpreter[_0x320868(0x5bb)][_0x320868(0x5af)]=function(_0xab12ad){const _0x8c6b1d=_0x320868,_0x4be345=VisuMZ['BattleCore'][_0x8c6b1d(0x1d7)][_0x8c6b1d(0x96c)],_0x184a4f=_0x4be345[_0x8c6b1d(0x605)],_0x35c55e=$dataCommonEvents[_0x184a4f];if(_0x35c55e&&VisuMZ[_0x8c6b1d(0x5c8)][_0x8c6b1d(0x85b)](_0x184a4f)){const _0x187456=this[_0x8c6b1d(0xa4b)]()?this[_0x8c6b1d(0x7c8)]:0x0,_0x12947b=_0x35c55e[_0x8c6b1d(0x69b)];this[_0x8c6b1d(0x47f)](_0x12947b,_0x187456),this[_0x8c6b1d(0x498)]=JsonEx[_0x8c6b1d(0x1b2)](this[_0x8c6b1d(0x498)]);const _0x3815be={'code':0xbc3,'indent':this[_0x8c6b1d(0x729)],'parameters':JsonEx[_0x8c6b1d(0x1b2)](_0xab12ad)};return this[_0x8c6b1d(0x498)][_0x8c6b1d(0x272)](this[_0x8c6b1d(0x4df)]+0x1,0x0,_0x3815be),!![];}else return VisuMZ[_0x8c6b1d(0x5c8)][_0x8c6b1d(0x9d7)]['call'](this,_0xab12ad);},VisuMZ[_0x320868(0x5c8)]['BattleManager_onEncounter']=BattleManager[_0x320868(0x90e)],BattleManager[_0x320868(0x90e)]=function(){const _0x4f54ee=_0x320868;VisuMZ['BattleCore'][_0x4f54ee(0x6a4)][_0x4f54ee(0x5a6)](this),this[_0x4f54ee(0x23b)]();},BattleManager[_0x320868(0x23b)]=function(){const _0x58b37b=_0x320868,_0x2efa4f=VisuMZ['BattleCore'][_0x58b37b(0x1d7)][_0x58b37b(0x96c)],_0x51d772=_0x2efa4f[_0x58b37b(0x605)];_0x51d772&&VisuMZ[_0x58b37b(0x5c8)]['CheckMapBattleEventValid'](_0x51d772)&&(this[_0x58b37b(0x633)]=!![],$gameTemp[_0x58b37b(0x278)](_0x2efa4f[_0x58b37b(0x605)]),$gameMap['updateInterpreter'](),$gameMap[_0x58b37b(0xaf0)]['_preBattleCommonEvent']=!![]),_0x2efa4f[_0x58b37b(0xa97)]>0x0&&(this[_0x58b37b(0xa51)]=!![]);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x528)]=Scene_Map['prototype'][_0x320868(0xc41)],Scene_Map[_0x320868(0x5bb)][_0x320868(0xc41)]=function(){const _0x3fce17=_0x320868;if(BattleManager[_0x3fce17(0x633)])return;VisuMZ[_0x3fce17(0x5c8)]['Scene_Map_updateCallMenu']['call'](this);},VisuMZ['BattleCore'][_0x320868(0xc01)]=Scene_Map['prototype'][_0x320868(0x3e1)],Scene_Map[_0x320868(0x5bb)][_0x320868(0x3e1)]=function(){const _0x5e2db8=_0x320868;BattleManager[_0x5e2db8(0x633)]?this[_0x5e2db8(0x5b7)]():VisuMZ[_0x5e2db8(0x5c8)]['Scene_Map_launchBattle'][_0x5e2db8(0x5a6)](this);},Scene_Map[_0x320868(0x5bb)]['battleCorePreBattleCommonEvent']=function(){const _0x4ea69a=_0x320868;this[_0x4ea69a(0x9d2)]=!![];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x225)]=SceneManager[_0x320868(0x1ae)],SceneManager['isSceneChanging']=function(){const _0x43cc58=_0x320868;if(BattleManager[_0x43cc58(0x633)])return![];return VisuMZ[_0x43cc58(0x5c8)][_0x43cc58(0x225)]['call'](this);},VisuMZ[_0x320868(0x5c8)]['Game_Interpreter_terminate']=Game_Interpreter['prototype'][_0x320868(0x816)],Game_Interpreter[_0x320868(0x5bb)]['terminate']=function(){const _0x5ee853=_0x320868;VisuMZ[_0x5ee853(0x5c8)]['Game_Interpreter_terminate'][_0x5ee853(0x5a6)](this),this['_preBattleCommonEvent']&&(this[_0x5ee853(0x82e)]=undefined,SceneManager[_0x5ee853(0x64a)][_0x5ee853(0x5d5)]());},Scene_Map['prototype']['battleCoreResumeLaunchBattle']=function(){const _0x5ae3e8=_0x320868;BattleManager[_0x5ae3e8(0x633)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x5ae3e8(0x4a7)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x1e0)]=Scene_Map[_0x320868(0x5bb)]['initialize'],Scene_Map[_0x320868(0x5bb)][_0x320868(0x136)]=function(){const _0x566885=_0x320868;VisuMZ[_0x566885(0x5c8)][_0x566885(0x1e0)][_0x566885(0x5a6)](this),BattleManager['_battleCoreBattleResumeAfter']&&(this['_active']=!![],BattleManager[_0x566885(0x29d)]=undefined);},VisuMZ['BattleCore'][_0x320868(0x3a7)]=Scene_Map['prototype'][_0x320868(0x136)],Scene_Map[_0x320868(0x5bb)][_0x320868(0x136)]=function(){const _0xf1cc25=_0x320868;VisuMZ['BattleCore'][_0xf1cc25(0x3a7)]['call'](this),$gameTemp[_0xf1cc25(0x614)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x99f)]=Scene_ItemBase[_0x320868(0x5bb)][_0x320868(0x935)],Scene_ItemBase[_0x320868(0x5bb)][_0x320868(0x935)]=function(){const _0x79dc6c=_0x320868;VisuMZ[_0x79dc6c(0x5c8)][_0x79dc6c(0x99f)][_0x79dc6c(0x5a6)](this);if(this['item']()[_0x79dc6c(0x418)][_0x79dc6c(0x2e0)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x79dc6c(0xc47)]()['note'][_0x79dc6c(0x2e0)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x79dc6c(0x5cd)]=[]),DataManager[_0x79dc6c(0x87f)](this[_0x79dc6c(0xc47)]())&&($gameTemp[_0x79dc6c(0x5cd)]=[]);},VisuMZ[_0x320868(0x5c8)]['Scene_Options_maxCommands']=Scene_Options[_0x320868(0x5bb)]['maxCommands'],Scene_Options[_0x320868(0x5bb)][_0x320868(0x88e)]=function(){const _0x3c69f1=_0x320868;let _0x402d0a=VisuMZ[_0x3c69f1(0x5c8)][_0x3c69f1(0x7a4)][_0x3c69f1(0x5a6)](this);const _0x5431ca=VisuMZ['BattleCore'][_0x3c69f1(0x1d7)];if(_0x5431ca['AutoBattle'][_0x3c69f1(0x9e6)]&&_0x5431ca[_0x3c69f1(0x252)][_0x3c69f1(0x122)])_0x402d0a+=0x2;if(_0x5431ca[_0x3c69f1(0x1b6)][_0x3c69f1(0x9e6)]&&_0x5431ca[_0x3c69f1(0x1b6)][_0x3c69f1(0x122)])_0x402d0a+=0x1;return _0x402d0a;},VisuMZ[_0x320868(0x5c8)]['Scene_Battle_initialize']=Scene_Battle[_0x320868(0x5bb)]['initialize'],Scene_Battle['prototype'][_0x320868(0x136)]=function(){const _0x18418e=_0x320868;VisuMZ[_0x18418e(0x5c8)]['Scene_Battle_initialize']['call'](this),this['clearOnceParallelInterpreters']();},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc66)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x5f7)],Scene_Battle[_0x320868(0x5bb)]['start']=function(){const _0x2e3cc0=_0x320868;SceneManager[_0x2e3cc0(0x4a8)]()?(Scene_Message[_0x2e3cc0(0x5bb)]['start'][_0x2e3cc0(0x5a6)](this),this[_0x2e3cc0(0xa26)]&&this['_spriteset'][_0x2e3cc0(0x77d)](),BattleManager[_0x2e3cc0(0x7d6)]&&BattleManager[_0x2e3cc0(0x35f)]()):(VisuMZ[_0x2e3cc0(0x5c8)][_0x2e3cc0(0xc66)]['call'](this),$gameTroop[_0x2e3cc0(0x919)]());},VisuMZ[_0x320868(0x5c8)][_0x320868(0x661)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x4a7)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x4a7)]=function(){const _0x4a399d=_0x320868;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x4a399d(0x5bb)]['stop']['call'](this):VisuMZ[_0x4a399d(0x5c8)][_0x4a399d(0x661)][_0x4a399d(0x5a6)](this);},VisuMZ['BattleCore']['Scene_Battle_terminate']=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x816)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x816)]=function(){const _0x1f28a1=_0x320868;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x1f28a1(0x5bb)][_0x1f28a1(0x816)]['call'](this):VisuMZ['BattleCore'][_0x1f28a1(0x51e)][_0x1f28a1(0x5a6)](this),$gameTemp[_0x1f28a1(0x24c)](),this[_0x1f28a1(0x5fe)]();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x9bf)]=function(){const _0xbf48a8=_0x320868;if(ConfigManager[_0xbf48a8(0x14f)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0xbf48a8(0xc5e)];else{if(this[_0xbf48a8(0x2d1)]()===_0xbf48a8(0xba8))return![];else{return Scene_Message[_0xbf48a8(0x5bb)]['isRightInputMode'][_0xbf48a8(0x5a6)](this);;}}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x70c)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0xafd)],Scene_Battle[_0x320868(0x5bb)]['createCancelButton']=function(){const _0x47e9ad=_0x320868;VisuMZ[_0x47e9ad(0x5c8)][_0x47e9ad(0x70c)][_0x47e9ad(0x5a6)](this),this[_0x47e9ad(0x2d1)]()===_0x47e9ad(0xba8)&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0x320868(0x5bb)]['setVisibleUI']=function(_0x119f4e){const _0x32db6c=_0x320868;_0x119f4e?(this[_0x32db6c(0x34b)]['x']=(Graphics[_0x32db6c(0x529)]-Graphics['boxWidth'])/0x2,this[_0x32db6c(0x34b)]['y']=(Graphics['height']-Graphics[_0x32db6c(0x66c)])/0x2):(this[_0x32db6c(0x34b)]['x']=Graphics['width']*0xa,this[_0x32db6c(0x34b)]['y']=Graphics[_0x32db6c(0x351)]*0xa);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x7f5)]=Scene_Battle['prototype'][_0x320868(0x8eb)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x8eb)]=function(){const _0x1cc309=_0x320868,_0x16ed90=BattleManager[_0x1cc309(0xb94)]();VisuMZ[_0x1cc309(0x5c8)]['Scene_Battle_selectNextCommand'][_0x1cc309(0x5a6)](this);if(_0x16ed90){if(_0x16ed90===BattleManager['actor']())return;if(_0x16ed90===BattleManager[_0x1cc309(0xaad)])return;if(_0x16ed90[_0x1cc309(0xb31)]())_0x16ed90[_0x1cc309(0xb31)]()['stepBack']();}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x61d)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x48a)],Scene_Battle['prototype'][_0x320868(0x48a)]=function(){const _0x59f01b=_0x320868,_0x5072b1=BattleManager[_0x59f01b(0xb94)]();if(_0x5072b1&&_0x5072b1['battler'])_0x5072b1[_0x59f01b(0xb31)]()[_0x59f01b(0x794)]();VisuMZ[_0x59f01b(0x5c8)][_0x59f01b(0x61d)][_0x59f01b(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x2e1)]=Scene_Battle[_0x320868(0x5bb)]['createAllWindows'],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x850)]=function(){const _0x6eea3e=_0x320868;this[_0x6eea3e(0x8b6)](),VisuMZ[_0x6eea3e(0x5c8)]['Scene_Battle_createAllWindows'][_0x6eea3e(0x5a6)](this),this[_0x6eea3e(0x5cf)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x8e6)]=Scene_Battle[_0x320868(0x5bb)]['logWindowRect'],Scene_Battle['prototype'][_0x320868(0x246)]=function(){const _0x2a0fc7=_0x320868;if(VisuMZ['BattleCore'][_0x2a0fc7(0x1d7)][_0x2a0fc7(0xb56)][_0x2a0fc7(0x1c9)])return VisuMZ[_0x2a0fc7(0x5c8)]['Settings'][_0x2a0fc7(0xb56)]['BattleLogRectJS'][_0x2a0fc7(0x5a6)](this);return VisuMZ[_0x2a0fc7(0x5c8)][_0x2a0fc7(0x8e6)]['call'](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x92a)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x8c2)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x8c2)]=function(){const _0x12a839=_0x320868;VisuMZ[_0x12a839(0x5c8)][_0x12a839(0x92a)]['call'](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x1a6)]=function(){const _0x1c4e8f=_0x320868,_0x1c061c=this[_0x1c4e8f(0x6c9)];_0x1c061c[_0x1c4e8f(0x163)](_0x1c4e8f(0xbf2),this[_0x1c4e8f(0x7fc)][_0x1c4e8f(0x1cc)](this)),_0x1c061c[_0x1c4e8f(0x163)](_0x1c4e8f(0x735),this['commandOptions'][_0x1c4e8f(0x1cc)](this));const _0x18f35a=this[_0x1c4e8f(0x2d1)]();switch(_0x18f35a){case'xp':case _0x1c4e8f(0xa42):return this[_0x1c4e8f(0x6c9)][_0x1c4e8f(0xc2d)](0x1);break;}},Scene_Battle[_0x320868(0x5bb)]['commandAutoBattle']=function(){const _0x255f8f=_0x320868;BattleManager[_0x255f8f(0x16d)]=!![],$gameParty['makeActions'](),this['selectNextCommand'](),BattleManager[_0x255f8f(0xb9a)]()&&(BattleManager[_0x255f8f(0x6b9)]=![]);},Scene_Battle[_0x320868(0x5bb)]['commandOptions']=function(){const _0x49ed47=_0x320868;this[_0x49ed47(0x621)]()?(this[_0x49ed47(0xc24)]=!![],this[_0x49ed47(0x8f1)][_0x49ed47(0x205)]('addText',VisuMZ[_0x49ed47(0x5c8)][_0x49ed47(0x1d7)]['PartyCmd'][_0x49ed47(0x3a8)])):this[_0x49ed47(0xa5e)]();},Scene_Battle['prototype'][_0x320868(0x621)]=function(){const _0x32244b=_0x320868;return BattleManager[_0x32244b(0x76e)]();},Scene_Battle[_0x320868(0x5bb)]['callOptions']=function(){const _0x3e06bc=_0x320868;this[_0x3e06bc(0xc24)]=![],this['_spriteset'][_0x3e06bc(0x77d)](),this[_0x3e06bc(0x34b)][_0x3e06bc(0x6b7)]=![];if(BattleManager['isBattleTest']())($dataSystem[_0x3e06bc(0x5b6)]||$dataSystem[_0x3e06bc(0x773)])&&SceneManager[_0x3e06bc(0x46b)]();else($gameMap[_0x3e06bc(0x5b6)]()||$gameMap['battleback2Name']())&&SceneManager[_0x3e06bc(0x46b)]();SceneManager[_0x3e06bc(0x205)](Scene_Options),BattleManager[_0x3e06bc(0xb9a)]()&&(BattleManager[_0x3e06bc(0x7d6)]=BattleManager[_0x3e06bc(0xb94)]());},VisuMZ['BattleCore'][_0x320868(0x19b)]=Scene_Battle['prototype']['updateBattleProcess'],Scene_Battle['prototype']['updateBattleProcess']=function(){const _0x14f985=_0x320868;VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess'][_0x14f985(0x5a6)](this);if(this[_0x14f985(0xc24)]&&!BattleManager['_subject'])this[_0x14f985(0xa5e)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x5c5)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x77d)],Scene_Battle['prototype']['update']=function(){const _0x297cfa=_0x320868;VisuMZ[_0x297cfa(0x5c8)][_0x297cfa(0x5c5)][_0x297cfa(0x5a6)](this),this[_0x297cfa(0x78b)]();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x5cf)]=function(){const _0x3b21c4=_0x320868,_0x35e2c6=this[_0x3b21c4(0xb3b)]();this[_0x3b21c4(0x39b)]=new Window_AutoBattleCancel(_0x35e2c6),this[_0x3b21c4(0x39b)]['hide'](),this['addChild'](this[_0x3b21c4(0x39b)]);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0xb3b)]=function(){const _0x14e8f3=_0x320868;return VisuMZ[_0x14e8f3(0x5c8)][_0x14e8f3(0x1d7)][_0x14e8f3(0x252)]['AutoBattleRect']['call'](this);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x5fe)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x320868(0x5bb)]['updateOnceParallelInterpreters']=function(){const _0x3f67c2=_0x320868;if(!this[_0x3f67c2(0xc11)])return;for(const _0x1d0bb5 of this[_0x3f67c2(0xc11)]){_0x1d0bb5&&_0x1d0bb5[_0x3f67c2(0x77d)]();}},Scene_Battle[_0x320868(0x5bb)]['playOnceParallelInterpreter']=function(_0x349ecb){const _0x1ba608=_0x320868,_0x138acd=$dataCommonEvents[_0x349ecb];if(!_0x138acd)return;const _0x460cd1=new Game_BattleOnceParallelInterpreter();this[_0x1ba608(0x2ee)](_0x460cd1),_0x460cd1[_0x1ba608(0x289)](_0x349ecb);},Scene_Battle['prototype'][_0x320868(0x2ee)]=function(_0x5854aa){const _0x5c05b6=_0x320868;this[_0x5c05b6(0xc11)]=this[_0x5c05b6(0xc11)]||[],this[_0x5c05b6(0xc11)][_0x5c05b6(0x205)](_0x5854aa);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x84a)]=function(_0x296372){const _0x432e3a=_0x320868;this[_0x432e3a(0xc11)]=this['_onceParallelInterpreters']||[],this[_0x432e3a(0xc11)][_0x432e3a(0x236)](_0x296372);},Game_Troop[_0x320868(0x5bb)][_0x320868(0x919)]=function(){const _0xd90df6=_0x320868;for(const _0x361a81 of this[_0xd90df6(0x1b4)]()[_0xd90df6(0xa37)]){if(!this[_0xd90df6(0x74c)](_0x361a81))continue;SceneManager[_0xd90df6(0x64a)][_0xd90df6(0x15a)](_0x361a81);}},Game_Troop[_0x320868(0x5bb)][_0x320868(0x74c)]=function(_0xec4da5){const _0x45639c=_0x320868;if(!_0xec4da5)return;for(const _0x1cf75f of _0xec4da5[_0x45639c(0x69b)]){if([0x6c,0x198][_0x45639c(0x6d2)](_0x1cf75f['code'])){const _0x2734f2=_0x1cf75f[_0x45639c(0x556)][0x0];if(_0x2734f2['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x320868(0x5bb)]['playOnceParallelTroopPage']=function(_0x35e7e3){const _0x59c528=_0x320868;if(!_0x35e7e3)return;const _0x41f733=new Game_BattleOnceParallelInterpreter();this[_0x59c528(0x2ee)](_0x41f733),_0x41f733[_0x59c528(0x987)](_0x35e7e3);};function Game_BattleOnceParallelInterpreter(){const _0x8684d7=_0x320868;this[_0x8684d7(0x136)](...arguments);}Game_BattleOnceParallelInterpreter[_0x320868(0x5bb)]=Object['create'](Game_Interpreter[_0x320868(0x5bb)]),Game_BattleOnceParallelInterpreter[_0x320868(0x5bb)][_0x320868(0xc58)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x320868(0x5bb)][_0x320868(0x289)]=function(_0x1a40f2){const _0x3012e3=_0x320868,_0x25d1cf=$dataCommonEvents[_0x1a40f2];_0x25d1cf?this[_0x3012e3(0x8ff)](_0x25d1cf[_0x3012e3(0x69b)],0x0):this[_0x3012e3(0x816)]();},Game_BattleOnceParallelInterpreter[_0x320868(0x5bb)]['terminate']=function(){const _0x2c0f9b=_0x320868;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x2c0f9b(0x64a)][_0x2c0f9b(0x84a)](this),Game_Interpreter['prototype'][_0x2c0f9b(0x816)][_0x2c0f9b(0x5a6)](this);},Game_BattleOnceParallelInterpreter[_0x320868(0x5bb)][_0x320868(0x987)]=function(_0xb5057f){const _0x5184d9=_0x320868;_0xb5057f?this[_0x5184d9(0x8ff)](_0xb5057f[_0x5184d9(0x69b)],0x0):this[_0x5184d9(0x816)]();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x1e7)]=function(){const _0x8cbfae=_0x320868;return VisuMZ[_0x8cbfae(0x5c8)][_0x8cbfae(0x1d7)][_0x8cbfae(0x24b)]['DisablePartyCmd'];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x399)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x7a8)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x7a8)]=function(){const _0x319d96=_0x320868;this['isPartyCommandWindowDisabled']()?this[_0x319d96(0xb3e)]():VisuMZ[_0x319d96(0x5c8)][_0x319d96(0x399)][_0x319d96(0x5a6)](this);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0xb3e)]=function(){const _0xf732b2=_0x320868;if(BattleManager[_0xf732b2(0xba7)]())this[_0xf732b2(0x8eb)]();else BattleManager[_0xf732b2(0xb9a)]()&&VisuMZ[_0xf732b2(0x5c8)][_0xf732b2(0x399)][_0xf732b2(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x4fc)]=Scene_Battle[_0x320868(0x5bb)]['commandFight'],Scene_Battle['prototype']['commandFight']=function(){const _0x4c6edd=_0x320868;BattleManager[_0x4c6edd(0xb9a)]()?(this[_0x4c6edd(0x6a7)](),this[_0x4c6edd(0x20d)]()):VisuMZ['BattleCore'][_0x4c6edd(0x4fc)]['call'](this);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x6a7)]=function(){const _0x4cf933=_0x320868;if(!VisuMZ[_0x4cf933(0x5c8)][_0x4cf933(0xad8)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return;const _0xbb4a91=$gameParty['aliveMembers']()[_0x4cf933(0x477)](_0x215b7a=>_0x215b7a[_0x4cf933(0xc5f)]()&&_0x215b7a['canInput']());BattleManager[_0x4cf933(0x90c)]=_0xbb4a91[0x0]||null,BattleManager[_0x4cf933(0x90c)]&&BattleManager[_0x4cf933(0x90c)][_0x4cf933(0x42e)]('inputting');},VisuMZ[_0x320868(0x5c8)][_0x320868(0xbdc)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x11d)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x11d)]=function(){const _0x27565c=_0x320868;VisuMZ['BattleCore'][_0x27565c(0xbdc)][_0x27565c(0x5a6)](this);if(!BattleManager[_0x27565c(0xb9a)]())BattleManager[_0x27565c(0x90c)]=null;},VisuMZ[_0x320868(0x5c8)]['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0x320868(0x5bb)][_0x320868(0xa29)],Scene_Battle['prototype'][_0x320868(0xa29)]=function(){const _0x4ea609=_0x320868;VisuMZ[_0x4ea609(0x5c8)][_0x4ea609(0x641)][_0x4ea609(0x5a6)](this),this[_0x4ea609(0x303)]();},Scene_Battle[_0x320868(0x5bb)]['createActorCommandWindowBattleCore']=function(){const _0x2244bf=_0x320868,_0x4661ac=this[_0x2244bf(0x692)];_0x4661ac[_0x2244bf(0x163)](_0x2244bf(0x4c9),this[_0x2244bf(0x940)][_0x2244bf(0x1cc)](this)),_0x4661ac['setHandler']('autoBattle',this[_0x2244bf(0x9b7)][_0x2244bf(0x1cc)](this)),_0x4661ac[_0x2244bf(0x163)]('singleSkill',this[_0x2244bf(0xaa3)]['bind'](this)),BattleManager['isTpb']()&&(this[_0x2244bf(0x1e7)]()?delete _0x4661ac[_0x2244bf(0x72f)]['cancel']:_0x4661ac[_0x2244bf(0x163)](_0x2244bf(0x383),this[_0x2244bf(0x133)][_0x2244bf(0x1cc)](this)));},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x940)]=function(){this['commandEscape']();},Scene_Battle['prototype'][_0x320868(0x9b7)]=function(){const _0x2ad85a=_0x320868;BattleManager[_0x2ad85a(0xb94)]()[_0x2ad85a(0x71b)](),BattleManager[_0x2ad85a(0xc27)](),BattleManager['selectNextActor'](),this[_0x2ad85a(0x882)]();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0xaa3)]=function(){const _0x43af05=_0x320868,_0x3dd537=BattleManager[_0x43af05(0x662)](),_0x43de0a=this[_0x43af05(0x692)][_0x43af05(0xa4d)]();_0x3dd537['setSkill'](_0x43de0a),BattleManager[_0x43af05(0xb94)]()[_0x43af05(0x68c)]($dataSkills[_0x43de0a]),this[_0x43af05(0x362)]();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x133)]=function(){const _0x2c4b09=_0x320868;this['tpbActorSwitchConditionsMet']()?this[_0x2c4b09(0x766)]():this[_0x2c4b09(0xa5b)]();},VisuMZ['BattleCore'][_0x320868(0xad8)]=![],Scene_Battle['prototype'][_0x320868(0x8a8)]=function(){const _0x248f71=_0x320868;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x248f71(0x166)]())return![];else{if(!VisuMZ[_0x248f71(0x5c8)][_0x248f71(0xad8)])return![];const _0x5f1030=$gameParty[_0x248f71(0x83b)]()[_0x248f71(0x477)](_0x2ac52c=>_0x2ac52c[_0x248f71(0xc5f)]()&&_0x2ac52c[_0x248f71(0xbe8)]());return _0x5f1030[_0x248f71(0x4c1)]>0x0&&BattleManager[_0x248f71(0xb94)]()!==_0x5f1030[_0x5f1030[_0x248f71(0x4c1)]-0x1];}},Scene_Battle['prototype'][_0x320868(0x766)]=function(){const _0xd9c465=_0x320868,_0x5abc74=BattleManager[_0xd9c465(0xb94)](),_0x1b3df4=_0x5abc74[_0xd9c465(0xb31)]();if(_0x1b3df4)_0x1b3df4[_0xd9c465(0x794)]();const _0x2778a5=$gameParty['aliveMembers']()[_0xd9c465(0x477)](_0x82f82f=>_0x82f82f[_0xd9c465(0xc5f)]()&&_0x82f82f['canInput']()),_0x47bfcb=_0x2778a5['indexOf'](_0x5abc74),_0x52e5b5=_0x2778a5[_0x47bfcb+0x1];BattleManager['_currentActor']=_0x52e5b5||null;if(_0x52e5b5)_0x52e5b5[_0xd9c465(0x42e)](_0xd9c465(0x6c7));_0x5abc74['setActionState']('undecided'),this['changeInputWindow']();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0xa5b)]=function(){const _0x1fcda6=_0x320868;this[_0x1fcda6(0x6c9)][_0x1fcda6(0x8ff)](),this['_actorCommandWindow'][_0x1fcda6(0x9c1)]();if(!VisuMZ['BattleCore'][_0x1fcda6(0xad8)])return;if(Imported[_0x1fcda6(0x617)]&&BattleManager[_0x1fcda6(0x166)]())return;if(BattleManager[_0x1fcda6(0x90c)]){BattleManager['_currentActor'][_0x1fcda6(0x42e)]('undecided');const _0x2393fc=BattleManager['_currentActor'][_0x1fcda6(0xb31)]();if(_0x2393fc)_0x2393fc[_0x1fcda6(0x794)]();}BattleManager[_0x1fcda6(0x90c)]=null;},VisuMZ[_0x320868(0x5c8)]['Scene_Battle_createHelpWindow']=Scene_Battle['prototype'][_0x320868(0x536)],Scene_Battle['prototype'][_0x320868(0x536)]=function(){const _0x1cfd37=_0x320868;VisuMZ[_0x1cfd37(0x5c8)][_0x1cfd37(0x374)][_0x1cfd37(0x5a6)](this),this[_0x1cfd37(0x5f8)]();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x5f8)]=function(){const _0x1a245c=_0x320868;this['_actorCommandWindow'][_0x1a245c(0x5bf)](this['_helpWindow']),this[_0x1a245c(0x6c9)][_0x1a245c(0x5bf)](this['_helpWindow']);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x8b6)]=function(){const _0x5280ba=_0x320868;if(!VisuMZ['BattleCore'][_0x5280ba(0x1d7)][_0x5280ba(0x14d)][_0x5280ba(0x89f)])return;this[_0x5280ba(0x83d)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x5280ba(0x34b)]['x'],this[_0x5280ba(0x83d)]['y']=this[_0x5280ba(0x34b)]['y'];const _0x2aadf4=this['children']['indexOf'](this['_windowLayer']);this['addChildAt'](this['_enemyNameContainer'],_0x2aadf4);for(let _0x4e793b=0x0;_0x4e793b<0x8;_0x4e793b++){const _0x6e6e9a=new Window_EnemyName(_0x4e793b);this[_0x5280ba(0x83d)]['addChild'](_0x6e6e9a);}},VisuMZ[_0x320868(0x5c8)][_0x320868(0xa93)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x340)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x340)]=function(){const _0x28189c=_0x320868;VisuMZ[_0x28189c(0x5c8)][_0x28189c(0xa93)][_0x28189c(0x5a6)](this),this[_0x28189c(0x775)]();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x775)]=function(){const _0x33f0fb=_0x320868;this['createMultiTargetWindow'](!![]),this[_0x33f0fb(0x258)](![]);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x5c6)]=function(_0xbbfe90){const _0x41746f=_0x320868,_0xb29f4d=Window_BattleMultiTarget[_0x41746f(0x1df)],_0x14699b=this[_0x41746f(0xb87)](0x1,!![]);let _0xed57d4=_0xbbfe90?Graphics[_0x41746f(0x23d)]-_0xb29f4d:0x0;_0xed57d4+=_0xbbfe90?Window_BattleMultiTarget['ACTOR_OFFSET_X']:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x16887c=[_0x41746f(0x8ac)][_0x41746f(0x6d2)](this['battleLayoutStyle']())?0x0:this[_0x41746f(0xabb)][_0x41746f(0x351)];let _0x1203f0=Graphics['boxHeight']-_0x16887c-_0x14699b;return _0x1203f0+=_0xbbfe90?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget[_0x41746f(0x387)],new Rectangle(_0xed57d4,_0x1203f0,_0xb29f4d,_0x14699b);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x258)]=function(_0x2e5fe2){const _0x5a8a47=_0x320868,_0x5f240a=this[_0x5a8a47(0x5c6)](_0x2e5fe2),_0x41efcf=new Window_BattleMultiTarget(_0x5f240a,_0x2e5fe2);this['addWindow'](_0x41efcf),_0x2e5fe2?this[_0x5a8a47(0xb4a)]=_0x41efcf:this[_0x5a8a47(0x634)]=_0x41efcf;},VisuMZ[_0x320868(0x5c8)][_0x320868(0xae9)]=Scene_Battle[_0x320868(0x5bb)]['needsInputWindowChange'],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x6ea)]=function(){const _0x47cf56=_0x320868;if(this[_0x47cf56(0x5d8)])return![];return VisuMZ[_0x47cf56(0x5c8)][_0x47cf56(0xae9)]['call'](this);},VisuMZ[_0x320868(0x5c8)]['Scene_Battle_updateCancelButton']=Scene_Battle[_0x320868(0x5bb)]['updateCancelButton'],Scene_Battle[_0x320868(0x5bb)][_0x320868(0xa48)]=function(){const _0x2f6211=_0x320868;if(this['_cancelButton']&&this[_0x2f6211(0x5d8)]){this[_0x2f6211(0xb78)][_0x2f6211(0x6b7)]=!![];return;}VisuMZ[_0x2f6211(0x5c8)][_0x2f6211(0xbb7)][_0x2f6211(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x2b7)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x707)],Scene_Battle['prototype'][_0x320868(0x707)]=function(){const _0x57820c=_0x320868;if(this[_0x57820c(0x5d8)])return![];return VisuMZ[_0x57820c(0x5c8)]['Scene_Battle_isTimeActiveIBS']['call'](this);},VisuMZ[_0x320868(0x5c8)]['Scene_Battle_createAllWindowsIBS']=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x850)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x850)]=function(){const _0x10a889=_0x320868;VisuMZ[_0x10a889(0x5c8)][_0x10a889(0x8a6)][_0x10a889(0x5a6)](this),this[_0x10a889(0x36c)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x88b)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x8c2)],Scene_Battle[_0x320868(0x5bb)]['createPartyCommandWindow']=function(){const _0x39a937=_0x320868;VisuMZ['BattleCore'][_0x39a937(0x88b)][_0x39a937(0x5a6)](this);const _0x2dcf49=this[_0x39a937(0x6c9)];_0x2dcf49['setHandler'](_0x39a937(0xb15),this[_0x39a937(0x885)][_0x39a937(0x1cc)](this,_0x2dcf49));},VisuMZ[_0x320868(0x5c8)][_0x320868(0xbef)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0xa29)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0xa29)]=function(){const _0x1d9598=_0x320868;VisuMZ[_0x1d9598(0x5c8)][_0x1d9598(0xbef)][_0x1d9598(0x5a6)](this);const _0x443994=this[_0x1d9598(0x692)];_0x443994[_0x1d9598(0x163)](_0x1d9598(0xb15),this[_0x1d9598(0x885)][_0x1d9598(0x1cc)](this,_0x443994));},Scene_Battle['prototype'][_0x320868(0x36c)]=function(){const _0xf4b5f5=_0x320868,_0x4a85bb=this[_0xf4b5f5(0x4da)](),_0x5a8b8f=new Window_InBattleStatus(_0x4a85bb);this[_0xf4b5f5(0x197)](_0x5a8b8f),_0x5a8b8f[_0xf4b5f5(0x190)](),_0x5a8b8f['close'](),this[_0xf4b5f5(0x5be)]=_0x5a8b8f;},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x4da)]=function(){const _0x297010=_0x320868;if(VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x297010(0xb51)])return VisuMZ[_0x297010(0x5c8)]['Settings']['InBattleStatus']['StatusWindow_RectJS'][_0x297010(0x5a6)](this);const _0x16017e=Graphics[_0x297010(0x23d)]>0x3e8?0x78:0x0,_0x1f8c33=this['_helpWindow']['y']+this['_helpWindow']['height'],_0xf6559a=Graphics['boxWidth']-_0x16017e*0x2,_0x188c87=Graphics[_0x297010(0x66c)]-_0x1f8c33-this[_0x297010(0x6a0)]();return new Rectangle(_0x16017e,_0x1f8c33,_0xf6559a,_0x188c87);},Scene_Battle[_0x320868(0x5bb)]['startInBattleStatus']=function(_0x1fb0ef){const _0x551646=_0x320868;this[_0x551646(0x197)](this[_0x551646(0x5be)]),this['_inBattleStatusMode']=!![],this['_helpWindow']['show']();const _0x408ad5=['xp',_0x551646(0xa42),_0x551646(0xba8),_0x551646(0x304),_0x551646(0x8ac)];let _0x5f8c47=_0x408ad5['includes'](this[_0x551646(0x2d1)]());_0x5f8c47&&(_0x1fb0ef[_0x551646(0x190)](),_0x1fb0ef[_0x551646(0x9c1)]()),this[_0x551646(0x5be)][_0x551646(0x9c3)](BattleManager[_0x551646(0xb94)]()||$gameParty['battleMembers']()[0x0]),this[_0x551646(0x5be)][_0x551646(0xaab)](_0x1fb0ef),this[_0x551646(0x5be)]['show'](),this[_0x551646(0x5be)][_0x551646(0xa6c)]();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x5ec)]=function(){const _0x2c917a=_0x320868;this[_0x2c917a(0x5d8)]=![],this['_helpWindow'][_0x2c917a(0x190)]();const _0x3f0de7=this[_0x2c917a(0x5be)][_0x2c917a(0x697)]();_0x3f0de7[_0x2c917a(0xac0)](),_0x3f0de7['open'](),_0x3f0de7[_0x2c917a(0x631)](),this[_0x2c917a(0x5be)][_0x2c917a(0x190)](),this[_0x2c917a(0x5be)][_0x2c917a(0x9c1)]();},Scene_Battle['prototype'][_0x320868(0x2d1)]=function(){const _0x13f7f7=_0x320868;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp[_0x13f7f7(0x2d0)];if(this[_0x13f7f7(0xb9f)])return this[_0x13f7f7(0xb9f)];return this['_battleLayoutStyle']=VisuMZ['BattleCore'][_0x13f7f7(0x1d7)][_0x13f7f7(0x759)][_0x13f7f7(0x5ef)][_0x13f7f7(0xc44)]()[_0x13f7f7(0x761)](),this['_battleLayoutStyle']===_0x13f7f7(0x304)&&!Imported[_0x13f7f7(0x866)]&&(this[_0x13f7f7(0xb9f)]=_0x13f7f7(0x86a)),this[_0x13f7f7(0xb9f)]==='frontview_ui'&&!Imported[_0x13f7f7(0xae0)]&&(this['_battleLayoutStyle']='default'),this['_battleLayoutStyle'];},VisuMZ['BattleCore']['Scene_Battle_windowAreaHeight']=Scene_Battle['prototype'][_0x320868(0x6a0)],Scene_Battle['prototype'][_0x320868(0x6a0)]=function(){const _0x4ec17d=_0x320868,_0x14c6e1=this['battleLayoutStyle']();switch(_0x14c6e1){case'list':return this['calcWindowHeight'](Math['max'](0x1,$gameParty[_0x4ec17d(0x1e6)]()),!![]);break;case'border':return this[_0x4ec17d(0xb87)](0x4,!![]);break;default:return VisuMZ[_0x4ec17d(0x5c8)]['Scene_Battle_windowAreaHeight']['call'](this);break;}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x560)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x6a5)],Scene_Battle['prototype'][_0x320868(0x6a5)]=function(){const _0x28cbf5=_0x320868,_0xde7f2f=this['battleLayoutStyle']();switch(_0xde7f2f){case _0x28cbf5(0xba8):return this[_0x28cbf5(0xa54)]();break;case _0x28cbf5(0x86a):case _0x28cbf5(0x69b):case'xp':case _0x28cbf5(0xa42):default:return VisuMZ['BattleCore'][_0x28cbf5(0x560)][_0x28cbf5(0x5a6)](this);break;}},Scene_Battle['prototype'][_0x320868(0x181)]=function(){const _0x223ac3=_0x320868,_0x3de9bd=this[_0x223ac3(0x2d1)]();switch(_0x3de9bd){case'xp':case _0x223ac3(0xa42):return this[_0x223ac3(0xb08)]();break;case _0x223ac3(0xba8):return this[_0x223ac3(0x640)]();break;case'default':case _0x223ac3(0x69b):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x618)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0xa27)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0xa27)]=function(){const _0x30df00=_0x320868,_0x4e4b0a=this[_0x30df00(0x2d1)]();switch(_0x4e4b0a){case'xp':case'portrait':return this['partyCommandWindowRectXPStyle']();break;case _0x30df00(0xba8):return this[_0x30df00(0x52e)]();case _0x30df00(0x86a):case'list':default:return this[_0x30df00(0xc46)]();break;}},Scene_Battle[_0x320868(0x5bb)][_0x320868(0xc46)]=function(){const _0x7b4f69=_0x320868,_0x51d474=VisuMZ[_0x7b4f69(0x5c8)][_0x7b4f69(0x1d7)][_0x7b4f69(0x759)],_0x4444bc=_0x51d474[_0x7b4f69(0x889)]||0xc0,_0x4f5d51=this['windowAreaHeight'](),_0x3169b6=this[_0x7b4f69(0x9bf)]()?Graphics[_0x7b4f69(0x23d)]-_0x4444bc:0x0,_0x12a800=Graphics[_0x7b4f69(0x66c)]-_0x4f5d51;return new Rectangle(_0x3169b6,_0x12a800,_0x4444bc,_0x4f5d51);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x3f0)]=function(){const _0x248328=_0x320868;return this[_0x248328(0xa27)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x69a)]=Scene_Battle[_0x320868(0x5bb)]['updateStatusWindowPosition'],Scene_Battle['prototype'][_0x320868(0x8b5)]=function(){const _0x204f8c=_0x320868;if(this[_0x204f8c(0x5d8)])return;const _0x315727=this[_0x204f8c(0x2d1)]();switch(_0x315727){case'xp':case _0x204f8c(0xa42):case'border':break;case _0x204f8c(0x86a):case _0x204f8c(0x69b):default:VisuMZ[_0x204f8c(0x5c8)][_0x204f8c(0x69a)]['call'](this);break;}},Scene_Battle[_0x320868(0x5bb)]['statusWindowRectDefaultStyle']=function(){const _0x2ee986=_0x320868,_0x2355e9=VisuMZ[_0x2ee986(0x5c8)][_0x2ee986(0x1d7)][_0x2ee986(0x759)],_0x361273=Window_BattleStatus[_0x2ee986(0x5bb)][_0x2ee986(0x660)](),_0x13a02b=Graphics[_0x2ee986(0x23d)]-(_0x2355e9[_0x2ee986(0x889)]||0xc0),_0x5491b8=this['windowAreaHeight']()+_0x361273,_0x2dcf76=this[_0x2ee986(0x9bf)]()?0x0:Graphics[_0x2ee986(0x23d)]-_0x13a02b,_0x3f6c62=Graphics[_0x2ee986(0x66c)]-_0x5491b8+_0x361273;return new Rectangle(_0x2dcf76,_0x3f6c62,_0x13a02b,_0x5491b8);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0xb08)]=function(){const _0xc9594=_0x320868,_0x14f4eb=Window_BattleStatus[_0xc9594(0x5bb)]['extraHeight'](),_0x15fbd1=Graphics[_0xc9594(0x23d)],_0x244805=this[_0xc9594(0x6a0)]()+_0x14f4eb,_0x16a8f1=0x0,_0x574117=Graphics[_0xc9594(0x66c)]-_0x244805+_0x14f4eb;return new Rectangle(_0x16a8f1,_0x574117,_0x15fbd1,_0x244805);},Scene_Battle['prototype'][_0x320868(0x7c3)]=function(){const _0x247871=_0x320868,_0x5f17d6=Graphics['boxWidth']/0x2,_0x5db73e=this[_0x247871(0xb87)](VisuMZ[_0x247871(0x5c8)][_0x247871(0x1d7)]['BattleLayout'][_0x247871(0x1cb)],!![]),_0x3bbf5f=Math[_0x247871(0xa8c)]((Graphics[_0x247871(0x23d)]-_0x5f17d6)/0x2),_0x18f2fd=Graphics[_0x247871(0x66c)]-_0x5db73e-this[_0x247871(0xb08)]()[_0x247871(0x351)];return new Rectangle(_0x3bbf5f,_0x18f2fd,_0x5f17d6,_0x5db73e);},Scene_Battle['prototype'][_0x320868(0xa54)]=function(){const _0x1ed491=_0x320868,_0x1fe3cb=Graphics[_0x1ed491(0x529)],_0x13292a=Math['round']((Graphics[_0x1ed491(0x23d)]-_0x1fe3cb)/0x2),_0x5178a3=this[_0x1ed491(0x9cb)](),_0x59cd6a=(Graphics[_0x1ed491(0x351)]-Graphics[_0x1ed491(0x66c)])/-0x2;return new Rectangle(_0x13292a,_0x59cd6a,_0x1fe3cb,_0x5178a3);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x640)]=function(){const _0x3b5563=_0x320868,_0x1f1bcb=Graphics[_0x3b5563(0x529)],_0x215545=Math[_0x3b5563(0xa8c)]((Graphics['boxWidth']-_0x1f1bcb)/0x2),_0x179e8c=this[_0x3b5563(0xb87)](0x4,!![]),_0x3a1949=Graphics[_0x3b5563(0x66c)]-_0x179e8c+(Graphics[_0x3b5563(0x351)]-Graphics[_0x3b5563(0x66c)])/0x2;return new Rectangle(_0x215545,_0x3a1949,_0x1f1bcb,_0x179e8c);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x52e)]=function(){const _0x1549c8=_0x320868,_0x3f7760=Math[_0x1549c8(0x5a8)](Graphics[_0x1549c8(0x529)]/0x3),_0x3a5e99=this[_0x1549c8(0x9bf)]()?(Graphics[_0x1549c8(0x529)]+Graphics[_0x1549c8(0x23d)])/0x2-_0x3f7760:(Graphics['width']-Graphics['boxWidth'])/-0x2,_0x474330=this[_0x1549c8(0xa54)](),_0x5a93cc=_0x474330['y']+_0x474330[_0x1549c8(0x351)],_0x24ba35=this[_0x1549c8(0x640)](),_0x3eac32=_0x24ba35['y']-_0x5a93cc;return new Rectangle(_0x3a5e99,_0x5a93cc,_0x3f7760,_0x3eac32);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x9a6)]=function(){const _0x2fa91a=_0x320868,_0x35c7f6=Math[_0x2fa91a(0x5e5)](Graphics[_0x2fa91a(0x529)]/0x3),_0x1f7222=Math[_0x2fa91a(0xa8c)]((Graphics['boxWidth']-_0x35c7f6)/0x2),_0x36e956=this[_0x2fa91a(0x52e)](),_0x736bb0=_0x36e956['y'],_0x2d7c11=_0x36e956[_0x2fa91a(0x351)];return new Rectangle(_0x1f7222,_0x736bb0,_0x35c7f6,_0x2d7c11);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x893)]=function(){const _0x5022a6=_0x320868;this['_cancelButton']['y']=this[_0x5022a6(0xc69)]['y']+this[_0x5022a6(0xc69)]['height'],this['isRightInputMode']()?this[_0x5022a6(0x2d1)]()==='border'?this['_cancelButton']['x']=0x8:this[_0x5022a6(0xb78)]['x']=-this['_cancelButton'][_0x5022a6(0x529)]-0x4:this[_0x5022a6(0xb78)]['x']=Graphics[_0x5022a6(0x529)]-(Graphics[_0x5022a6(0x529)]-Graphics[_0x5022a6(0x23d)])/0x2-this[_0x5022a6(0xb78)][_0x5022a6(0x529)]-0x4;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x565)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0xb6f)],Scene_Battle['prototype']['skillWindowRect']=function(){const _0x4c1166=_0x320868;if(this['battleLayoutStyle']()==='border')return this[_0x4c1166(0x9a6)]();else return this[_0x4c1166(0x212)]()?this[_0x4c1166(0x3ba)]():VisuMZ['BattleCore'][_0x4c1166(0x565)][_0x4c1166(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x2eb)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x2eb)]=function(){const _0x53beee=_0x320868;if(this[_0x53beee(0x2d1)]()==='border')return this[_0x53beee(0x9a6)]();else return this[_0x53beee(0x212)]()?this[_0x53beee(0x3ba)]():VisuMZ[_0x53beee(0x5c8)][_0x53beee(0x699)][_0x53beee(0x5a6)](this);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x212)]=function(){const _0x37002e=_0x320868;return VisuMZ['BattleCore'][_0x37002e(0x1d7)]['BattleLayout']['SkillItemMiddleLayout'];},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x3ba)]=function(){const _0x4071f0=_0x320868,_0x4ff9db=Sprite_Button[_0x4071f0(0x5bb)]['blockWidth']()*0x2+0x4;let _0x14b2dd=Graphics[_0x4071f0(0x23d)]-_0x4ff9db;Imported[_0x4071f0(0x1c8)]&&SceneManager[_0x4071f0(0x7f9)]()&&(_0x14b2dd+=_0x4ff9db);const _0x2c3965=this[_0x4071f0(0x271)](),_0x2e0811=Graphics['boxHeight']-_0x2c3965-this[_0x4071f0(0x181)]()['height']+Window_BattleStatus[_0x4071f0(0x5bb)]['extraHeight'](),_0x4c4c8e=0x0;return new Rectangle(_0x4c4c8e,_0x2c3965,_0x14b2dd,_0x2e0811);},VisuMZ[_0x320868(0x5c8)]['Scene_Battle_startActorSelection']=Scene_Battle['prototype'][_0x320868(0x2a2)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x2a2)]=function(){const _0x9a6f29=_0x320868;VisuMZ[_0x9a6f29(0x5c8)][_0x9a6f29(0x319)]['call'](this),this[_0x9a6f29(0x508)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x27d)]=Scene_Battle[_0x320868(0x5bb)]['startEnemySelection'],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x2d5)]=function(){const _0xe9eaff=_0x320868;VisuMZ[_0xe9eaff(0x5c8)]['Scene_Battle_startEnemySelection']['call'](this),this[_0xe9eaff(0x62a)][_0xe9eaff(0x413)](),this[_0xe9eaff(0x508)]();},Scene_Battle['prototype'][_0x320868(0x508)]=function(){const _0x266e78=_0x320868,_0x2ce1e5=this['battleLayoutStyle']();['xp',_0x266e78(0xa42),_0x266e78(0xba8)][_0x266e78(0x6d2)](_0x2ce1e5)&&this[_0x266e78(0x692)][_0x266e78(0x9c1)](),(_0x2ce1e5==='border'||this[_0x266e78(0x212)]())&&(this[_0x266e78(0x667)][_0x266e78(0x9c1)](),this['_itemWindow']['close']());},VisuMZ[_0x320868(0x5c8)][_0x320868(0x264)]=Scene_Battle['prototype'][_0x320868(0xaed)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0xaed)]=function(){const _0x46ca5e=_0x320868;VisuMZ[_0x46ca5e(0x5c8)][_0x46ca5e(0x264)][_0x46ca5e(0x5a6)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x157)]=function(){const _0x19080a=_0x320868;return[_0x19080a(0x280),_0x19080a(0xa12),_0x19080a(0x427)][_0x19080a(0x6d2)](this['_actorCommandWindow'][_0x19080a(0x8ed)]());},VisuMZ['BattleCore'][_0x320868(0x281)]=Scene_Battle['prototype'][_0x320868(0xb62)],Scene_Battle['prototype']['onActorCancel']=function(){const _0x1b487f=_0x320868;this[_0x1b487f(0x157)]()?(this['_statusWindow']['show'](),this['_actorWindow'][_0x1b487f(0x190)](),this['_actorCommandWindow'][_0x1b487f(0x631)]()):VisuMZ['BattleCore'][_0x1b487f(0x281)][_0x1b487f(0x5a6)](this),this[_0x1b487f(0x5e7)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x677)]=Scene_Battle['prototype'][_0x320868(0x6df)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0x6df)]=function(){const _0x72301=_0x320868;if(!this['_enemyWindow'][_0x72301(0x568)]()){this['_enemyWindow'][_0x72301(0x631)]();return;}const _0x5c69cc=BattleManager[_0x72301(0x662)]();_0x5c69cc[_0x72301(0x558)](this['_enemyWindow'][_0x72301(0x568)]()),this[_0x72301(0x62a)]['closeBattleActorWindow'](),VisuMZ[_0x72301(0x5c8)][_0x72301(0x677)][_0x72301(0x5a6)](this),this[_0x72301(0x7b4)]();},VisuMZ['BattleCore'][_0x320868(0xad5)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0xc42)],Scene_Battle[_0x320868(0x5bb)][_0x320868(0xc42)]=function(){const _0x3f561f=_0x320868;this[_0x3f561f(0x157)]()?(this[_0x3f561f(0xabb)][_0x3f561f(0xac0)](),this[_0x3f561f(0x62a)]['hide'](),this[_0x3f561f(0x692)][_0x3f561f(0x631)]()):VisuMZ['BattleCore'][_0x3f561f(0xad5)][_0x3f561f(0x5a6)](this),this['cancelTargetSelectionVisibility'](),this[_0x3f561f(0x62a)][_0x3f561f(0xbdb)]();},Scene_Battle['prototype'][_0x320868(0x7b4)]=function(){const _0x4ee1d7=_0x320868,_0x405410=this['battleLayoutStyle']();(_0x405410===_0x4ee1d7(0xba8)||this[_0x4ee1d7(0x212)]())&&(this[_0x4ee1d7(0x667)][_0x4ee1d7(0xa6c)](),this['_skillWindow'][_0x4ee1d7(0x55d)]&&this[_0x4ee1d7(0x667)][_0x4ee1d7(0xac0)](),this[_0x4ee1d7(0xafa)][_0x4ee1d7(0xa6c)](),this[_0x4ee1d7(0xafa)][_0x4ee1d7(0x55d)]&&this['_itemWindow'][_0x4ee1d7(0xac0)]());},Scene_Battle['prototype']['cancelTargetSelectionVisibility']=function(){const _0x39fb7c=_0x320868,_0x1ca861=this[_0x39fb7c(0x2d1)]();['xp',_0x39fb7c(0xa42),'border'][_0x39fb7c(0x6d2)](_0x1ca861)&&this['_actorCommandWindow'][_0x39fb7c(0xa6c)](),this['okTargetSelectionVisibility']();},Sprite_Battler[_0x320868(0x402)]=VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0x818)][_0x320868(0x99c)],VisuMZ[_0x320868(0x5c8)][_0x320868(0x414)]=Sprite_Battler['prototype'][_0x320868(0x92d)],Sprite_Battler[_0x320868(0x5bb)]['initMembers']=function(){const _0x308ea4=_0x320868;VisuMZ[_0x308ea4(0x5c8)][_0x308ea4(0x414)]['call'](this),this[_0x308ea4(0x1de)]();if(this['constructor']===Sprite_Enemy)this[_0x308ea4(0xbcb)]();this[_0x308ea4(0x17a)]();},Sprite_Battler[_0x320868(0x5bb)]['initMembersBattleCore']=function(){const _0x33c284=_0x320868;this[_0x33c284(0xb8e)]=0x0,this[_0x33c284(0xba4)]=0x0,this[_0x33c284(0xc00)]=0x0,this['_targetFloatHeight']=0x0,this['_floatDuration']=0x0,this[_0x33c284(0x715)]=0x0,this['_floatEasing']=_0x33c284(0x4ff),this[_0x33c284(0x238)]=0x0,this[_0x33c284(0x28c)]=0x0,this[_0x33c284(0x46a)]=0x0,this[_0x33c284(0xac9)]=0x0,this[_0x33c284(0x91a)]=0xff,this[_0x33c284(0x714)]=0x0,this[_0x33c284(0x774)]=0x0,this[_0x33c284(0x8d2)]=_0x33c284(0x4ff),this[_0x33c284(0x20b)]=0x0,this[_0x33c284(0x169)]=0x0,this[_0x33c284(0x5ce)]=0x0,this[_0x33c284(0xc21)]=0x0,this[_0x33c284(0x44a)]='Linear',this[_0x33c284(0x800)]=!![],this[_0x33c284(0xb95)]=0x0,this[_0x33c284(0x39a)]=0x0,this[_0x33c284(0x54f)]=0x0,this[_0x33c284(0xb44)]=0x0,this['_skewDuration']=0x0,this[_0x33c284(0x44b)]=0x0,this[_0x33c284(0x503)]=_0x33c284(0x4ff),this['_growX']=0x1,this[_0x33c284(0x344)]=0x1,this[_0x33c284(0x844)]=0x1,this[_0x33c284(0xb0c)]=0x1,this['_growDuration']=0x0,this[_0x33c284(0x3c3)]=0x0,this[_0x33c284(0x328)]=_0x33c284(0x4ff),this[_0x33c284(0x9ea)]=0x1,this[_0x33c284(0x25a)]=0x0,this['_targetHomeY']=0x0,this['_homeDuration']=0x0,this[_0x33c284(0xb97)]=0x0,this[_0x33c284(0x8d0)]=_0x33c284(0x4ff),this[_0x33c284(0x684)]=0x0,this[_0x33c284(0x750)]=0x0;},Sprite_Battler[_0x320868(0x5bb)]['createShadowSprite']=function(){const _0x57a9fd=_0x320868;this[_0x57a9fd(0x18d)]=new Sprite(),this['_shadowSprite']['bitmap']=ImageManager[_0x57a9fd(0x381)](_0x57a9fd(0x2ae)),this[_0x57a9fd(0x18d)]['bitmap'][_0x57a9fd(0x65a)]=VisuMZ[_0x57a9fd(0x5c8)]['Settings'][_0x57a9fd(0x818)][_0x57a9fd(0x7f0)],this['_shadowSprite']['anchor']['x']=0.5,this[_0x57a9fd(0x18d)][_0x57a9fd(0x540)]['y']=0.5,this[_0x57a9fd(0x18d)]['y']=-0x2,this[_0x57a9fd(0x18d)][_0x57a9fd(0x6b7)]=![],this[_0x57a9fd(0x4f0)](this[_0x57a9fd(0x18d)]);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x17a)]=function(){const _0x9fc94=_0x320868;this[_0x9fc94(0x276)]=new Sprite(),this['_distortionSprite'][_0x9fc94(0x540)]['x']=0.5,this[_0x9fc94(0x276)][_0x9fc94(0x540)]['y']=0.5,this[_0x9fc94(0x4f0)](this[_0x9fc94(0x276)]);},Sprite_Battler['prototype'][_0x320868(0x7d9)]=function(){const _0x28a9a9=_0x320868;if(this[_0x28a9a9(0x701)]&&this['getDragonbones']()){Sprite[_0x28a9a9(0x5bb)][_0x28a9a9(0x7d9)][_0x28a9a9(0x5a6)](this);return;}const _0x4e182d=this[_0x28a9a9(0x276)];if(!_0x4e182d)return;!_0x4e182d[_0x28a9a9(0xbdd)]&&_0x4e182d['_createColorFilter'](),_0x4e182d[_0x28a9a9(0xbdd)][_0x28a9a9(0x532)](this[_0x28a9a9(0x9f3)]),_0x4e182d[_0x28a9a9(0xbdd)][_0x28a9a9(0xa41)](this[_0x28a9a9(0x886)]),_0x4e182d[_0x28a9a9(0xbdd)][_0x28a9a9(0x39e)](this[_0x28a9a9(0xa7d)]);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xbe5)]=function(){const _0x4d0d74=_0x320868;if(!this[_0x4d0d74(0x276)])return;if(this[_0x4d0d74(0x18d)]){const _0xe2807e=this['getChildIndex'](this[_0x4d0d74(0x276)]);this[_0x4d0d74(0x4b7)](this[_0x4d0d74(0x18d)],_0xe2807e),this[_0x4d0d74(0xa59)]();}this[_0x4d0d74(0x6c4)]&&this[_0x4d0d74(0x276)][_0x4d0d74(0x4f0)](this['_svBattlerSprite']),this[_0x4d0d74(0x7be)]&&this[_0x4d0d74(0x276)]['addChild'](this[_0x4d0d74(0x7be)]),this[_0x4d0d74(0x4bd)]&&this['_distortionSprite'][_0x4d0d74(0x4f0)](this[_0x4d0d74(0x4bd)]),this[_0x4d0d74(0x549)]&&this[_0x4d0d74(0x276)][_0x4d0d74(0x4f0)](this[_0x4d0d74(0x549)]),this[_0x4d0d74(0x48e)]&&this[_0x4d0d74(0x276)][_0x4d0d74(0x4f0)](this[_0x4d0d74(0x48e)]);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xa59)]=function(){const _0x166463=_0x320868;if(!this[_0x166463(0x18d)])return;if(this[_0x166463(0x4be)]&&this['_battler'][_0x166463(0x930)]()){const _0x38997f=this[_0x166463(0x18d)][_0x166463(0xa25)];this[_0x166463(0x18d)][_0x166463(0x64e)](0x0,0x0,_0x38997f['width'],_0x38997f[_0x166463(0x351)]);}else this[_0x166463(0x18d)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x9ab)]=function(){const _0x168959=_0x320868;return SceneManager[_0x168959(0x96d)]()?SceneManager[_0x168959(0x64a)][_0x168959(0xa26)][_0x168959(0x335)]:this[_0x168959(0xa30)];},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x443)]=function(_0x24a2be,_0x1639a0){const _0xfdfafb=_0x320868;if(!this[_0xfdfafb(0x4be)][_0xfdfafb(0x539)]())return;if(BattleManager[_0xfdfafb(0x176)]())return;const _0x541959=VisuMZ[_0xfdfafb(0x5c8)][_0xfdfafb(0x1d7)][_0xfdfafb(0x31c)],_0x3906d7=new Sprite_Damage();_0x3906d7[_0xfdfafb(0x64c)]=_0x541959[_0xfdfafb(0x519)],this[_0xfdfafb(0x9b5)](_0x3906d7),_0x3906d7['setupTextPopup'](_0x24a2be,_0x1639a0),this[_0xfdfafb(0x3fb)](_0x3906d7);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xbdf)]=function(_0x3e1298,_0x385a06,_0x56d4c8){const _0x5e70a3=_0x320868;if(!this['_battler'][_0x5e70a3(0x539)]())return;if(BattleManager[_0x5e70a3(0x176)]())return;const _0x320c13=VisuMZ[_0x5e70a3(0x5c8)]['Settings'][_0x5e70a3(0x31c)],_0x5ea1ea=new Sprite_Damage();_0x5ea1ea[_0x5e70a3(0x64c)]=_0x320c13[_0x5e70a3(0x519)],this[_0x5e70a3(0x9b5)](_0x5ea1ea),_0x5ea1ea[_0x5e70a3(0xbdf)](_0x3e1298,_0x385a06,_0x56d4c8),this[_0x5e70a3(0x3fb)](_0x5ea1ea);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x721)]=function(){const _0x13740e=_0x320868;if(!this[_0x13740e(0x4be)][_0x13740e(0x8f5)]())return;while(this[_0x13740e(0x4be)][_0x13740e(0x8f5)]()){this[_0x13740e(0x4be)][_0x13740e(0x539)]()&&this[_0x13740e(0x355)]();}this[_0x13740e(0x4be)][_0x13740e(0x4ec)](),this[_0x13740e(0x4be)][_0x13740e(0x233)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x355)]=function(){const _0x2b3b94=_0x320868;if(BattleManager[_0x2b3b94(0x176)]())return;const _0x3743c4=VisuMZ[_0x2b3b94(0x5c8)]['Settings'][_0x2b3b94(0x31c)],_0x569e00=new Sprite_Damage();_0x569e00[_0x2b3b94(0x64c)]=_0x3743c4[_0x2b3b94(0x519)],this[_0x2b3b94(0x9b5)](_0x569e00),_0x569e00[_0x2b3b94(0x8ff)](this[_0x2b3b94(0x4be)]),_0x569e00[_0x2b3b94(0x872)](this[_0x2b3b94(0x4be)]),this[_0x2b3b94(0x3fb)](_0x569e00);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x3fb)]=function(_0x4d4c39){const _0x51d2ec=_0x320868;this[_0x51d2ec(0x148)]['push'](_0x4d4c39);if(this['isShownOnBattlePortrait']()){const _0x340656=SceneManager[_0x51d2ec(0x64a)][_0x51d2ec(0xabb)];if(_0x340656)_0x340656[_0x51d2ec(0x3fb)](_0x4d4c39,this['_battler']);}else{this['damageContainer']()['addChild'](_0x4d4c39);if(SceneManager[_0x51d2ec(0x19d)]())_0x4d4c39[_0x51d2ec(0x57d)]['x']=-0x1;}},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x8b8)]=function(){const _0x9c25e=_0x320868;return!$gameSystem[_0x9c25e(0x5a9)]()&&this['_battler']&&this[_0x9c25e(0x4be)][_0x9c25e(0x94e)]();return!$gameSystem[_0x9c25e(0x5a9)]()&&this[_0x9c25e(0x4be)]&&this[_0x9c25e(0x4be)][_0x9c25e(0x94e)]()&&Window_BattleStatus[_0x9c25e(0x5bb)]['battleLayoutStyle']()===_0x9c25e(0xa42);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x9b5)]=function(_0xcca19){const _0x4ec46b=_0x320868;this[_0x4ec46b(0xb73)](_0xcca19,!![]);const _0x565cfa=VisuMZ[_0x4ec46b(0x5c8)][_0x4ec46b(0x1d7)][_0x4ec46b(0x31c)],_0x1e3277=SceneManager[_0x4ec46b(0x19d)]()?-0x1:0x1;if(_0x565cfa[_0x4ec46b(0xc4c)])for(const _0x3d7b2c of this['_damages']){_0x3d7b2c['x']+=_0x565cfa[_0x4ec46b(0x150)]*_0x1e3277,_0x3d7b2c['y']+=_0x565cfa[_0x4ec46b(0xb55)];}else{const _0x4408b0=this[_0x4ec46b(0x148)][this[_0x4ec46b(0x148)][_0x4ec46b(0x4c1)]-0x1];_0x4408b0&&(_0xcca19['x']=_0x4408b0['x']+_0x565cfa[_0x4ec46b(0x150)]*_0x1e3277,_0xcca19['y']=_0x4408b0['y']+_0x565cfa[_0x4ec46b(0xb55)]);}},Sprite_Battler['prototype']['alignBattleCoreDamageSprite']=function(_0x6d0dbf,_0x244f36){const _0x5bc7ba=_0x320868,_0x38dbd3=SceneManager[_0x5bc7ba(0x19d)]()?-0x1:0x1;let _0x36c6c8=this['_baseX'];_0x36c6c8+=this[_0x5bc7ba(0x364)]();let _0x2cf5c9=this[_0x5bc7ba(0xba4)];const _0x465672=this[_0x5bc7ba(0x276)]['scale']['y'];_0x2cf5c9+=this[_0x5bc7ba(0xbf1)]();const _0x5196a0=SceneManager[_0x5bc7ba(0x64a)][_0x5bc7ba(0xabb)];if(_0x5196a0&&this[_0x5bc7ba(0xa30)]===_0x5196a0){_0x36c6c8+=_0x5196a0['x']-this[_0x5bc7ba(0x506)]();const _0x39676e=_0x5196a0['lineHeight']()*0x3/0x4;_0x2cf5c9=_0x5196a0['y']+_0x39676e,_0x2cf5c9=Math[_0x5bc7ba(0x24f)](_0x2cf5c9,_0x5196a0['y']+this['y']-this[_0x5bc7ba(0x351)]+_0x39676e);}_0x6d0dbf['x']=Math[_0x5bc7ba(0xa8c)](_0x36c6c8+this[_0x5bc7ba(0x506)]()*_0x38dbd3),_0x6d0dbf['y']=Math['round'](_0x2cf5c9+this[_0x5bc7ba(0xaa9)]());},VisuMZ[_0x320868(0x5c8)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x506)],Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x506)]=function(){const _0x5e3015=_0x320868;let _0x236506=VisuMZ[_0x5e3015(0x5c8)]['Sprite_Battler_damageOffsetX'][_0x5e3015(0x5a6)](this),_0x538afa=VisuMZ['BattleCore'][_0x5e3015(0x1d7)][_0x5e3015(0x31c)][_0x5e3015(0x9a1)]||0x0;return _0x538afa+=this['_battler']['damagePopupOffsetX'](),Math[_0x5e3015(0xa8c)](_0x236506+_0x538afa);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x7b2)]=Sprite_Battler['prototype'][_0x320868(0xaa9)],Sprite_Battler[_0x320868(0x5bb)]['damageOffsetY']=function(){const _0x22e606=_0x320868;let _0x25e2f9=VisuMZ[_0x22e606(0x5c8)][_0x22e606(0x7b2)]['call'](this);switch(this[_0x22e606(0x4be)]['damagePopupPosition']()){case _0x22e606(0x30d):_0x25e2f9-=this[_0x22e606(0x351)]*this[_0x22e606(0x57d)]['y'];break;case'center':_0x25e2f9-=this['height']*this[_0x22e606(0x57d)]['y']*0.5;break;}let _0x3d74eb=VisuMZ['BattleCore'][_0x22e606(0x1d7)]['Damage'][_0x22e606(0x41c)]||0x0;return _0x3d74eb+=this[_0x22e606(0x4be)][_0x22e606(0x81d)](),Math[_0x22e606(0xa8c)](_0x25e2f9+_0x3d74eb);},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x506)]=function(){const _0x412453=_0x320868;return Sprite_Battler[_0x412453(0x5bb)]['damageOffsetX'][_0x412453(0x5a6)](this);},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0xaa9)]=function(){const _0x443800=_0x320868;return Sprite_Battler[_0x443800(0x5bb)]['damageOffsetY'][_0x443800(0x5a6)](this);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x1d8)]=function(_0x15eb9f){const _0x5899ea=_0x320868;this[_0x5899ea(0x8b8)]()?SceneManager[_0x5899ea(0x64a)][_0x5899ea(0xabb)][_0x5899ea(0x83e)](_0x15eb9f):(this[_0x5899ea(0x9ab)]()[_0x5899ea(0x3bc)](_0x15eb9f),this[_0x5899ea(0x148)][_0x5899ea(0x236)](_0x15eb9f),_0x15eb9f[_0x5899ea(0x26d)]());},VisuMZ[_0x320868(0x5c8)][_0x320868(0x194)]=Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x49d)],Sprite_Battler[_0x320868(0x5bb)]['setHome']=function(_0x3b8ce8,_0x16a422){const _0x1e7734=_0x320868,_0x1e8932=VisuMZ['BattleCore'][_0x1e7734(0x1d7)];if(this['constructor']===Sprite_Actor)_0x3b8ce8+=_0x1e8932[_0x1e7734(0x818)][_0x1e7734(0x71f)]||0x0,_0x16a422+=_0x1e8932[_0x1e7734(0x818)][_0x1e7734(0xa83)]||0x0;else this[_0x1e7734(0xc58)]===Sprite_Enemy&&(_0x3b8ce8+=_0x1e8932['Enemy']['OffsetX']||0x0,_0x16a422+=_0x1e8932[_0x1e7734(0x14d)][_0x1e7734(0xa83)]||0x0);this[_0x1e7734(0x4be)]&&(_0x3b8ce8=this[_0x1e7734(0x4be)][_0x1e7734(0x3e5)]??_0x3b8ce8,_0x16a422=this[_0x1e7734(0x4be)][_0x1e7734(0x6c3)]??_0x16a422),VisuMZ[_0x1e7734(0x5c8)][_0x1e7734(0x194)]['call'](this,_0x3b8ce8,_0x16a422),this[_0x1e7734(0x25a)]=this['_homeX'],this[_0x1e7734(0x482)]=this[_0x1e7734(0x379)],this[_0x1e7734(0xb92)]=0x0,this[_0x1e7734(0xb97)]=0x0,this['_homeEasing']=_0x1e7734(0x4ff);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x223)]=Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x77d)],Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x77d)]=function(){const _0x3ff05f=_0x320868;VisuMZ[_0x3ff05f(0x5c8)][_0x3ff05f(0x223)][_0x3ff05f(0x5a6)](this),!this[_0x3ff05f(0x4be)]&&this[_0x3ff05f(0x3d1)]&&(this[_0x3ff05f(0x3d1)][_0x3ff05f(0x6b7)]=![]);},VisuMZ[_0x320868(0x5c8)]['Sprite_Battler_updateMain']=Sprite_Battler['prototype'][_0x320868(0x7f3)],Sprite_Battler['prototype'][_0x320868(0x7f3)]=function(){const _0x97bac0=_0x320868;this[_0x97bac0(0x68d)](),this[_0x97bac0(0xb88)](),this['updateSpin'](),this['updateFlip'](),VisuMZ[_0x97bac0(0x5c8)][_0x97bac0(0x6f5)][_0x97bac0(0x5a6)](this),this[_0x97bac0(0x986)](),this[_0x97bac0(0xa6a)]();if(this['constructor']===Sprite_Enemy)this[_0x97bac0(0x68f)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x555)]=Sprite_Battler[_0x320868(0x5bb)]['updatePosition'],Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x752)]=function(){const _0x16b42e=_0x320868;this[_0x16b42e(0xbec)](),VisuMZ[_0x16b42e(0x5c8)]['Sprite_Battler_updatePosition'][_0x16b42e(0x5a6)](this),this['updatePositionBattleCore'](),this[_0x16b42e(0x785)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x883)]=function(){const _0x2be1ec=_0x320868,_0x3d5aa4=this[_0x2be1ec(0x1f9)]();if(this[_0x2be1ec(0x4be)]['isSelected']())this['_selectionEffectCount']++,Graphics['frameCount']%0x1e<0xf?_0x3d5aa4[_0x2be1ec(0xa41)]([0xff,0xff,0xff,0x40]):_0x3d5aa4[_0x2be1ec(0xa41)]([0x0,0x0,0x0,0x0]);else this[_0x2be1ec(0x8a9)]>0x0&&(this[_0x2be1ec(0x8a9)]=0x0,_0x3d5aa4[_0x2be1ec(0xa41)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x69d)]=function(_0x307e8b,_0x589c5d){const _0x5fa092=_0x320868,_0x260bed=VisuMZ[_0x5fa092(0x5c8)]['Settings'];if(this[_0x5fa092(0xc58)]===Sprite_Actor)_0x307e8b+=_0x260bed['Actor'][_0x5fa092(0x71f)]||0x0,_0x589c5d+=_0x260bed[_0x5fa092(0x818)][_0x5fa092(0xa83)]||0x0;else this[_0x5fa092(0xc58)]===Sprite_Enemy&&(_0x307e8b+=_0x260bed[_0x5fa092(0x14d)]['OffsetX']||0x0,_0x589c5d+=_0x260bed[_0x5fa092(0x14d)][_0x5fa092(0xa83)]||0x0);const _0x500ec4=_0x307e8b-this[_0x5fa092(0xa91)],_0x331533=_0x589c5d-this[_0x5fa092(0x379)];this['_homeX']=_0x307e8b,this[_0x5fa092(0x379)]=_0x589c5d,this[_0x5fa092(0x32b)]-=_0x500ec4,this[_0x5fa092(0xac7)]-=_0x331533,this[_0x5fa092(0xad9)]-=_0x500ec4,this['_targetOffsetY']-=_0x331533,this[_0x5fa092(0x752)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x59b)]=function(_0x80a166,_0x5c46d2,_0x51b648,_0xdf8723){const _0x3ffa56=_0x320868,_0xad5e54=VisuMZ['BattleCore'][_0x3ffa56(0x1d7)];if(this['constructor']===Sprite_Actor)_0x80a166+=_0xad5e54[_0x3ffa56(0x818)][_0x3ffa56(0x71f)]||0x0,_0x5c46d2+=_0xad5e54['Actor']['OffsetY']||0x0;else this[_0x3ffa56(0xc58)]===Sprite_Enemy&&(_0x80a166+=_0xad5e54[_0x3ffa56(0x14d)][_0x3ffa56(0x71f)]||0x0,_0x5c46d2+=_0xad5e54[_0x3ffa56(0x14d)][_0x3ffa56(0xa83)]||0x0);(this[_0x3ffa56(0x25a)]!==_0x80a166||this[_0x3ffa56(0x482)]!==_0x5c46d2)&&(this[_0x3ffa56(0x25a)]=_0x80a166,this['_targetHomeY']=_0x5c46d2,this[_0x3ffa56(0xb92)]=_0x51b648,this['_homeWholeDuration']=_0x51b648,this['_homeEasing']=_0xdf8723,_0x51b648<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xbec)]=function(){const _0x10c905=_0x320868;if(this[_0x10c905(0xb92)]<=0x0)return;const _0x505324=this['_homeDuration'],_0x402319=this[_0x10c905(0xb97)],_0xc01007=this[_0x10c905(0x8d0)];Imported[_0x10c905(0x1c8)]?(this[_0x10c905(0xa91)]=this[_0x10c905(0x4c0)](this['_homeX'],this[_0x10c905(0x25a)],_0x505324,_0x402319,_0xc01007),this[_0x10c905(0x379)]=this[_0x10c905(0x4c0)](this['_homeY'],this[_0x10c905(0x482)],_0x505324,_0x402319,_0xc01007)):(this['_homeX']=(this[_0x10c905(0xa91)]*(_0x505324-0x1)+this[_0x10c905(0x25a)])/_0x505324,this[_0x10c905(0x379)]=(this[_0x10c905(0x379)]*(_0x505324-0x1)+this[_0x10c905(0x482)])/_0x505324);this[_0x10c905(0xb92)]--;if(this[_0x10c905(0xb92)]<=0x0)this[_0x10c905(0xb6c)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xb6c)]=function(){const _0x107d24=_0x320868;this[_0x107d24(0xa91)]=this[_0x107d24(0x25a)],this['_homeY']=this[_0x107d24(0x482)];},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x3b5)]=function(){const _0x10cb9e=_0x320868;this['_baseX']=this['x'],this['_baseY']=this['y'],this[_0x10cb9e(0x3ef)](),this[_0x10cb9e(0x875)](),this['x']+=this[_0x10cb9e(0x364)](),this['y']+=this[_0x10cb9e(0xbf1)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x10cb9e(0x5a8)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x364)]=function(){let _0x25fe35=0x0;return _0x25fe35;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xbf1)]=function(){const _0x28b682=_0x320868;let _0x5b3aba=0x0;return this[_0x28b682(0x4be)]&&!this['_battler']['isBattlerGrounded']()&&(_0x5b3aba-=this[_0x28b682(0xc00)],_0x5b3aba-=this[_0x28b682(0x238)]),_0x5b3aba;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x38d)]=function(){const _0x861c25=_0x320868;let _0x8dbdc7=0x0;if(this[_0x861c25(0x276)]&&this[_0x861c25(0xc58)]!==Sprite_SvEnemy){const _0x5b8642=this[_0x861c25(0x276)][_0x861c25(0x57d)]['y'];_0x8dbdc7-=(_0x5b8642-0x1)*this[_0x861c25(0x351)];}return _0x8dbdc7;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x1cf)]=function(){const _0x1fc39c=_0x320868,_0x50d8c6=this[_0x1fc39c(0x4be)]&&this['_battler'][_0x1fc39c(0x7e6)]();this['_flipScaleX']=(_0x50d8c6?-0x1:0x1)*Math[_0x1fc39c(0x57e)](this[_0x1fc39c(0x57d)]['x']);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x4de)]=function(_0x3cc425,_0x569b65,_0xb7ab59){const _0x21a267=_0x320868;if(!this[_0x21a267(0x46c)]())return;if(this['_targetFloatHeight']===_0x3cc425)return;this[_0x21a267(0x808)]=_0x3cc425,this[_0x21a267(0xc1a)]=_0x569b65,this[_0x21a267(0x715)]=_0x569b65,this['_floatEasing']=_0xb7ab59||_0x21a267(0x4ff);if(_0x569b65<=0x0)this['_floatHeight']=_0x3cc425;},Sprite_Battler['prototype'][_0x320868(0x3ef)]=function(){const _0x2d5f63=_0x320868;if(this[_0x2d5f63(0xc1a)]<=0x0)return;const _0x17f4c0=this[_0x2d5f63(0xc1a)],_0x22cbb5=this[_0x2d5f63(0x715)],_0x788cde=this[_0x2d5f63(0xb8a)];Imported['VisuMZ_0_CoreEngine']?this['_floatHeight']=this[_0x2d5f63(0x4c0)](this[_0x2d5f63(0xc00)],this[_0x2d5f63(0x808)],_0x17f4c0,_0x22cbb5,_0x788cde):this[_0x2d5f63(0xc00)]=(this['_floatHeight']*(_0x17f4c0-0x1)+this[_0x2d5f63(0x808)])/_0x17f4c0;this[_0x2d5f63(0xc1a)]--;if(this[_0x2d5f63(0xc1a)]<=0x0)this[_0x2d5f63(0xa9c)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xa9c)]=function(){const _0x4458c5=_0x320868;this['_floatHeight']=this[_0x4458c5(0x808)];},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xb06)]=function(){const _0x3359b6=_0x320868;return this[_0x3359b6(0xc1a)]>0x0;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x2ec)]=function(_0x43d428,_0x4037f8){const _0x3ad62c=_0x320868;if(!this['canMove']())return;if(_0x4037f8<=0x0)return;this[_0x3ad62c(0x28c)]=_0x43d428,this[_0x3ad62c(0x46a)]=_0x4037f8,this[_0x3ad62c(0xac9)]=_0x4037f8;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x875)]=function(){const _0x42b4c8=_0x320868;if(this['_jumpDuration']<=0x0)return;const _0x28ddcd=this[_0x42b4c8(0xac9)]-this[_0x42b4c8(0x46a)],_0x68e85e=this[_0x42b4c8(0xac9)]/0x2,_0x5b1de9=this[_0x42b4c8(0x28c)],_0x514419=-_0x5b1de9/Math[_0x42b4c8(0x256)](_0x68e85e,0x2);this[_0x42b4c8(0x238)]=_0x514419*Math[_0x42b4c8(0x256)](_0x28ddcd-_0x68e85e,0x2)+_0x5b1de9,this[_0x42b4c8(0x46a)]--;if(this['_jumpDuration']<=0x0)return this['onJumpEnd']();},Sprite_Battler['prototype'][_0x320868(0x807)]=function(){const _0x434888=_0x320868;this[_0x434888(0x238)]=0x0;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x130)]=function(){const _0x22df56=_0x320868;return this[_0x22df56(0x46a)]>0x0;},Sprite_Battler[_0x320868(0x5bb)]['startOpacity']=function(_0x132c6a,_0x4b3c66,_0x3c24a7){const _0x380539=_0x320868;if(this[_0x380539(0x91a)]===_0x132c6a)return;this[_0x380539(0x91a)]=_0x132c6a,this[_0x380539(0x714)]=_0x4b3c66,this[_0x380539(0x774)]=_0x4b3c66,this[_0x380539(0x8d2)]=_0x3c24a7||_0x380539(0x4ff);if(_0x4b3c66<=0x0)this['opacity']=_0x132c6a;},Sprite_Battler[_0x320868(0x5bb)]['updateOpacity']=function(){const _0x973574=_0x320868;if(this[_0x973574(0xc58)]['name']===_0x973574(0x4bb))return;if(this[_0x973574(0x714)]<=0x0)return;const _0xd031c7=this[_0x973574(0x714)],_0x4d7f81=this['_opacityWholeDuration'],_0xf4e4d=this[_0x973574(0x8d2)];Imported[_0x973574(0x1c8)]?this[_0x973574(0x385)]=this[_0x973574(0x4c0)](this['opacity'],this[_0x973574(0x91a)],_0xd031c7,_0x4d7f81,_0xf4e4d):this[_0x973574(0x385)]=(this[_0x973574(0x385)]*(_0xd031c7-0x1)+this[_0x973574(0x91a)])/_0xd031c7;this[_0x973574(0x714)]--;if(this['_opacityDuration']<=0x0)this[_0x973574(0xad1)]();},Sprite_Battler['prototype']['onOpacityEnd']=function(){const _0xa662a=_0x320868;this['opacity']=this[_0xa662a(0x91a)];},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x8bf)]=function(){const _0x3633ab=_0x320868;return this[_0x3633ab(0x714)]>0x0;},Sprite_Battler['prototype'][_0x320868(0x68f)]=function(){const _0x432f0b=_0x320868;this['_shadowSprite'][_0x432f0b(0x6b7)]=this['_battler'][_0x432f0b(0xb85)](),this[_0x432f0b(0x955)]();},Sprite_Battler[_0x320868(0x5bb)]['updateShadowPosition']=function(){const _0x1f7622=_0x320868;if(!this['_shadowSprite'])return;this[_0x1f7622(0x18d)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x341)]=function(){const _0x4c614d=_0x320868;if(!this['_battler'])return;this[_0x4c614d(0x6cd)]=this[_0x4c614d(0x4be)]['battlerShadowScaleX'](),this[_0x4c614d(0x422)]=this[_0x4c614d(0x4be)][_0x4c614d(0x3fe)]();},Game_BattlerBase[_0x320868(0x5bb)]['battlerShadowScaleX']=function(){const _0x96ca4e=_0x320868,_0xa22287=this[_0x96ca4e(0x94e)]()?this[_0x96ca4e(0xb94)]():this[_0x96ca4e(0x568)]();if(_0xa22287){const _0x64d71e=_0xa22287['note'];if(_0x64d71e[_0x96ca4e(0x2e0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x64d71e[_0x96ca4e(0x2e0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x3fe)]=function(){const _0x1b4a72=_0x320868,_0x494c0a=this[_0x1b4a72(0x94e)]()?this[_0x1b4a72(0xb94)]():this[_0x1b4a72(0x568)]();if(_0x494c0a){const _0x5633b4=_0x494c0a['note'];if(_0x5633b4['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5633b4[_0x1b4a72(0x2e0)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x68d)]=function(){const _0x3b755a=_0x320868;if(this[_0x3b755a(0xc58)]===Sprite_SvEnemy)return;this[_0x3b755a(0x6be)](),this[_0x3b755a(0xb59)]();},Sprite_Battler[_0x320868(0x5bb)]['finalizeScale']=function(){const _0x46ed30=_0x320868,_0x24bb39=this[_0x46ed30(0x276)];_0x24bb39&&(_0x24bb39[_0x46ed30(0x57d)]['x']=this[_0x46ed30(0x317)](),_0x24bb39[_0x46ed30(0x57d)]['y']=this[_0x46ed30(0x42b)]());},Sprite_Battler['prototype'][_0x320868(0x317)]=function(){const _0x415b85=_0x320868;let _0x5d598e=0x1;return _0x5d598e*=this[_0x415b85(0x9ea)],_0x5d598e*=this['_growX'],_0x5d598e;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x42b)]=function(){const _0xe4d595=_0x320868;return 0x1*this[_0xe4d595(0x344)];},Sprite_Battler['prototype'][_0x320868(0x342)]=function(){const _0x453c0e=_0x320868;return this[_0x453c0e(0x529)]*this[_0x453c0e(0x317)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x764)]=function(){const _0x53f87d=_0x320868;return this[_0x53f87d(0x351)]*this[_0x53f87d(0x42b)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x8fb)]=function(_0x24ef82,_0xe5e2ff,_0x4b5ee0,_0x40daa9){const _0x53d947=_0x320868;if(!this[_0x53d947(0x46c)]())return;if(!this[_0x53d947(0x276)])return;if(this[_0x53d947(0x844)]===_0x24ef82&&this[_0x53d947(0xb0c)]===_0xe5e2ff)return;this[_0x53d947(0x844)]=_0x24ef82,this[_0x53d947(0xb0c)]=_0xe5e2ff,this['_growDuration']=_0x4b5ee0,this[_0x53d947(0x3c3)]=_0x4b5ee0,this[_0x53d947(0x328)]=_0x40daa9||_0x53d947(0x4ff),_0x4b5ee0<=0x0&&(this[_0x53d947(0xa09)]=this[_0x53d947(0x844)],this[_0x53d947(0x344)]=this[_0x53d947(0xb0c)]);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x6be)]=function(){const _0x471f2e=_0x320868;if(this[_0x471f2e(0x1d5)]<=0x0)return;if(!this[_0x471f2e(0x276)])return;const _0x2af8f1=this[_0x471f2e(0x1d5)],_0x496da6=this[_0x471f2e(0x3c3)],_0x42e2e2=this[_0x471f2e(0x328)];Imported[_0x471f2e(0x1c8)]?(this['_growX']=this[_0x471f2e(0x4c0)](this['_growX'],this[_0x471f2e(0x844)],_0x2af8f1,_0x496da6,_0x42e2e2),this[_0x471f2e(0x344)]=this[_0x471f2e(0x4c0)](this[_0x471f2e(0x344)],this[_0x471f2e(0xb0c)],_0x2af8f1,_0x496da6,_0x42e2e2)):(this[_0x471f2e(0xa09)]=(this[_0x471f2e(0xa09)]*(_0x2af8f1-0x1)+this[_0x471f2e(0x844)])/_0x2af8f1,this['_growY']=(this['_growY']*(_0x2af8f1-0x1)+this[_0x471f2e(0xb0c)])/_0x2af8f1);this[_0x471f2e(0x1d5)]--;if(this['_growDuration']<=0x0)this[_0x471f2e(0x39f)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x39f)]=function(){const _0x4bddfb=_0x320868;this[_0x4bddfb(0xa09)]=this[_0x4bddfb(0x844)],this[_0x4bddfb(0x344)]=this['_targetGrowY'];},Sprite_Battler[_0x320868(0x5bb)]['isGrowing']=function(){return this['_growDuration']>0x0;},Sprite_Battler['prototype']['startSkew']=function(_0x421cdc,_0x2994c8,_0x1234f1,_0x8eb589){const _0x291200=_0x320868;if(!this[_0x291200(0x46c)]())return;if(!this[_0x291200(0x276)])return;if(this['_targetSkewX']===_0x421cdc&&this[_0x291200(0xb44)]===_0x2994c8)return;this['_targetSkewX']=_0x421cdc,this[_0x291200(0xb44)]=_0x2994c8,this[_0x291200(0x37a)]=_0x1234f1,this[_0x291200(0x44b)]=_0x1234f1,this['_skewEasing']=_0x8eb589||_0x291200(0x4ff),_0x1234f1<=0x0&&(this['_distortionSprite'][_0x291200(0x12e)]['x']=this[_0x291200(0x54f)],this['_distortionSprite']['skew']['y']=this[_0x291200(0xb44)]);},Sprite_Battler[_0x320868(0x5bb)]['updateSkew']=function(){const _0x253d4d=_0x320868;if(this[_0x253d4d(0x37a)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x4306b8=this[_0x253d4d(0x37a)],_0x203b72=this[_0x253d4d(0x44b)],_0x4712af=this[_0x253d4d(0x503)],_0x546874=this[_0x253d4d(0x276)];Imported[_0x253d4d(0x1c8)]?(_0x546874['skew']['x']=this[_0x253d4d(0x4c0)](_0x546874['skew']['x'],this[_0x253d4d(0x54f)],_0x4306b8,_0x203b72,_0x4712af),_0x546874[_0x253d4d(0x12e)]['y']=this[_0x253d4d(0x4c0)](_0x546874[_0x253d4d(0x12e)]['y'],this[_0x253d4d(0xb44)],_0x4306b8,_0x203b72,_0x4712af)):(_0x546874[_0x253d4d(0x12e)]['x']=(_0x546874[_0x253d4d(0x12e)]['x']*(_0x4306b8-0x1)+this[_0x253d4d(0x54f)])/_0x4306b8,_0x546874['skew']['y']=(_0x546874['skew']['y']*(_0x4306b8-0x1)+this['_targetSkewY'])/_0x4306b8);this['_skewDuration']--;if(this[_0x253d4d(0x37a)]<=0x0)this[_0x253d4d(0x551)]();},Sprite_Battler['prototype'][_0x320868(0x551)]=function(){const _0x1b6263=_0x320868;this[_0x1b6263(0x276)]['skew']['x']=this[_0x1b6263(0x54f)],this[_0x1b6263(0x276)][_0x1b6263(0x12e)]['y']=this[_0x1b6263(0xb44)];},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x8fc)]=function(){const _0x1069c6=_0x320868;return this[_0x1069c6(0x37a)]>0x0;},Sprite_Battler[_0x320868(0x5bb)]['startSpin']=function(_0x2ba272,_0x570bba,_0x501403,_0x583754){const _0x1e2cd0=_0x320868;if(!this[_0x1e2cd0(0x46c)]())return;if(!this['_distortionSprite'])return;if(this[_0x1e2cd0(0x169)]===_0x2ba272)return;this[_0x1e2cd0(0x169)]=_0x2ba272,this[_0x1e2cd0(0x5ce)]=_0x570bba,this['_angleWholeDuration']=_0x570bba,this[_0x1e2cd0(0x44a)]=_0x501403||_0x1e2cd0(0x4ff),this[_0x1e2cd0(0x800)]=_0x583754,this[_0x1e2cd0(0x800)]===undefined&&(this[_0x1e2cd0(0x800)]=!![]),_0x570bba<=0x0&&(this[_0x1e2cd0(0x20b)]=_0x2ba272,this[_0x1e2cd0(0x800)]&&(this[_0x1e2cd0(0x169)]=0x0,this[_0x1e2cd0(0x20b)]=0x0));},Sprite_Battler['prototype'][_0x320868(0x619)]=function(){const _0x37f7d1=_0x320868;this[_0x37f7d1(0xb4c)](),this[_0x37f7d1(0x359)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xb4c)]=function(){const _0x147d11=_0x320868;if(this[_0x147d11(0x5ce)]<=0x0)return;const _0x2c2734=this[_0x147d11(0x5ce)],_0x4f8c5a=this['_angleWholeDuration'],_0x11d31b=this['_angleEasing'];Imported['VisuMZ_0_CoreEngine']?this[_0x147d11(0x20b)]=this['applyEasing'](this['_currentAngle'],this[_0x147d11(0x169)],_0x2c2734,_0x4f8c5a,_0x11d31b):this[_0x147d11(0x20b)]=(this['_currentAngle']*(_0x2c2734-0x1)+this[_0x147d11(0x169)])/_0x2c2734;this['_angleDuration']--;if(this[_0x147d11(0x5ce)]<=0x0)this[_0x147d11(0x3fc)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x3fc)]=function(){const _0x4c41a7=_0x320868;this[_0x4c41a7(0x20b)]=this['_targetAngle'],this['_angleRevertOnFinish']&&(this[_0x4c41a7(0x169)]=0x0,this[_0x4c41a7(0x20b)]=0x0);},Sprite_Battler['prototype'][_0x320868(0x746)]=function(){const _0x56ea34=_0x320868;return this[_0x56ea34(0x5ce)]>0x0;},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x359)]=function(){const _0x4a3b3a=_0x320868;if(!this[_0x4a3b3a(0x276)])return;const _0x36239c=this[_0x4a3b3a(0x20b)],_0x40a8b8=this['scale']['x'],_0x489be3=this[_0x4a3b3a(0x4be)][_0x4a3b3a(0x94e)]()?-0x1:0x1;this[_0x4a3b3a(0x276)]['angle']=_0x36239c*_0x40a8b8*_0x489be3;const _0x86be7d=this['_distortionSprite']['scale']['y'];this[_0x4a3b3a(0x276)]['y']=this[_0x4a3b3a(0x351)]*-0.5*(0x2-_0x86be7d),this[_0x4a3b3a(0x276)]['y']=Math[_0x4a3b3a(0x5e5)](this[_0x4a3b3a(0x276)]['y']);const _0x2cacee=[this[_0x4a3b3a(0x4bd)],this[_0x4a3b3a(0x6c4)],this[_0x4a3b3a(0x48e)]];for(const _0x420855 of _0x2cacee){if(!_0x420855)continue;_0x420855['y']=this['height']*0.5;}this['_shadowSprite']&&(this[_0x4a3b3a(0x6cd)]=this[_0x4a3b3a(0x6cd)]??0x1,this[_0x4a3b3a(0x422)]=this[_0x4a3b3a(0x422)]??0x1,this[_0x4a3b3a(0x18d)][_0x4a3b3a(0x57d)]['x']=this[_0x4a3b3a(0x276)]['scale']['x']*this[_0x4a3b3a(0x6cd)],this['_shadowSprite'][_0x4a3b3a(0x57d)]['y']=this[_0x4a3b3a(0x276)][_0x4a3b3a(0x57d)]['y']*this[_0x4a3b3a(0x422)]);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x434)]=Sprite_Actor[_0x320868(0x5bb)]['createStateSprite'],Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x9be)]=function(){const _0x43d5cf=_0x320868;VisuMZ[_0x43d5cf(0x5c8)]['Sprite_Actor_createStateSprite'][_0x43d5cf(0x5a6)](this),VisuMZ[_0x43d5cf(0x5c8)][_0x43d5cf(0x1d7)][_0x43d5cf(0x1b6)][_0x43d5cf(0x193)]&&this[_0x43d5cf(0x61a)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0xa66)]=Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x1ec)],Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x1ec)]=function(){const _0x5d4f99=_0x320868;VisuMZ[_0x5d4f99(0x5c8)][_0x5d4f99(0x1d7)]['HpGauge']['ShowEnemyGauge']&&this[_0x5d4f99(0x61a)](),VisuMZ[_0x5d4f99(0x5c8)]['Sprite_Enemy_createStateIconSprite'][_0x5d4f99(0x5a6)](this);},Sprite_Battler[_0x320868(0x5bb)]['createHpGaugeSprite']=function(){const _0x59bac9=_0x320868;if(!ConfigManager[_0x59bac9(0x711)])return;if(this[_0x59bac9(0xc58)]===Sprite_SvEnemy)return;const _0x383294=VisuMZ[_0x59bac9(0x5c8)][_0x59bac9(0x1d7)][_0x59bac9(0x1b6)],_0x2c6d62=new Sprite_HpGauge();_0x2c6d62[_0x59bac9(0x540)]['x']=_0x383294['AnchorX'],_0x2c6d62[_0x59bac9(0x540)]['y']=_0x383294[_0x59bac9(0xaa8)],_0x2c6d62[_0x59bac9(0x57d)]['x']=_0x2c6d62['scale']['y']=_0x383294['Scale'],this[_0x59bac9(0x3d1)]=_0x2c6d62,this[_0x59bac9(0x4f0)](this[_0x59bac9(0x3d1)]),Spriteset_Battle[_0x59bac9(0xa03)]&&BattleManager[_0x59bac9(0x1a5)](this['_hpGaugeSprite']);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xb52)]=Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x9c3)],Sprite_Battler['prototype'][_0x320868(0x9c3)]=function(_0x22bbbd){const _0xbdf0e7=_0x320868,_0x135b86=this[_0xbdf0e7(0x4be)];VisuMZ[_0xbdf0e7(0x5c8)][_0xbdf0e7(0xb52)][_0xbdf0e7(0x5a6)](this,_0x22bbbd),this[_0xbdf0e7(0x38b)](_0x22bbbd);if(_0x135b86!==_0x22bbbd)this[_0xbdf0e7(0x341)]();},Sprite_Battler['prototype'][_0x320868(0x38b)]=function(_0x4e560a){const _0x48437c=_0x320868;if(!_0x4e560a)return;if(!this[_0x48437c(0x3d1)])return;if(_0x4e560a[_0x48437c(0x94e)]()){}else{if(_0x4e560a[_0x48437c(0xb8b)]()){if(this[_0x48437c(0xc58)]===Sprite_SvEnemy&&!_0x4e560a[_0x48437c(0xb85)]())return;}}this['_hpGaugeSprite'][_0x48437c(0x8ff)](_0x4e560a,'hp');},Sprite_Battler['prototype'][_0x320868(0x974)]=function(){const _0xa9a587=_0x320868;return this[_0xa9a587(0x4be)]&&this[_0xa9a587(0x4be)][_0xa9a587(0x974)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x384)]=function(){const _0x24f234=_0x320868,_0x32f955=this[_0x24f234(0x4bd)]['bitmap'];if(!_0x32f955)return;const _0x6ff71b=_0x32f955[_0x24f234(0x529)];let _0x2b459b=_0x32f955[_0x24f234(0x351)];if(this[_0x24f234(0x4be)][_0x24f234(0x3e3)]()){if(this['_frame'])_0x2b459b=Math[_0x24f234(0x382)](0x0,this[_0x24f234(0x990)][_0x24f234(0x351)]-0x4);}this[_0x24f234(0x4bd)]['setFrame'](0x0,0x0,_0x6ff71b,_0x2b459b),this[_0x24f234(0x64e)](0x0,0x0,_0x6ff71b,_0x2b459b);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x986)]=function(){const _0x2b14aa=_0x320868;if(!this[_0x2b14aa(0x4be)])return;if(!this['_hpGaugeSprite'])return;const _0x48cc41=VisuMZ[_0x2b14aa(0x5c8)][_0x2b14aa(0x1d7)]['HpGauge'],_0x57a9e5=this[_0x2b14aa(0x3d1)];_0x57a9e5[_0x2b14aa(0x6b7)]=this[_0x2b14aa(0xa34)]();const _0x475ce9=_0x48cc41[_0x2b14aa(0x71f)],_0x11a680=_0x48cc41[_0x2b14aa(0xa83)];_0x57a9e5['x']=_0x475ce9,_0x57a9e5['x']+=this[_0x2b14aa(0x4be)][_0x2b14aa(0x1e8)](),_0x57a9e5['y']=-this['height']+_0x11a680,_0x57a9e5['y']+=this[_0x2b14aa(0x4be)][_0x2b14aa(0xb8f)](),Spriteset_Battle[_0x2b14aa(0xa03)]&&SceneManager['_scene'][_0x2b14aa(0xa26)]&&(_0x57a9e5['x']+=this['x'],_0x57a9e5['y']+=this['y']);},Sprite_Battler[_0x320868(0x5bb)]['isVisualHpGaugeDisplayed']=function(){const _0x1409fe=_0x320868;if(!this['_battler'])return![];if(this[_0x1409fe(0x4be)][_0x1409fe(0x94e)]())return!![];if(this['_battler'][_0x1409fe(0x2b4)]())return![];if(this[_0x1409fe(0x385)]<=0x0)return![];const _0x145cff=this[_0x1409fe(0x4be)][_0x1409fe(0x568)]()[_0x1409fe(0x418)];if(_0x145cff['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x145cff[_0x1409fe(0x2e0)](/<HIDE HP GAUGE>/i))return![];const _0x3265a6=VisuMZ[_0x1409fe(0x5c8)]['Settings'][_0x1409fe(0x1b6)];if(_0x3265a6[_0x1409fe(0x2e9)]){if(_0x3265a6['BTestBypass']&&BattleManager[_0x1409fe(0x685)]())return!![];if(this[_0x1409fe(0x4be)][_0x1409fe(0x22e)])return![];return this[_0x1409fe(0x4be)][_0x1409fe(0xa1a)]();}return!![];},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc18)]=Sprite_Battler['prototype']['isMoving'],Sprite_Battler['prototype'][_0x320868(0xc5a)]=function(){const _0xe1b702=_0x320868;if(!this[_0xe1b702(0x4be)])return![];if(this[_0xe1b702(0xb92)]>0x0)return!![];return VisuMZ[_0xe1b702(0x5c8)][_0xe1b702(0xc18)]['call'](this);},VisuMZ['BattleCore'][_0x320868(0xa56)]=Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x129)],Sprite_Battler['prototype']['startMove']=function(_0x33c590,_0x5aef07,_0x16ab09){const _0x510fea=_0x320868;this[_0x510fea(0x46c)]()&&VisuMZ[_0x510fea(0x5c8)][_0x510fea(0xa56)][_0x510fea(0x5a6)](this,_0x33c590,_0x5aef07,_0x16ab09);},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x46c)]=function(){const _0x5b8115=_0x320868;if(this[_0x5b8115(0x4be)]&&this[_0x5b8115(0x4be)][_0x5b8115(0x3e3)]())return![];if(this[_0x5b8115(0x4be)]&&!this[_0x5b8115(0x4be)][_0x5b8115(0x3ed)]())return![];return $gameSystem[_0x5b8115(0x5a9)]();},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0x7ca)]=function(){},Sprite_Battler[_0x320868(0x5bb)]['stepBack']=function(){const _0x38db41=_0x320868;this[_0x38db41(0x129)](0x0,0x0,0xc);},Sprite_Battler[_0x320868(0x5bb)]['retreat']=function(){},Sprite_Battler[_0x320868(0x5bb)][_0x320868(0xbbc)]=function(){const _0x1fce00=_0x320868,_0x419206=VisuMZ['BattleCore'][_0x1fce00(0x1d7)][_0x1fce00(0x818)],_0x47b3fe=this['_battler']&&this[_0x1fce00(0x4be)][_0x1fce00(0x94e)]()?0x1:-0x1,_0x308419=this[_0x1fce00(0xb8e)]-this[_0x1fce00(0xa91)]+_0x47b3fe*_0x419206[_0x1fce00(0x6f8)],_0x17dec2=this[_0x1fce00(0xba4)]-this['_homeY']+_0x47b3fe*_0x419206[_0x1fce00(0x77b)],_0x13555c=_0x419206[_0x1fce00(0xa14)];this['startMove'](_0x308419,_0x17dec2,_0x13555c);},Sprite_Battler['prototype']['startShakeFlinch']=function(_0x59767b,_0xafeafd){const _0xc646ef=_0x320868,_0x49acb8=VisuMZ[_0xc646ef(0x5c8)][_0xc646ef(0x1d7)]['Actor'];this['_shakeFlinchDuration']=Math[_0xc646ef(0x5e5)]((_0x49acb8[_0xc646ef(0x61f)]??0x18)*_0xafeafd),this[_0xc646ef(0x750)]=Math['max'](this[_0xc646ef(0x750)],_0x59767b);},Sprite_Battler[_0x320868(0x5bb)]['updateShakeFlinch']=function(){const _0x5a1bab=_0x320868,_0x4875ca=VisuMZ[_0x5a1bab(0x5c8)][_0x5a1bab(0x1d7)][_0x5a1bab(0x818)];if(!(_0x4875ca[_0x5a1bab(0x4d6)]??![]))return;if(this[_0x5a1bab(0x684)]>0x0){const _0x51e2b3=this[_0x5a1bab(0x684)];this['_shakeFlinchPower']=this[_0x5a1bab(0x750)]*(_0x51e2b3-0x1)/_0x51e2b3,this['_shakeFlinchDuration']--,this['_shakeFlinchDuration']<=0x0&&(this[_0x5a1bab(0x750)]=0x0);}this[_0x5a1bab(0x750)]>0x0?(this[_0x5a1bab(0x4bd)]['x']=Math[_0x5a1bab(0x4cb)](this[_0x5a1bab(0x750)])*(Math[_0x5a1bab(0xa3d)]()<0.5?-0x1:0x1),this[_0x5a1bab(0xba4)]!==this['y']&&(this[_0x5a1bab(0x4bd)]['y']=this[_0x5a1bab(0x351)]*0.5,this[_0x5a1bab(0x4bd)]['y']+=Math['randomInt'](this['_shakeFlinchPower'])*(Math[_0x5a1bab(0xa3d)]()<0.5?-0x1:0x1))):(this[_0x5a1bab(0x4bd)]['x']=0x0,this[_0x5a1bab(0x4bd)]['y']=this[_0x5a1bab(0x351)]*0.5);},VisuMZ['BattleCore'][_0x320868(0xa75)]=Sprite_Actor['prototype']['initMembers'],Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x92d)]=function(){const _0x414382=_0x320868;VisuMZ['BattleCore'][_0x414382(0xa75)][_0x414382(0x5a6)](this),this[_0x414382(0xbe5)]();},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x1f9)]=function(){const _0x2b33e2=_0x320868;return this['_distortionSprite']||this[_0x2b33e2(0x4bd)]||this;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x6fa)]=Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x8d3)],Sprite_Actor['prototype'][_0x320868(0x8d3)]=function(){},Sprite_Actor['prototype'][_0x320868(0x863)]=function(_0x294268){const _0x3fe4ae=_0x320868;if(SceneManager[_0x3fe4ae(0x4a8)]())return;if(!_0x294268)return;if(!_0x294268[_0x3fe4ae(0x46c)]())return;VisuMZ[_0x3fe4ae(0x5c8)][_0x3fe4ae(0x6fa)][_0x3fe4ae(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x17d)]=Sprite_Actor['prototype'][_0x320868(0x870)],Sprite_Actor[_0x320868(0x5bb)]['setActorHome']=function(_0x4bff3c){const _0x3125ee=_0x320868;VisuMZ['BattleCore'][_0x3125ee(0x1d7)][_0x3125ee(0x818)]['HomePosJS']?VisuMZ[_0x3125ee(0x5c8)][_0x3125ee(0x1d7)][_0x3125ee(0x818)][_0x3125ee(0x56e)][_0x3125ee(0x5a6)](this,_0x4bff3c):VisuMZ[_0x3125ee(0x5c8)]['Sprite_Actor_setActorHome'][_0x3125ee(0x5a6)](this,_0x4bff3c);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x12b)]=Sprite_Actor['prototype'][_0x320868(0x9c3)],Sprite_Actor['prototype'][_0x320868(0x9c3)]=function(_0x275e0d){const _0x17d6f1=_0x320868;VisuMZ[_0x17d6f1(0x5c8)][_0x17d6f1(0x12b)]['call'](this,_0x275e0d),this[_0x17d6f1(0x15d)](_0x275e0d);},Sprite_Actor['prototype'][_0x320868(0x15d)]=function(_0x496cc2){const _0x21499c=_0x320868;if(!_0x496cc2)return;if(!this['_mainSprite'])return;this[_0x21499c(0x4bd)][_0x21499c(0x540)]['x']=this[_0x21499c(0x948)]['svBattlerAnchorX'](),this['_mainSprite'][_0x21499c(0x540)]['y']=this['_actor']['svBattlerAnchorY'](),this[_0x21499c(0xa59)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x675)]=Sprite_Actor['prototype']['update'],Sprite_Actor[_0x320868(0x5bb)]['update']=function(){const _0x54c97b=_0x320868;VisuMZ[_0x54c97b(0x5c8)][_0x54c97b(0x675)][_0x54c97b(0x5a6)](this),this[_0x54c97b(0x948)]&&(this[_0x54c97b(0x7c1)](),this[_0x54c97b(0xbbb)]());},VisuMZ[_0x320868(0x5c8)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x8b9)],Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x8b9)]=function(){const _0x44c2aa=_0x320868;VisuMZ[_0x44c2aa(0x5c8)][_0x44c2aa(0xa79)]['call'](this),this[_0x44c2aa(0x4bd)]&&this[_0x44c2aa(0x4bd)][_0x44c2aa(0xa25)]&&this['_battler']&&(this[_0x44c2aa(0x4bd)][_0x44c2aa(0xa25)][_0x44c2aa(0x65a)]!==this[_0x44c2aa(0x4be)][_0x44c2aa(0xa4c)]()&&(this['_mainSprite'][_0x44c2aa(0xa25)]['smooth']=this[_0x44c2aa(0x4be)][_0x44c2aa(0xa4c)]()));},VisuMZ[_0x320868(0x5c8)][_0x320868(0x18e)]=Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x68f)],Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x68f)]=function(){const _0x1ad2fb=_0x320868;VisuMZ[_0x1ad2fb(0x5c8)][_0x1ad2fb(0x18e)][_0x1ad2fb(0x5a6)](this),this[_0x1ad2fb(0x6c8)]();},Sprite_Actor['prototype'][_0x320868(0x6c8)]=function(){const _0x3cec76=_0x320868;if(!this[_0x3cec76(0x4bd)])return;if(!this[_0x3cec76(0x18d)])return;this[_0x3cec76(0xa59)](),this[_0x3cec76(0x955)]();},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x7c1)]=function(){const _0x5eceac=_0x320868;{this[_0x5eceac(0xb65)]['scale']['x']=0x1/(this[_0x5eceac(0x57d)]['x']||0.001),this['_stateSprite'][_0x5eceac(0x57d)]['y']=0x1/(this[_0x5eceac(0x57d)]['y']||0.001);}{this[_0x5eceac(0xb65)]['x']=0x0,this[_0x5eceac(0xb65)]['y']=-this[_0x5eceac(0x351)]-0x20+0x60;const _0x4a3080=VisuMZ[_0x5eceac(0x5c8)][_0x5eceac(0x1d7)][_0x5eceac(0x818)];this[_0x5eceac(0xb65)]['x']+=_0x4a3080['StateOverlayOffsetX']??0x0,this[_0x5eceac(0xb65)]['y']+=_0x4a3080['StateOverlayOffsetY']??0x0;}},Sprite_Actor['prototype'][_0x320868(0xbbb)]=function(){const _0x30f124=_0x320868;if(!$gameSystem[_0x30f124(0x5a9)]()&&this[_0x30f124(0xc58)]===Sprite_Actor){const _0x25cc12=Scene_Battle[_0x30f124(0x5bb)][_0x30f124(0x2d1)]();[_0x30f124(0x86a),_0x30f124(0x69b),_0x30f124(0xa42),'border'][_0x30f124(0x6d2)](_0x25cc12)&&(this[_0x30f124(0x385)]=0x0);}},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x47a)]=function(){const _0x379b8e=_0x320868,_0x5b10c4=this['_actor'];if(_0x5b10c4){if(_0x5b10c4[_0x379b8e(0x8bd)])return;const _0x4d43bc=_0x5b10c4[_0x379b8e(0x33e)]();if(_0x5b10c4[_0x379b8e(0x760)]()||_0x5b10c4[_0x379b8e(0xaaf)]())this[_0x379b8e(0x963)]('walk');else{if(_0x4d43bc===0x3)this[_0x379b8e(0x963)](_0x379b8e(0xa23));else{if(_0x4d43bc===0x2)this['startMotion'](_0x379b8e(0x665));else{if(this[_0x379b8e(0xb71)])this[_0x379b8e(0x963)]('escape');else{if(_0x5b10c4[_0x379b8e(0xa80)]())this[_0x379b8e(0x963)]('wait');else{if(_0x5b10c4[_0x379b8e(0x45b)]())this[_0x379b8e(0x963)](_0x379b8e(0x59f));else{if(_0x5b10c4[_0x379b8e(0x720)]()||_0x5b10c4[_0x379b8e(0x8f9)]())this[_0x379b8e(0x963)](_0x379b8e(0xa12));else{if(_0x4d43bc===0x1)this[_0x379b8e(0x963)](_0x379b8e(0x7ba));else{if(_0x5b10c4[_0x379b8e(0x542)]())this[_0x379b8e(0x963)](_0x379b8e(0x642));else{if(_0x5b10c4[_0x379b8e(0x9de)]())this[_0x379b8e(0x963)](_0x379b8e(0xa13));else _0x5b10c4[_0x379b8e(0x7ce)]()?this[_0x379b8e(0x963)]('wait'):this['startMotion']('walk');}}}}}}}}}}},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x6b0)]=function(){const _0x215ce8=_0x320868,_0x3366a1=0xa,_0x5a03a5=0x12c*_0x3366a1,_0x355574=0x1e*_0x3366a1;this[_0x215ce8(0x129)](_0x5a03a5,0x0,_0x355574);},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x717)]=function(){const _0x3db88e=_0x320868;Sprite_Battler[_0x3db88e(0x5bb)][_0x3db88e(0x717)][_0x3db88e(0x5a6)](this);},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x2ff)]=function(){const _0x150697=_0x320868;return Sprite_Battler[_0x150697(0x402)];},Sprite_Weapon[_0x320868(0x5bb)][_0x320868(0x52d)]=function(){const _0x421159=_0x320868;return Sprite_Battler[_0x421159(0x402)];},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x73f)]=function(){},Sprite_Actor['prototype']['setupWeaponAnimation']=function(){},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x516)]=function(){const _0x192b6b=_0x320868;if(this['_motion']&&++this['_motionCount']>=this[_0x192b6b(0x2ff)]()){if(this[_0x192b6b(0x4c4)][_0x192b6b(0x53b)])this[_0x192b6b(0x5bd)]=(this[_0x192b6b(0x5bd)]+0x1)%0x4;else{if(this['_pattern']<0x2)this[_0x192b6b(0x5bd)]++;else{const _0x5269dd=this[_0x192b6b(0x948)];if(_0x5269dd)_0x5269dd[_0x192b6b(0x8bd)]=undefined;this['refreshMotion']();}}this['_motionCount']=0x0;}},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x851)]=function(_0x41413e){const _0x5c22a0=_0x320868;if(this[_0x5c22a0(0x4be)]&&this[_0x5c22a0(0x4be)][_0x5c22a0(0x3e3)]()){this[_0x5c22a0(0x4c4)]=Sprite_Actor[_0x5c22a0(0x799)][_0x5c22a0(0xa23)];return;}const _0x52626d=Sprite_Actor[_0x5c22a0(0x799)][_0x41413e];this[_0x5c22a0(0x4c4)]=_0x52626d,this[_0x5c22a0(0xae4)]=0x0,this[_0x5c22a0(0x5bd)]=0x0;},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x58a)]=function(_0x4b8689){const _0x413cfb=_0x320868;if(this[_0x413cfb(0x974)]())return;this[_0x413cfb(0x96f)](),this['_weaponSprite'][_0x413cfb(0x8ff)](_0x4b8689),this['_actor']['clearWeaponAnimation']();},Sprite_Actor['prototype'][_0x320868(0x96f)]=function(){const _0x3a4861=_0x320868;let _0x46e1e6=-0x10,_0x13a180=this['height']*0.5;const _0x5c471e=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x3fd711=this[_0x3a4861(0x4be)][_0x3a4861(0x22d)]()['map'](_0x3d33e0=>_0x3d33e0&&_0x3d33e0['note'][_0x3a4861(0x2e0)](_0x5c471e)?Number(RegExp['$1']):0x0),_0x34f8e3=this[_0x3a4861(0x4be)][_0x3a4861(0x22d)]()[_0x3a4861(0x200)](_0x1eeae2=>_0x1eeae2&&_0x1eeae2[_0x3a4861(0x418)]['match'](_0x5c471e)?Number(RegExp['$2']):0x0);_0x46e1e6=_0x3fd711['reduce']((_0x13b8c6,_0x50c326)=>_0x13b8c6+_0x50c326,_0x46e1e6),_0x13a180=_0x34f8e3['reduce']((_0x38ab31,_0x4059b7)=>_0x38ab31+_0x4059b7,_0x13a180),this[_0x3a4861(0x7be)]['x']=_0x46e1e6,this[_0x3a4861(0x7be)]['y']=_0x13a180,this[_0x3a4861(0x7be)][_0x3a4861(0x77d)]();},Sprite_Weapon[_0x320868(0x5bb)][_0x320868(0x8ff)]=function(_0x57902b){const _0x44b98c=_0x320868;this[_0x44b98c(0x361)]=_0x57902b,this[_0x44b98c(0x80f)]=-0x1,this[_0x44b98c(0x5bd)]=0x0,this[_0x44b98c(0x9a0)](),this[_0x44b98c(0xc29)]();},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x853)]=function(){},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x7ca)]=function(){const _0x4e5f12=_0x320868,_0x44c16f=VisuMZ[_0x4e5f12(0x5c8)]['Settings'][_0x4e5f12(0x32c)],_0x1e1f21=_0x44c16f[_0x4e5f12(0x21a)],_0x4d45d0=_0x44c16f[_0x4e5f12(0xb60)],_0x12ca82=_0x44c16f[_0x4e5f12(0xb5c)];this[_0x4e5f12(0x129)](-_0x1e1f21,-_0x4d45d0,_0x12ca82);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x658)]=Sprite_Actor['prototype'][_0x320868(0xc29)],Sprite_Actor[_0x320868(0x5bb)][_0x320868(0xc29)]=function(){const _0x4815b6=_0x320868;this['hasStaticSvBattler']()?this[_0x4815b6(0x384)]():(this[_0x4815b6(0x42a)](),VisuMZ['BattleCore'][_0x4815b6(0x658)][_0x4815b6(0x5a6)](this));},Sprite_Actor[_0x320868(0x5bb)][_0x320868(0x42a)]=function(){const _0x35abc7=_0x320868;if(this[_0x35abc7(0x4be)]&&this[_0x35abc7(0x4be)]['_freezeMotionData']){const _0x6c2320=this[_0x35abc7(0x4be)][_0x35abc7(0x485)];this[_0x35abc7(0x4c4)]=Sprite_Actor[_0x35abc7(0x799)][_0x6c2320[_0x35abc7(0x8df)]],this[_0x35abc7(0x5bd)]=_0x6c2320[_0x35abc7(0x967)];const _0x5bc4b2=this[_0x35abc7(0x7be)];_0x5bc4b2['freezeFrame'](_0x6c2320[_0x35abc7(0x456)],_0x6c2320[_0x35abc7(0x967)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon['prototype'][_0x320868(0x168)]=function(_0x206f92,_0x513238){const _0x2606e0=_0x320868;this[_0x2606e0(0x361)]=_0x206f92,this[_0x2606e0(0x80f)]=-Infinity,this[_0x2606e0(0x5bd)]=_0x513238,this['loadBitmap'](),this[_0x2606e0(0xc29)]();},Sprite_Enemy['prototype'][_0x320868(0x92d)]=function(){const _0x1b7335=_0x320868;Sprite_Battler[_0x1b7335(0x5bb)][_0x1b7335(0x92d)][_0x1b7335(0x5a6)](this),this[_0x1b7335(0x622)]=null,this[_0x1b7335(0xb00)]=![],this[_0x1b7335(0x53f)]='',this['_battlerHue']=0x0,this[_0x1b7335(0x6c0)]=null,this[_0x1b7335(0x606)]=0x0,this[_0x1b7335(0xbc6)]=0x0,this[_0x1b7335(0xa3e)](),this[_0x1b7335(0x1ec)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x2f2)]=Sprite_Enemy[_0x320868(0x5bb)]['update'],Sprite_Enemy['prototype'][_0x320868(0x77d)]=function(){const _0x29f981=_0x320868;VisuMZ[_0x29f981(0x5c8)]['Sprite_Enemy_update'][_0x29f981(0x5a6)](this),this[_0x29f981(0xa59)](),this['updateNameTempVisibility']();},Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0xa3e)]=function(){const _0x138c7c=_0x320868;this['_mainSprite']=new Sprite(),this['_mainSprite'][_0x138c7c(0x540)]['x']=0.5,this[_0x138c7c(0x4bd)][_0x138c7c(0x540)]['y']=0x1,this['addChild'](this['_mainSprite']),this[_0x138c7c(0xbe5)]();},Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x1f9)]=function(){const _0x7b366f=_0x320868;return this['_distortionSprite']||this[_0x7b366f(0x4bd)]||this;},Sprite_Enemy[_0x320868(0x5bb)]['loadBitmap']=function(_0x36b315){const _0x45970b=_0x320868;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x45970b(0xb85)]()){const _0x57f902=this[_0x45970b(0x622)][_0x45970b(0x2a5)]();this[_0x45970b(0xa25)]=new Bitmap(_0x57f902[_0x45970b(0x529)],_0x57f902[_0x45970b(0x351)]),this[_0x45970b(0x4bd)][_0x45970b(0xa25)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x45970b(0x5a9)]()){const _0x14792b=ImageManager['loadSvEnemy'](_0x36b315);_0x14792b['addLoadListener'](this[_0x45970b(0x4e0)][_0x45970b(0x1cc)](this,_0x14792b));}else{const _0x5d3f75=ImageManager[_0x45970b(0x229)](_0x36b315);_0x5d3f75[_0x45970b(0xa05)](this[_0x45970b(0x4e0)]['bind'](this,_0x5d3f75));}}},Sprite_Enemy['prototype']['onStaticEnemyBitmapLoad']=function(_0x516581){const _0x38edc1=_0x320868;this['_mainSprite']['bitmap']=_0x516581,this[_0x38edc1(0xa25)]=new Bitmap(_0x516581[_0x38edc1(0x529)],_0x516581[_0x38edc1(0x351)]);},VisuMZ[_0x320868(0x5c8)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x532)],Sprite_Enemy[_0x320868(0x5bb)]['setHue']=function(_0x1bc98e){const _0x3914b8=_0x320868;this['_mainSprite']&&this['_mainSprite'][_0x3914b8(0x532)](_0x1bc98e);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xb6a)]=Sprite_Enemy[_0x320868(0x5bb)]['initVisibility'],Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x8e1)]=function(){const _0x4b377f=_0x320868;this[_0x4b377f(0x3ab)]()?VisuMZ['BattleCore']['Sprite_Enemy_initVisibility'][_0x4b377f(0x5a6)](this):(this['_appeared']=!this[_0x4b377f(0x622)][_0x4b377f(0x2b4)](),!this[_0x4b377f(0xb00)]&&(this[_0x4b377f(0x385)]=0x0));},VisuMZ['BattleCore'][_0x320868(0x747)]=Sprite_Enemy['prototype']['updateCollapse'],Sprite_Enemy['prototype']['updateCollapse']=function(){const _0x112d09=_0x320868;if(this[_0x112d09(0x3ab)]())VisuMZ[_0x112d09(0x5c8)][_0x112d09(0x747)]['call'](this);},Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0xc29)]=function(){const _0x2c2842=_0x320868;Sprite_Battler[_0x2c2842(0x5bb)]['updateFrame'][_0x2c2842(0x5a6)](this);const _0x6441e3=this[_0x2c2842(0x1f9)]()||this;if(!_0x6441e3)return;!_0x6441e3[_0x2c2842(0xa25)]&&(_0x6441e3[_0x2c2842(0xa25)]=new Bitmap(this[_0x2c2842(0x529)]||0x1,this['height']||0x1));if(this[_0x2c2842(0x6c0)]===_0x2c2842(0x2bb))this['_mainSprite'][_0x2c2842(0x64e)](0x0,0x0,this['_mainSprite'][_0x2c2842(0x529)]||0x1,this[_0x2c2842(0x606)]);else{let _0x123565=0x1;if(_0x6441e3&&_0x6441e3[_0x2c2842(0xa25)])_0x123565=_0x6441e3[_0x2c2842(0xa25)][_0x2c2842(0x529)];let _0x412d63=0x1;if(this['bitmap'])_0x412d63=this['bitmap'][_0x2c2842(0x351)];_0x6441e3[_0x2c2842(0x64e)](0x0,0x0,_0x123565,_0x412d63);}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x7ed)]=Sprite_Enemy['prototype']['updateBossCollapse'],Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x3d6)]=function(){const _0x55498c=_0x320868;if(this['allowCollapse']())VisuMZ[_0x55498c(0x5c8)][_0x55498c(0x7ed)][_0x55498c(0x5a6)](this);},Sprite_Enemy[_0x320868(0x5bb)]['isMoving']=function(){const _0x11a3a9=_0x320868;return Sprite_Battler[_0x11a3a9(0x5bb)][_0x11a3a9(0xc5a)][_0x11a3a9(0x5a6)](this);},VisuMZ[_0x320868(0x5c8)]['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x7c1)],Sprite_Enemy['prototype']['updateStateSprite']=function(){const _0x35dff4=_0x320868;VisuMZ[_0x35dff4(0x5c8)][_0x35dff4(0xac8)][_0x35dff4(0x5a6)](this),this[_0x35dff4(0x66e)]();},Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x66e)]=function(){const _0x555424=_0x320868,_0x367b91=VisuMZ['BattleCore']['Settings'][_0x555424(0x14d)];if(_0x367b91[_0x555424(0x72a)]&&!_0x367b91[_0x555424(0x89f)]){this[_0x555424(0x125)][_0x555424(0x385)]=0x0;return;}this[_0x555424(0x125)]['x']=0x0,this[_0x555424(0x125)]['x']+=this[_0x555424(0x4be)][_0x555424(0x1e8)]();let _0x1ceefb=0x1;if(this[_0x555424(0xa25)])_0x1ceefb=this[_0x555424(0xa25)]['height'];this[_0x555424(0x125)]['y']=-_0x1ceefb-this[_0x555424(0x125)][_0x555424(0x351)]-0x4,this['_stateIconSprite']['y']+=this[_0x555424(0x4be)]['battleUIOffsetY'](),this['_stateIconSprite'][_0x555424(0x57d)]['x']=0x1/(this['scale']['x']||0.001),this[_0x555424(0x125)][_0x555424(0x57d)]['y']=0x1/(this[_0x555424(0x57d)]['y']||0.001),this['hasSvBattler']()&&(this['_svBattlerSprite'][_0x555424(0xb65)][_0x555424(0x57d)]['x']=-0x1/(this[_0x555424(0x57d)]['x']||0.001),this[_0x555424(0x6c4)]['_stateSprite']['scale']['y']=0x1/(this[_0x555424(0x57d)]['y']||0.001));},Sprite_Enemy['prototype'][_0x320868(0xb23)]=function(){const _0x2534b0=_0x320868;this[_0x2534b0(0x4be)]&&this['_battler'][_0x2534b0(0xb23)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x567)]=Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x9c3)],Sprite_Enemy['prototype'][_0x320868(0x9c3)]=function(_0x4654b3){const _0x2c64e2=_0x320868;VisuMZ[_0x2c64e2(0x5c8)][_0x2c64e2(0x567)]['call'](this,_0x4654b3),this[_0x2c64e2(0x9cd)](_0x4654b3);},Sprite_Enemy['prototype'][_0x320868(0x9cd)]=function(_0x3dfb83){const _0x3ee6d9=_0x320868;!this[_0x3ee6d9(0x6c4)]&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x3dfb83),this[_0x3ee6d9(0xbe5)]()),this[_0x3ee6d9(0x6c4)]['setBattler'](_0x3dfb83);},Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0xb85)]=function(){const _0x4f51dd=_0x320868;return this['_enemy']&&this['_enemy'][_0x4f51dd(0xb85)]();},Sprite_Enemy[_0x320868(0x5bb)]['allowCollapse']=function(){const _0x319015=_0x320868;return this['hasSvBattler']()?this[_0x319015(0x622)][_0x319015(0x3ab)]():!![];},Sprite_Enemy[_0x320868(0x5bb)]['refreshMotion']=function(){const _0x2ad1bc=_0x320868;this[_0x2ad1bc(0xb85)]()&&this['_svBattlerSprite'][_0x2ad1bc(0x47a)]();},Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x851)]=function(_0x28523d){const _0x406719=_0x320868;if(this[_0x406719(0xb85)]())this[_0x406719(0x6c4)][_0x406719(0x851)](_0x28523d);},Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x58a)]=function(_0x58d140){const _0x337232=_0x320868;if(this['hasSvBattler']())this[_0x337232(0x6c4)][_0x337232(0x58a)](_0x58d140);},Sprite_Enemy[_0x320868(0x5bb)][_0x320868(0x7ca)]=function(){const _0x51e639=_0x320868,_0xd5cf12=VisuMZ['BattleCore']['Settings'][_0x51e639(0x32c)],_0x362339=_0xd5cf12[_0x51e639(0x21a)],_0x28e6d7=_0xd5cf12[_0x51e639(0xb60)],_0x334583=_0xd5cf12[_0x51e639(0xb5c)];this[_0x51e639(0x129)](_0x362339,_0x28e6d7,_0x334583);};function Sprite_SvEnemy(){const _0x3f8917=_0x320868;this[_0x3f8917(0x136)](...arguments);}Sprite_SvEnemy[_0x320868(0x5bb)]=Object[_0x320868(0x86c)](Sprite_Actor[_0x320868(0x5bb)]),Sprite_SvEnemy[_0x320868(0x5bb)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x320868(0x5bb)][_0x320868(0x136)]=function(_0xa0cd76){const _0xa98442=_0x320868;Sprite_Actor['prototype'][_0xa98442(0x136)]['call'](this,_0xa0cd76),this[_0xa98442(0x57d)]['x']=-0x1,this['_stateSprite'][_0xa98442(0x57d)]['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x320868(0xbcb)]=function(){},Sprite_SvEnemy[_0x320868(0x5bb)][_0x320868(0x8d3)]=function(){},Sprite_SvEnemy[_0x320868(0x5bb)]['setActorHome']=function(_0x624d6){},Sprite_SvEnemy['prototype'][_0x320868(0x68f)]=function(){},Sprite_SvEnemy[_0x320868(0x5bb)]['updateShadowPosition']=function(){},Sprite_SvEnemy['prototype'][_0x320868(0x7c1)]=function(){const _0x1ee94d=_0x320868;this[_0x1ee94d(0xb65)][_0x1ee94d(0x6b7)]=![];},Sprite_SvEnemy['prototype'][_0x320868(0x8b9)]=function(){const _0x27541f=_0x320868;Sprite_Battler[_0x27541f(0x5bb)][_0x27541f(0x8b9)]['call'](this);const _0x2aed9b=this[_0x27541f(0x948)][_0x27541f(0x9e7)]();this[_0x27541f(0x53f)]!==_0x2aed9b&&(this['_battlerName']=_0x2aed9b,this['_mainSprite']['bitmap']=ImageManager[_0x27541f(0x997)](_0x2aed9b)),this[_0x27541f(0x4bd)]&&this[_0x27541f(0x4bd)]['bitmap']&&this[_0x27541f(0x4be)]&&(this[_0x27541f(0x4bd)][_0x27541f(0xa25)][_0x27541f(0x65a)]!==this[_0x27541f(0x4be)][_0x27541f(0xa4c)]()&&(this[_0x27541f(0x4bd)]['bitmap'][_0x27541f(0x65a)]=this[_0x27541f(0x4be)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x320868(0x5bb)][_0x320868(0x6b0)]=function(){},Sprite_SvEnemy[_0x320868(0x5bb)][_0x320868(0x129)]=function(_0xe91fa5,_0x42d764,_0x2412a0){const _0x2fc9e3=_0x320868;if(this[_0x2fc9e3(0xa30)])this[_0x2fc9e3(0xa30)]['startMove'](_0xe91fa5,_0x42d764,_0x2412a0);},Sprite_SvEnemy[_0x320868(0x5bb)][_0x320868(0x47a)]=function(){const _0x26bc78=_0x320868,_0x271062=this['_actor'];if(_0x271062){const _0x37b1cb=_0x271062['stateMotionIndex']();if(_0x271062[_0x26bc78(0x760)]()||_0x271062[_0x26bc78(0xaaf)]())this[_0x26bc78(0x963)](_0x26bc78(0xa13));else{if(_0x37b1cb===0x3)this[_0x26bc78(0x963)](_0x26bc78(0xa23));else{if(_0x37b1cb===0x2)this[_0x26bc78(0x963)](_0x26bc78(0x665));else{if(_0x271062[_0x26bc78(0x45b)]())this[_0x26bc78(0x963)](_0x26bc78(0x59f));else{if(_0x271062['isGuard']()||_0x271062['isGuardWaiting']())this[_0x26bc78(0x963)](_0x26bc78(0xa12));else{if(_0x37b1cb===0x1)this[_0x26bc78(0x963)](_0x26bc78(0x7ba));else{if(_0x271062[_0x26bc78(0x542)]())this[_0x26bc78(0x963)](_0x26bc78(0x642));else _0x271062['isUndecided']()?this[_0x26bc78(0x963)](_0x271062['svBattlerData']()[_0x26bc78(0x896)]||_0x26bc78(0xa13)):this['startMotion'](_0x271062[_0x26bc78(0x2a5)]()[_0x26bc78(0x896)]||_0x26bc78(0xa13));}}}}}}}},Sprite_SvEnemy[_0x320868(0x5bb)][_0x320868(0x686)]=function(){const _0x677135=_0x320868;return this[_0x677135(0xa30)]?this['parent']['_offsetX']===0x0&&this['parent'][_0x677135(0xac7)]===0x0:!![];},Sprite_SvEnemy[_0x320868(0x5bb)][_0x320868(0x1cf)]=function(){},VisuMZ['BattleCore'][_0x320868(0xc38)]=Sprite_Animation[_0x320868(0x5bb)]['targetSpritePosition'],Sprite_Animation[_0x320868(0x5bb)][_0x320868(0x15b)]=function(_0x13cbad){const _0x441781=_0x320868;return _0x13cbad['_distortionSprite']?this[_0x441781(0x48f)](_0x13cbad):VisuMZ[_0x441781(0x5c8)][_0x441781(0xc38)][_0x441781(0x5a6)](this,_0x13cbad);},Sprite_Animation[_0x320868(0x5bb)][_0x320868(0x48f)]=function(_0x38151b){const _0x27ec93=_0x320868;let _0x59f0e5=_0x38151b['x'],_0x2c21d8=_0x38151b['y'],_0x5edd1b=_0x38151b[_0x27ec93(0x351)],_0x25e364=_0x38151b[_0x27ec93(0x276)][_0x27ec93(0x57d)]['y'];_0x38151b['x']=_0x38151b['_baseX']+_0x38151b[_0x27ec93(0x364)](),_0x38151b['y']=_0x38151b[_0x27ec93(0xba4)]+_0x38151b[_0x27ec93(0xbf1)](),_0x38151b[_0x27ec93(0x351)]*=_0x25e364;let _0x488095=VisuMZ[_0x27ec93(0x5c8)]['Sprite_Animation_targetSpritePosition'][_0x27ec93(0x5a6)](this,_0x38151b);return _0x38151b['x']=_0x59f0e5,_0x38151b['y']=_0x2c21d8,_0x38151b[_0x27ec93(0x351)]=_0x5edd1b,_0x488095;},Sprite_Animation[_0x320868(0x5bb)]['isUnderAnimation']=function(){const _0x36207d=_0x320868;if(this['_isProjectile'])return![];return this[_0x36207d(0x956)]&&this['_animation']['name']&&this[_0x36207d(0x956)][_0x36207d(0x3e0)][_0x36207d(0x2e0)](/<UNDER>/gi);},VisuMZ['BattleCore'][_0x320868(0x67a)]=Sprite_AnimationMV[_0x320868(0x5bb)][_0x320868(0x752)],Sprite_AnimationMV[_0x320868(0x5bb)][_0x320868(0x752)]=function(){const _0x2df8e3=_0x320868;VisuMZ[_0x2df8e3(0x5c8)][_0x2df8e3(0x67a)][_0x2df8e3(0x5a6)](this);if(!SceneManager[_0x2df8e3(0x96d)]())return;if(this['_animation'][_0x2df8e3(0xa7c)]===0x3)this['x']=Math[_0x2df8e3(0xa8c)](Graphics['boxWidth']/0x2),this['y']=Math[_0x2df8e3(0xa8c)](Graphics[_0x2df8e3(0x66c)]/0x2);else{if(this[_0x2df8e3(0x5d6)])return;}},Sprite_AnimationMV[_0x320868(0x5bb)][_0x320868(0xb5a)]=function(){const _0x35de5b=_0x320868;if(this['_isProjectile'])return![];return this[_0x35de5b(0x956)]&&this[_0x35de5b(0x956)][_0x35de5b(0x3e0)]&&this[_0x35de5b(0x956)]['name'][_0x35de5b(0x2e0)](/<UNDER>/gi);},Sprite_Damage['prototype'][_0x320868(0x872)]=function(_0xeb1c90){const _0x105b4c=_0x320868,_0x216e60=_0xeb1c90[_0x105b4c(0x394)]()||_0xeb1c90['result']();if(_0x216e60[_0x105b4c(0x566)]||_0x216e60[_0x105b4c(0x243)])this[_0x105b4c(0x597)]=0x0,this[_0x105b4c(0x9c6)]();else{if(_0x216e60[_0x105b4c(0x964)])this[_0x105b4c(0x597)]=_0x216e60[_0x105b4c(0x7de)]>=0x0?0x0:0x1,this['createDigits'](_0x216e60[_0x105b4c(0x7de)]);else _0xeb1c90[_0x105b4c(0x174)]()&&_0x216e60[_0x105b4c(0x880)]!==0x0&&(this[_0x105b4c(0x597)]=_0x216e60['mpDamage']>=0x0?0x2:0x3,this[_0x105b4c(0x1e9)](_0x216e60[_0x105b4c(0x880)]));}_0x216e60[_0x105b4c(0xa39)]&&this[_0x105b4c(0xab8)]();},Sprite_Damage[_0x320868(0x5bb)]['setup']=function(_0x4fb775){},Sprite_Damage[_0x320868(0x5bb)][_0x320868(0x1e9)]=function(_0x576afc){const _0x1abece=_0x320868;let _0x38ac4f=this['createString'](_0x576afc);const _0x481933=this[_0x1abece(0x522)](),_0x2ae6b5=Math['floor'](_0x481933*0.75);for(let _0xbe5ee6=0x0;_0xbe5ee6<_0x38ac4f[_0x1abece(0x4c1)];_0xbe5ee6++){const _0x22f389=this['createChildSprite'](_0x2ae6b5,_0x481933);_0x22f389[_0x1abece(0xa25)][_0x1abece(0x8c3)](_0x38ac4f[_0xbe5ee6],0x0,0x0,_0x2ae6b5,_0x481933,_0x1abece(0xb10)),_0x22f389['x']=(_0xbe5ee6-(_0x38ac4f[_0x1abece(0x4c1)]-0x1)/0x2)*_0x2ae6b5,_0x22f389['dy']=-_0xbe5ee6;}},Sprite_Damage[_0x320868(0x5bb)]['createString']=function(_0xccd53c){const _0x379890=_0x320868;let _0x50b0b4=Math[_0x379890(0x57e)](_0xccd53c)[_0x379890(0xbb5)]();this['useDigitGrouping']()&&(_0x50b0b4=VisuMZ[_0x379890(0x9ca)](_0x50b0b4));const _0x316a25=VisuMZ[_0x379890(0x5c8)][_0x379890(0x1d7)][_0x379890(0x31c)];let _0x42eb61='',_0x31986f='';switch(this[_0x379890(0x597)]){case 0x0:_0x42eb61=_0x316a25[_0x379890(0x771)]||_0x379890(0x145),_0x31986f=TextManager['hp'];if(_0xccd53c===0x0)_0x42eb61='%1';break;case 0x1:_0x42eb61=_0x316a25['hpHealingFmt']||_0x379890(0x7d7),_0x31986f=TextManager['hp'];break;case 0x2:_0x42eb61=_0x316a25['mpDamageFmt']||_0x379890(0x36f),_0x31986f=TextManager['mp'];break;case 0x3:_0x42eb61=_0x316a25[_0x379890(0x767)]||_0x379890(0x313),_0x31986f=TextManager['mp'];break;}return _0x42eb61[_0x379890(0x8b0)](_0x50b0b4,_0x31986f)[_0x379890(0x761)]();},Sprite_Damage[_0x320868(0x5bb)][_0x320868(0x724)]=function(){const _0x48f432=_0x320868;return Imported[_0x48f432(0x1c8)]?VisuMZ['CoreEngine'][_0x48f432(0x1d7)]['QoL']['DigitGroupingDamageSprites']:![];},Sprite_Damage['prototype']['setupCriticalEffect']=function(){const _0x130b82=_0x320868,_0x4d1b93=VisuMZ[_0x130b82(0x5c8)][_0x130b82(0x1d7)]['Damage'];_0x4d1b93[_0x130b82(0xab2)]=_0x4d1b93['CriticalColor']||[0x0,0x0,0x0,0x0],this[_0x130b82(0x37c)]=_0x4d1b93[_0x130b82(0xab2)][_0x130b82(0xab5)](0x0),this[_0x130b82(0x838)]=_0x4d1b93['CriticalDuration']||0x1;},Sprite_Damage[_0x320868(0x5bb)][_0x320868(0x443)]=function(_0x38558e,_0x2965d1){const _0x483d1a=_0x320868;this['_flashColor']=_0x2965d1['flashColor']||[0x0,0x0,0x0,0x0],this[_0x483d1a(0x37c)]=JsonEx[_0x483d1a(0x1b2)](this[_0x483d1a(0x37c)]),this[_0x483d1a(0x838)]=_0x2965d1[_0x483d1a(0x1be)]||0x0;const _0x4f933b=this[_0x483d1a(0x522)](),_0x4ebe2d=Math[_0x483d1a(0x5a8)](_0x4f933b*0x1e),_0x4eb54b=this[_0x483d1a(0x9d6)](_0x4ebe2d,_0x4f933b);_0x4eb54b['bitmap'][_0x483d1a(0x1b7)]=ColorManager['getColor'](_0x2965d1[_0x483d1a(0x1b7)]),_0x4eb54b[_0x483d1a(0xa25)][_0x483d1a(0x8c3)](_0x38558e,0x0,0x0,_0x4ebe2d,_0x4f933b,_0x483d1a(0xb10)),_0x4eb54b['dy']=0x0;},Sprite_Damage[_0x320868(0x5bb)][_0x320868(0xbdf)]=function(_0x526e65,_0x2ec7d0,_0x148f83){const _0x1021d1=_0x320868,_0x170f3d=Math[_0x1021d1(0x382)](this[_0x1021d1(0x522)](),ImageManager['iconHeight']),_0x4a39ed=Math['floor'](_0x170f3d*0x1e),_0x28bc9f=this[_0x1021d1(0x9d6)](_0x4a39ed,_0x170f3d),_0x4e7abd=ImageManager[_0x1021d1(0x4ef)]/0x2,_0x29978a=_0x28bc9f[_0x1021d1(0xa25)][_0x1021d1(0x2fd)](_0x2ec7d0+'\x20');_0x28bc9f[_0x1021d1(0xa25)]['textColor']=ColorManager[_0x1021d1(0x3bb)](_0x148f83[_0x1021d1(0x1b7)]),_0x28bc9f['bitmap']['drawText'](_0x2ec7d0,_0x4e7abd,0x0,_0x4a39ed-_0x4e7abd,_0x170f3d,_0x1021d1(0xb10));const _0x304f2c=Math[_0x1021d1(0xa8c)]((_0x170f3d-ImageManager['iconHeight'])/0x2),_0x1351f7=_0x4a39ed/0x2-ImageManager[_0x1021d1(0x4ef)]-_0x29978a/0x2+_0x4e7abd/0x2,_0x5d461c=ImageManager['loadSystem'](_0x1021d1(0x84c)),_0x474566=ImageManager['iconWidth'],_0x47b646=ImageManager[_0x1021d1(0x1b0)],_0x2977ba=_0x526e65%0x10*_0x474566,_0x4adc5e=Math['floor'](_0x526e65/0x10)*_0x47b646;_0x28bc9f['bitmap'][_0x1021d1(0x3b8)](_0x5d461c,_0x2977ba,_0x4adc5e,_0x474566,_0x47b646,_0x1351f7,_0x304f2c),this['_flashColor']=_0x148f83[_0x1021d1(0x710)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx['makeDeepCopy'](this['_flashColor']),this[_0x1021d1(0x838)]=_0x148f83[_0x1021d1(0x1be)]||0x0,_0x28bc9f['dy']=0x0,_0x148f83['offsetX']&&(_0x28bc9f['x']+=_0x148f83['offsetX']),_0x148f83['offsetY']&&(_0x28bc9f['dy']+=_0x148f83[_0x1021d1(0x3d5)]);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc14)]=Sprite_Damage[_0x320868(0x5bb)][_0x320868(0x9d6)],Sprite_Damage[_0x320868(0x5bb)][_0x320868(0x9d6)]=function(_0x2cd37c,_0x23edf1){const _0x160e5d=_0x320868;return _0x23edf1=Math['round'](_0x23edf1*1.2),VisuMZ[_0x160e5d(0x5c8)][_0x160e5d(0xc14)][_0x160e5d(0x5a6)](this,_0x2cd37c,_0x23edf1);},VisuMZ[_0x320868(0x5c8)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x320868(0x5bb)][_0x320868(0xc29)],Sprite_StateIcon['prototype'][_0x320868(0xc29)]=function(){const _0x5992d9=_0x320868;VisuMZ[_0x5992d9(0x5c8)][_0x5992d9(0x1c3)][_0x5992d9(0x5a6)](this),this['opacity']=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x5b9)]=Sprite_Weapon[_0x320868(0x5bb)]['loadBitmap'],Sprite_Weapon[_0x320868(0x5bb)]['loadBitmap']=function(){const _0x513854=_0x320868;VisuMZ['BattleCore']['Sprite_Weapon_loadBitmap'][_0x513854(0x5a6)](this),this['bitmap']&&(this[_0x513854(0xa25)][_0x513854(0x65a)]=VisuMZ[_0x513854(0x5c8)][_0x513854(0x1d7)]['Actor'][_0x513854(0x7f0)]);},VisuMZ['BattleCore'][_0x320868(0x852)]=Sprite_Gauge[_0x320868(0x5bb)][_0x320868(0xb91)],Sprite_Gauge[_0x320868(0x5bb)]['smoothness']=function(){const _0x4c68a7=_0x320868;return this[_0x4c68a7(0x160)]!=='time'?VisuMZ[_0x4c68a7(0x5c8)][_0x4c68a7(0x1d7)][_0x4c68a7(0x1b6)]['AniDuration']??0x14:VisuMZ['BattleCore'][_0x4c68a7(0x852)][_0x4c68a7(0x5a6)](this);};function Sprite_GaugeRate(){const _0x129ca2=_0x320868;this[_0x129ca2(0x136)](...arguments);}Sprite_GaugeRate['prototype']=Object[_0x320868(0x86c)](Sprite_Gauge[_0x320868(0x5bb)]),Sprite_GaugeRate[_0x320868(0x5bb)]['constructor']=Sprite_GaugeRate,Sprite_GaugeRate['prototype'][_0x320868(0x136)]=function(){const _0x471d30=_0x320868;Sprite_Gauge[_0x471d30(0x5bb)][_0x471d30(0x136)][_0x471d30(0x5a6)](this),this[_0x471d30(0xa50)]=![];},Sprite_GaugeRate[_0x320868(0x5bb)][_0x320868(0x8cb)]=function(_0x31165a,_0x50c405){const _0x46289a=_0x320868;this[_0x46289a(0xa50)]=!![],Sprite_Gauge[_0x46289a(0x5bb)][_0x46289a(0x8cb)][_0x46289a(0x5a6)](this,_0x31165a,_0x50c405),this[_0x46289a(0xa50)]=![];},Sprite_GaugeRate[_0x320868(0x5bb)][_0x320868(0x6f7)]=function(){const _0x5c4d27=_0x320868;if(this[_0x5c4d27(0xa50)]){const _0x1825da=Sprite_Gauge[_0x5c4d27(0x5bb)][_0x5c4d27(0x6f7)][_0x5c4d27(0x5a6)](this),_0x227e1f=this[_0x5c4d27(0x36b)]();if(_0x227e1f<=0x0)return'100%';return Math[_0x5c4d27(0x5a8)](_0x1825da/_0x227e1f*0x64)+'%';}else return Sprite_Gauge[_0x5c4d27(0x5bb)]['currentValue'][_0x5c4d27(0x5a6)](this);},Sprite_GaugeRate[_0x320868(0x5bb)][_0x320868(0x586)]=function(){const _0x319a7f=_0x320868,_0x10686a=Sprite_Gauge[_0x319a7f(0x5bb)]['currentValue'][_0x319a7f(0x5a6)](this),_0x543360=this[_0x319a7f(0x36b)]();if(_0x543360<=0x0)return _0x319a7f(0x82f);return Math['floor'](_0x10686a/_0x543360*0x64)+'%';},Sprite_GaugeRate[_0x320868(0x5bb)][_0x320868(0x80b)]=function(){const _0xddc99c=_0x320868;if(this[_0xddc99c(0x36b)]()<=0x0)return 0x1;return Sprite_Gauge[_0xddc99c(0x5bb)][_0xddc99c(0x80b)][_0xddc99c(0x5a6)](this);},Sprite_GaugeRate['prototype'][_0x320868(0xaa5)]=function(){const _0x2465e8=_0x320868;if(this['currentMaxValue']()<=0x0)return ColorManager['normalColor']();return Sprite_Gauge[_0x2465e8(0x5bb)][_0x2465e8(0xaa5)][_0x2465e8(0x5a6)](this);},Sprite_GaugeRate[_0x320868(0x5bb)]['redraw']=function(){const _0x41339f=_0x320868;this[_0x41339f(0x160)]==='mp'&&this['currentMaxValue']()<=0x0&&($gameTemp[_0x41339f(0x8c4)]=!![]),Sprite_Gauge[_0x41339f(0x5bb)][_0x41339f(0xb89)]['call'](this),$gameTemp[_0x41339f(0x8c4)]=undefined;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x251)]=ColorManager[_0x320868(0x561)],ColorManager[_0x320868(0x561)]=function(_0x518f6e){const _0x26ced1=_0x320868;if($gameTemp[_0x26ced1(0x8c4)])return ColorManager[_0x26ced1(0x839)]();return VisuMZ[_0x26ced1(0x5c8)]['ColorManager_mpColor'][_0x26ced1(0x5a6)](this,_0x518f6e);};function Sprite_HpGauge(){const _0x30e9de=_0x320868;this[_0x30e9de(0x136)](...arguments);}Sprite_HpGauge[_0x320868(0x5bb)]=Object[_0x320868(0x86c)](Sprite_Gauge[_0x320868(0x5bb)]),Sprite_HpGauge[_0x320868(0x5bb)]['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype']['initialize']=function(){const _0xa50e4e=_0x320868;Sprite_Gauge[_0xa50e4e(0x5bb)][_0xa50e4e(0x136)][_0xa50e4e(0x5a6)](this);},Sprite_HpGauge['prototype'][_0x320868(0x299)]=function(){return 0x0;},Sprite_HpGauge['prototype']['redraw']=function(){const _0x1fd7ed=_0x320868;this[_0x1fd7ed(0xa25)]['clear']();const _0x1f359d=this['currentValue']();!isNaN(_0x1f359d)&&this[_0x1fd7ed(0x517)]();};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName['prototype']=Object[_0x320868(0x86c)](Sprite_Name[_0x320868(0x5bb)]),Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0xc58)]=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x320868(0x136)]=function(){const _0x1de997=_0x320868;Sprite_Name[_0x1de997(0x5bb)][_0x1de997(0x136)][_0x1de997(0x5a6)](this),this[_0x1de997(0x12a)]();},Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0x92d)]=function(){const _0x8bf278=_0x320868;Sprite_Name[_0x8bf278(0x5bb)][_0x8bf278(0x92d)][_0x8bf278(0x5a6)](this),this['opacity']=0x0,this[_0x8bf278(0x51a)]=null,this[_0x8bf278(0x540)]['x']=0.5,this[_0x8bf278(0x540)]['y']=0x0;},Sprite_EnemyName[_0x320868(0x5bb)]['createAttachedSprites']=function(){const _0x289d7a=_0x320868;VisuMZ['BattleCore'][_0x289d7a(0x1d7)][_0x289d7a(0x14d)][_0x289d7a(0x72a)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this['addChild'](this[_0x289d7a(0x125)]));},Sprite_EnemyName[_0x320868(0x5bb)]['bitmapWidth']=function(){const _0x2cd300=_0x320868;return Graphics[_0x2cd300(0x23d)];},Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0x788)]=function(){const _0x410ca0=_0x320868;return this[_0x410ca0(0x4ab)]=this[_0x410ca0(0x4ab)]||Window_Base['prototype']['lineHeight']()||0x24,this[_0x410ca0(0x4ab)]*0x4;},Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0x522)]=function(){const _0x18ccce=_0x320868;return VisuMZ[_0x18ccce(0x5c8)][_0x18ccce(0x1d7)][_0x18ccce(0x14d)]['NameFontSize']||$gameSystem['mainFontSize']();},Sprite_EnemyName['prototype'][_0x320868(0x8f8)]=function(_0x53c1c3){const _0x6f215=_0x320868;this[_0x6f215(0x51a)]=_0x53c1c3;},Sprite_EnemyName[_0x320868(0x5bb)]['update']=function(){const _0x38d81d=_0x320868;Sprite_Name['prototype'][_0x38d81d(0x77d)][_0x38d81d(0x5a6)](this),this['updateLink'](),this['updatePosition'](),this[_0x38d81d(0x988)](),this[_0x38d81d(0x785)]();},Sprite_EnemyName['prototype'][_0x320868(0xb89)]=function(){const _0x5cc2b7=_0x320868;this['_cacheTextWidth']=undefined;const _0x565612=this[_0x5cc2b7(0x3e0)](),_0x4a046c=this[_0x5cc2b7(0x92b)](),_0x1cb6b9=Window_Base[_0x5cc2b7(0x5bb)][_0x5cc2b7(0xbfa)]();this[_0x5cc2b7(0x23f)](),this['bitmap']['clear'](),this[_0x5cc2b7(0xa25)][_0x5cc2b7(0x8c3)](_0x565612,0x0,0x0,_0x4a046c,_0x1cb6b9,_0x5cc2b7(0xb10));},Sprite_EnemyName[_0x320868(0x5bb)]['updateLink']=function(){const _0x2acf00=_0x320868;if(!this[_0x2acf00(0x51a)])return;this[_0x2acf00(0x4be)]!==this['_linkedSprite'][_0x2acf00(0x4be)]&&this['setup'](this[_0x2acf00(0x51a)]['_battler']);},Sprite_EnemyName['prototype'][_0x320868(0x752)]=function(){const _0x4dc922=_0x320868;if(!this[_0x4dc922(0x51a)])return;this[_0x4dc922(0x4ab)]=this['_lineHeight']||Window_Base[_0x4dc922(0x5bb)][_0x4dc922(0xbfa)](),this['x']=Math['round'](this[_0x4dc922(0x51a)]['_baseX']),this['y']=Math[_0x4dc922(0xa8c)](this['_linkedSprite']['_baseY']-this['_lineHeight']*0.5);const _0x47d6cb=VisuMZ['BattleCore'][_0x4dc922(0x1d7)]['Enemy'];this['x']+=Math['round'](_0x47d6cb[_0x4dc922(0x3b1)]||0x0),this['y']+=Math[_0x4dc922(0xa8c)](_0x47d6cb['NameOffsetY']||0x0);},Sprite_EnemyName['prototype']['updateAttachedSprites']=function(){const _0xba19ba=_0x320868;this[_0xba19ba(0x196)]();},Sprite_EnemyName[_0x320868(0x5bb)]['updateStateIconSprite']=function(){const _0x5234b7=_0x320868;if(!this['_stateIconSprite'])return;this[_0x5234b7(0x4be)]!==this[_0x5234b7(0x125)][_0x5234b7(0x4be)]&&this[_0x5234b7(0x125)][_0x5234b7(0x8ff)](this[_0x5234b7(0x4be)]);const _0x49ae28=this[_0x5234b7(0x2b0)]();this[_0x5234b7(0x4ab)]=this[_0x5234b7(0x4ab)]||Window_Base[_0x5234b7(0x5bb)]['lineHeight'](),this[_0x5234b7(0x125)]['x']=Math['round']((_0x49ae28+ImageManager[_0x5234b7(0x4ef)])/0x2)+0x8,this[_0x5234b7(0x125)]['y']=this[_0x5234b7(0x4ab)]/0x2;const _0x5deb83=VisuMZ[_0x5234b7(0x5c8)][_0x5234b7(0x1d7)]['Enemy'];this[_0x5234b7(0x125)]['x']+=_0x5deb83[_0x5234b7(0xb0a)]||0x0,this['_stateIconSprite']['y']+=_0x5deb83['AttachStateOffsetY']||0x0;},Sprite_EnemyName['prototype'][_0x320868(0x785)]=function(){const _0x44c987=_0x320868,_0x4858e0=this[_0x44c987(0x38c)]();if(_0x4858e0&&this[_0x44c987(0x385)]<0xff)this[_0x44c987(0x385)]+=0x10;else!_0x4858e0&&this[_0x44c987(0x385)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName['prototype'][_0x320868(0x38c)]=function(){const _0x1099fc=_0x320868;if(this[_0x1099fc(0x9f1)]())return![];else{if(!this[_0x1099fc(0x4be)])return![];else{if(!this[_0x1099fc(0x4be)]['isAppeared']())return![];else{if(this[_0x1099fc(0x1b8)]())return!![];else{if(this[_0x1099fc(0x4be)][_0x1099fc(0x3e3)]())return![];else{if(this[_0x1099fc(0xc2e)]())return!![];else{if(this[_0x1099fc(0x52b)]())return!![];else{if(this[_0x1099fc(0x9f9)]())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0x1099fc(0x385)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x320868(0x5bb)]['temporaryVisibile']=function(){const _0x3a493a=_0x320868;return this['_battler']&&this['_battler'][_0x3a493a(0x31d)]();},Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0x9f1)]=function(){const _0x3e1e4f=_0x320868;return VisuMZ[_0x3e1e4f(0x5c8)][_0x3e1e4f(0x1d7)]['Enemy'][_0x3e1e4f(0xb07)];},Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0xc2e)]=function(){const _0x4d4630=_0x320868;if(!VisuMZ[_0x4d4630(0x5c8)]['Settings'][_0x4d4630(0x14d)]['NameAsTarget'])return![];if(BattleManager[_0x4d4630(0x760)]()&&!BattleManager[_0x4d4630(0x76e)]())return![];return this[_0x4d4630(0x4be)]&&BattleManager[_0x4d4630(0xaad)]&&BattleManager['_targets']['includes'](this[_0x4d4630(0x4be)]);},Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0x52b)]=function(){return![];},Sprite_EnemyName['prototype'][_0x320868(0x9f9)]=function(){const _0x3814a7=_0x320868;return VisuMZ[_0x3814a7(0x5c8)]['Settings'][_0x3814a7(0x14d)][_0x3814a7(0x57f)];},Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0x79f)]=function(){const _0x1a4dea=_0x320868;return VisuMZ[_0x1a4dea(0x5c8)][_0x1a4dea(0x1d7)][_0x1a4dea(0x14d)][_0x1a4dea(0x80a)]?this[_0x1a4dea(0x4be)][_0x1a4dea(0x582)]():SceneManager[_0x1a4dea(0x64a)][_0x1a4dea(0x62a)]&&SceneManager[_0x1a4dea(0x64a)][_0x1a4dea(0x62a)]['active']&&SceneManager['_scene'][_0x1a4dea(0x62a)][_0x1a4dea(0xa62)][_0x1a4dea(0x6d2)](this[_0x1a4dea(0x4be)]);},Sprite_EnemyName[_0x320868(0x5bb)][_0x320868(0x2b0)]=function(){const _0x5693bb=_0x320868;if(!this['_battler'])return 0x0;if(this['_cacheTextWidth'])return this['_cacheTextWidth'];let _0x16a1de=this[_0x5693bb(0x3e0)]();return this[_0x5693bb(0x23f)](),Imported[_0x5693bb(0xa76)]&&TextManager[_0x5693bb(0xc2a)]&&(_0x16a1de=TextManager[_0x5693bb(0xc2a)](_0x16a1de)),this[_0x5693bb(0xa6b)]=this[_0x5693bb(0xa25)][_0x5693bb(0x2fd)](_0x16a1de)||0x1,this[_0x5693bb(0xa6b)];},VisuMZ['BattleCore'][_0x320868(0xbed)]=Sprite_Battleback[_0x320868(0x5bb)][_0x320868(0x9cc)],Sprite_Battleback[_0x320868(0x5bb)][_0x320868(0x9cc)]=function(){const _0x11553f=_0x320868,_0x5dd123=VisuMZ[_0x11553f(0x5c8)][_0x11553f(0x1d7)][_0x11553f(0x41a)];if(!_0x5dd123)return VisuMZ[_0x11553f(0x5c8)][_0x11553f(0xbed)][_0x11553f(0x5a6)](this);const _0x542b5d=String(_0x5dd123[_0x11553f(0x74e)])||'MZ';switch(_0x542b5d){case'MZ':VisuMZ[_0x11553f(0x5c8)][_0x11553f(0xbed)][_0x11553f(0x5a6)](this);break;case _0x11553f(0x4c5):this[_0x11553f(0xc45)]();break;case'ScaleToFit':this['adjustPosition_ScaleToFit']();break;case _0x11553f(0x1ba):this[_0x11553f(0xa36)]();break;case _0x11553f(0x293):this[_0x11553f(0x722)]();break;}},Sprite_Battleback[_0x320868(0x5bb)][_0x320868(0xc45)]=function(){const _0x392cba=_0x320868,_0x138a41=VisuMZ['BattleCore'][_0x392cba(0x1d7)][_0x392cba(0x41a)];if(_0x138a41&&_0x138a41[_0x392cba(0x5fc)])return _0x138a41[_0x392cba(0x5fc)]['call'](this);this[_0x392cba(0x529)]=Graphics[_0x392cba(0x529)],this[_0x392cba(0x351)]=Graphics[_0x392cba(0x351)];const _0x9c67b3=0x1;this['scale']['x']=_0x9c67b3,this['scale']['y']=_0x9c67b3,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x320868(0x5bb)][_0x320868(0x1e2)]=function(){const _0x11eb1c=_0x320868,_0x4746d4=VisuMZ['BattleCore']['Settings'][_0x11eb1c(0x41a)];if(_0x4746d4&&_0x4746d4[_0x11eb1c(0x186)])return _0x4746d4[_0x11eb1c(0x186)][_0x11eb1c(0x5a6)](this);this[_0x11eb1c(0x529)]=Graphics[_0x11eb1c(0x529)],this['height']=Graphics['height'];const _0x444516=this[_0x11eb1c(0x529)]/this[_0x11eb1c(0xa25)][_0x11eb1c(0x529)],_0x537acc=this[_0x11eb1c(0x351)]/this[_0x11eb1c(0xa25)]['height'],_0x59462a=Math[_0x11eb1c(0x382)](_0x444516,_0x537acc);this['scale']['x']=_0x59462a,this[_0x11eb1c(0x57d)]['y']=_0x59462a,this['x']=(Graphics[_0x11eb1c(0x529)]-this[_0x11eb1c(0x529)])/0x2,this['y']=Graphics[_0x11eb1c(0x351)]-this['height'];},Sprite_Battleback[_0x320868(0x5bb)][_0x320868(0xa36)]=function(){const _0x42e01b=_0x320868,_0x45b45c=VisuMZ['BattleCore'][_0x42e01b(0x1d7)][_0x42e01b(0x41a)];if(_0x45b45c&&_0x45b45c[_0x42e01b(0x81b)])return _0x45b45c['jsScaleDown']['call'](this);this['width']=Graphics[_0x42e01b(0x529)],this['height']=Graphics[_0x42e01b(0x351)];const _0x1fa89b=Math[_0x42e01b(0x24f)](0x1,this[_0x42e01b(0x529)]/this['bitmap'][_0x42e01b(0x529)]),_0x3e6864=Math[_0x42e01b(0x24f)](0x1,this[_0x42e01b(0x351)]/this[_0x42e01b(0xa25)][_0x42e01b(0x351)]),_0x3b7b4f=Math[_0x42e01b(0x382)](_0x1fa89b,_0x3e6864);this[_0x42e01b(0x57d)]['x']=_0x3b7b4f,this[_0x42e01b(0x57d)]['y']=_0x3b7b4f,this['x']=(Graphics[_0x42e01b(0x529)]-this[_0x42e01b(0x529)])/0x2,this['y']=Graphics['height']-this[_0x42e01b(0x351)];},Sprite_Battleback['prototype'][_0x320868(0x722)]=function(){const _0x5a58ac=_0x320868,_0x34d4ea=VisuMZ[_0x5a58ac(0x5c8)]['Settings'][_0x5a58ac(0x41a)];if(_0x34d4ea&&_0x34d4ea[_0x5a58ac(0x5d3)])return _0x34d4ea[_0x5a58ac(0x5d3)][_0x5a58ac(0x5a6)](this);this[_0x5a58ac(0x529)]=Graphics[_0x5a58ac(0x529)],this[_0x5a58ac(0x351)]=Graphics['height'];const _0x38b4e1=Math[_0x5a58ac(0x382)](0x1,this[_0x5a58ac(0x529)]/this['bitmap'][_0x5a58ac(0x529)]),_0x1dba01=Math[_0x5a58ac(0x382)](0x1,this['height']/this[_0x5a58ac(0xa25)][_0x5a58ac(0x351)]),_0x330559=Math['max'](_0x38b4e1,_0x1dba01);this[_0x5a58ac(0x57d)]['x']=_0x330559,this[_0x5a58ac(0x57d)]['y']=_0x330559,this['x']=(Graphics[_0x5a58ac(0x529)]-this[_0x5a58ac(0x529)])/0x2,this['y']=Graphics[_0x5a58ac(0x351)]-this['height'];},Spriteset_Battle[_0x320868(0xa03)]=VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0x759)][_0x320868(0x3ac)]??!![],Spriteset_Battle[_0x320868(0x5bb)]['isFlipped']=function(){const _0xed1ce0=_0x320868;if(!$gameSystem[_0xed1ce0(0x5a9)]())return![];return![];},Spriteset_Battle['prototype'][_0x320868(0x823)]=function(){return 0x0;},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x5ca)]=function(){return 0x0;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x346)]=Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0xaea)],Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0xaea)]=function(){const _0xff1cd2=_0x320868;VisuMZ[_0xff1cd2(0x5c8)]['Spriteset_Battle_createLowerLayer'][_0xff1cd2(0x5a6)](this),this[_0xff1cd2(0x187)](),this[_0xff1cd2(0xbac)]();},VisuMZ[_0x320868(0x5c8)]['Spriteset_Battle_update']=Spriteset_Battle['prototype'][_0x320868(0x77d)],Spriteset_Battle[_0x320868(0x5bb)]['update']=function(){const _0xccdc09=_0x320868;VisuMZ[_0xccdc09(0x5c8)][_0xccdc09(0x1dc)][_0xccdc09(0x5a6)](this),this[_0xccdc09(0x9f7)](),this[_0xccdc09(0x433)](),this[_0xccdc09(0x679)](),this['updateBattleBalloons']();},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x187)]=function(){const _0x1739f5=_0x320868;this[_0x1739f5(0x199)]=new Weather(),this[_0x1739f5(0x277)][_0x1739f5(0x4f0)](this['_weather']);},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x679)]=function(){const _0x20fa8=_0x320868;this[_0x20fa8(0x199)][_0x20fa8(0x97c)]=$gameScreen[_0x20fa8(0x445)](),this[_0x20fa8(0x199)][_0x20fa8(0xabc)]=$gameScreen[_0x20fa8(0x216)]();},Game_Interpreter[_0x320868(0x5bb)]['command236']=function(_0x356ca5){const _0x186dfb=_0x320868;$gameScreen[_0x186dfb(0xa47)](_0x356ca5[0x0],_0x356ca5[0x1],_0x356ca5[0x2]);if(_0x356ca5[0x3])this['wait'](_0x356ca5[0x2]);return!![];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x2d4)]=Game_Interpreter[_0x320868(0x5bb)][_0x320868(0x30b)],Game_Interpreter[_0x320868(0x5bb)][_0x320868(0x30b)]=function(_0x2fa3d4){const _0x5e2456=_0x320868;return VisuMZ[_0x5e2456(0x5c8)][_0x5e2456(0x2d4)][_0x5e2456(0x5a6)](this,_0x2fa3d4),SceneManager[_0x5e2456(0x96d)]()&&SceneManager[_0x5e2456(0x64a)][_0x5e2456(0xa26)][_0x5e2456(0x51f)](_0x2fa3d4[0x0],_0x2fa3d4[0x1]),!![];},Sprite_Battleback['prototype']['battleback1Name']=function(){const _0x4cda8c=_0x320868;if($gameMap[_0x4cda8c(0x5b6)]()!==null)return $gameMap[_0x4cda8c(0x5b6)]();else{if(BattleManager[_0x4cda8c(0x685)]())return $dataSystem[_0x4cda8c(0x5b6)];else return $gameMap[_0x4cda8c(0x3c1)]()?this['overworldBattleback1Name']():'';}},Sprite_Battleback[_0x320868(0x5bb)][_0x320868(0x773)]=function(){const _0x10a603=_0x320868;if($gameMap[_0x10a603(0x773)]()!==null)return $gameMap[_0x10a603(0x773)]();else{if(BattleManager[_0x10a603(0x685)]())return $dataSystem['battleback2Name'];else return $gameMap[_0x10a603(0x3c1)]()?this[_0x10a603(0x877)]():'';}},Spriteset_Battle['prototype']['updateBattlebackBitmap']=function(_0x4e1570,_0x65d5fb){const _0x290fbb=_0x320868;_0x4e1570[_0x290fbb(0xa25)]=_0x65d5fb;},Spriteset_Battle['prototype'][_0x320868(0x51f)]=function(_0x369bde,_0x118a5b){const _0xe487f2=_0x320868;_0x369bde=_0x369bde||'',_0x118a5b=_0x118a5b||'';_0x369bde===''&&_0x118a5b===''&&(_0x369bde=this['_back1Sprite'][_0xe487f2(0x5b6)](),_0x118a5b=this[_0xe487f2(0xbba)][_0xe487f2(0x773)]());const _0x4cd756=ImageManager[_0xe487f2(0x841)](_0x369bde),_0x4fb21a=ImageManager[_0xe487f2(0xb18)](_0x118a5b);_0x4cd756['addLoadListener'](this[_0xe487f2(0x7dd)][_0xe487f2(0x1cc)](this,this[_0xe487f2(0x3b2)],this['_back2Sprite'],_0x4cd756,_0x4fb21a));},Spriteset_Battle['prototype'][_0x320868(0x7dd)]=function(_0x173520,_0x373289,_0xda1296,_0x1632d5){const _0x26b1db=_0x320868;_0x1632d5[_0x26b1db(0xa05)](this[_0x26b1db(0x89e)][_0x26b1db(0x1cc)](this,_0x173520,_0x373289,_0xda1296,_0x1632d5));},Spriteset_Battle['prototype'][_0x320868(0x89e)]=function(_0x2e0949,_0x549b30,_0x1ab020,_0x35a29f){const _0x2a1878=_0x320868;_0x2e0949[_0x2a1878(0xa25)]=_0x1ab020,_0x549b30[_0x2a1878(0xa25)]=_0x35a29f,_0x2e0949['adjustPosition'](),_0x549b30[_0x2a1878(0x9cc)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc43)]=Spriteset_Battle['prototype'][_0x320868(0x415)],Spriteset_Battle[_0x320868(0x5bb)]['createBattleField']=function(){const _0x39fcdd=_0x320868;VisuMZ['BattleCore']['Spriteset_Battle_createBattleField']['call'](this),this[_0x39fcdd(0x925)]();},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x925)]=function(){const _0x61dbc3=_0x320868;this[_0x61dbc3(0x891)](),this[_0x61dbc3(0x573)](),this[_0x61dbc3(0x3ad)](),this['createDamageContainer'](),this[_0x61dbc3(0x978)]();},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x891)]=function(){const _0x3bfdb2=_0x320868;this[_0x3bfdb2(0xc1f)]=new Sprite(),this[_0x3bfdb2(0x277)][_0x3bfdb2(0x4f0)](this[_0x3bfdb2(0xc1f)]),this['_battlerContainer']=new Sprite(),this[_0x3bfdb2(0x277)]['addChild'](this['_battlerContainer']);},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x3ad)]=function(){const _0x20fdb2=_0x320868;this['_animationContainer']=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x20fdb2(0x4f0)](this['_animationContainer']):this[_0x20fdb2(0x277)][_0x20fdb2(0x4f0)](this[_0x20fdb2(0x5d2)]);},Spriteset_Battle[_0x320868(0x5bb)]['createDamageContainer']=function(){const _0x2879e0=_0x320868;this['_damageContainer']=new Sprite(),this[_0x2879e0(0x335)]['x']=this['_battleField']['x'],this[_0x2879e0(0x335)]['y']=this[_0x2879e0(0x277)]['y'],this['addChild'](this['_damageContainer']);},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x978)]=function(){const _0x313f4e=_0x320868;if(!this[_0x313f4e(0x19a)]())return;this[_0x313f4e(0xbe1)][_0x313f4e(0x57d)]['x']=-0x1,this[_0x313f4e(0xbe1)]['x']=this['_battleField'][_0x313f4e(0x529)],this['_uiContainer']['scale']['x']=-0x1,this[_0x313f4e(0x5da)]['x']=this[_0x313f4e(0x277)]['width'],this[_0x313f4e(0x5d2)][_0x313f4e(0x57d)]['x']=-0x1,this[_0x313f4e(0x5d2)]['x']=this[_0x313f4e(0x277)][_0x313f4e(0x529)],this['_damageContainer'][_0x313f4e(0x57d)]['x']=-0x1,this['_damageContainer']['x']=this[_0x313f4e(0x277)]['x']+this[_0x313f4e(0x277)][_0x313f4e(0x529)];},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x52c)]=function(){const _0x4a0d6c=_0x320868;Imported[_0x4a0d6c(0x1c8)]&&this['coreEngineRepositionEnemies']()&&this[_0x4a0d6c(0xaf7)]();const _0x1b6b43=$gameTroop[_0x4a0d6c(0xb0d)](),_0x2a6c98=[];for(const _0x2b8bf8 of _0x1b6b43){_0x2a6c98[_0x4a0d6c(0x205)](new Sprite_Enemy(_0x2b8bf8));}_0x2a6c98[_0x4a0d6c(0x811)](this[_0x4a0d6c(0x8aa)][_0x4a0d6c(0x1cc)](this));for(const _0x9dc31f of _0x2a6c98){this[_0x4a0d6c(0xbe1)][_0x4a0d6c(0x4f0)](_0x9dc31f);}this[_0x4a0d6c(0x994)]=_0x2a6c98;},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x315)]=function(){const _0x2f6092=_0x320868;this['_actorSprites']=[];for(let _0x26b87c=0x0;_0x26b87c<$gameParty[_0x2f6092(0x1e6)]();_0x26b87c++){const _0x3457db=$gameParty[_0x2f6092(0x20a)]()[_0x26b87c],_0x2ce65f=new Sprite_Actor();_0x2ce65f[_0x2f6092(0x863)](_0x3457db),_0x2ce65f['setBattler'](_0x3457db),_0x2ce65f[_0x2f6092(0x77d)](),this['_actorSprites']['push'](_0x2ce65f),this['_battlerContainer']['addChild'](_0x2ce65f);}},Spriteset_Battle[_0x320868(0x5bb)]['createAnimationSprite']=function(_0x31c93a,_0x464394,_0x28299b,_0x46e329){const _0x581ab1=_0x320868,_0x3dbff9=this[_0x581ab1(0x8d8)](_0x464394),_0x59fa56=new(_0x3dbff9?Sprite_AnimationMV:Sprite_Animation)(),_0x105780=this[_0x581ab1(0x8e9)](_0x31c93a);this[_0x581ab1(0x440)](_0x31c93a[0x0])&&(_0x28299b=!_0x28299b),_0x59fa56[_0x581ab1(0xbaf)]=_0x31c93a,_0x59fa56[_0x581ab1(0x8ff)](_0x105780,_0x464394,_0x28299b,_0x46e329),this[_0x581ab1(0x7ea)](_0x59fa56);},Spriteset_Battle['prototype'][_0x320868(0x7ea)]=function(_0x486e5c){const _0x4bff78=_0x320868;this[_0x4bff78(0xb83)](_0x486e5c)?(this[_0x4bff78(0x318)]()[_0x4bff78(0x4f0)](_0x486e5c),_0x486e5c[_0x4bff78(0x5d6)]=!![]):(Spriteset_Battle[_0x4bff78(0xa03)]&&(this[_0x4bff78(0x5d2)]['x']=this[_0x4bff78(0x3ae)]['x'],this['_animationContainer']['y']=this[_0x4bff78(0x3ae)]['y']),this['_underAnimationContainer']&&_0x486e5c[_0x4bff78(0xb5a)]&&_0x486e5c[_0x4bff78(0xb5a)]()?(this[_0x4bff78(0xc1f)][_0x4bff78(0x4f0)](_0x486e5c),this[_0x4bff78(0xc1f)]['x']=this[_0x4bff78(0x5d2)]['x'],this[_0x4bff78(0xc1f)]['y']=this[_0x4bff78(0x5d2)]['y']):this[_0x4bff78(0x5d2)][_0x4bff78(0x4f0)](_0x486e5c)),this[_0x4bff78(0x31b)][_0x4bff78(0x205)](_0x486e5c);},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0xb83)]=function(_0x31426e){const _0x411783=_0x320868;if(!_0x31426e)return![];if(!_0x31426e[_0x411783(0x956)])return![];if(!_0x31426e[_0x411783(0xbaf)][0x0])return![];if(_0x31426e[_0x411783(0xbaf)][0x0][_0x411783(0x94e)]&&!_0x31426e[_0x411783(0xbaf)][0x0]['isActor']())return![];if($gameSystem[_0x411783(0x5a9)]())return![];if(!this[_0x411783(0x318)]())return![];if(_0x31426e[_0x411783(0xc58)]===Sprite_Animation){const _0x431f55=VisuMZ[_0x411783(0x5c8)][_0x411783(0x1d7)][_0x411783(0x818)];_0x431f55['FvAniEachTarget']=_0x431f55[_0x411783(0xa06)]??!![];if(_0x31426e['_animation'][_0x411783(0x5a4)]===0x0&&!_0x431f55[_0x411783(0xa06)])return![];_0x431f55['FvAniCenterAll']=_0x431f55[_0x411783(0x48b)]??!![];if(_0x31426e['_animation'][_0x411783(0x5a4)]===0x1&&!_0x431f55[_0x411783(0x48b)])return![];_0x431f55[_0x411783(0x9b3)]=_0x431f55['FvAniCenterScreen']??![];if(_0x31426e[_0x411783(0x956)][_0x411783(0x5a4)]===0x2&&!_0x431f55[_0x411783(0x9b3)])return![];}else{if(_0x31426e[_0x411783(0xc58)]===Sprite_AnimationMV){if(_0x31426e[_0x411783(0x956)][_0x411783(0xa7c)]===0x3)return![];}}return!![];const _0x24412b=Window_BattleStatus[_0x411783(0x5bb)][_0x411783(0x2d1)]();return['xp',_0x411783(0xa42)][_0x411783(0xc39)](_0x24412b);},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x318)]=function(){const _0x47a7ef=_0x320868;if(!SceneManager['_scene'])return null;if(!SceneManager['_scene'][_0x47a7ef(0xabb)])return null;if(!SceneManager[_0x47a7ef(0x64a)][_0x47a7ef(0xabb)][_0x47a7ef(0x3ae)])return null;return SceneManager[_0x47a7ef(0x64a)][_0x47a7ef(0xabb)][_0x47a7ef(0x3ae)];},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x932)]=function(_0x3d2b0f){const _0x487f92=_0x320868;this[_0x487f92(0x7b8)](_0x3d2b0f);for(const _0x1a1820 of _0x3d2b0f[_0x487f92(0xbaf)]){_0x1a1820[_0x487f92(0xb86)]&&_0x1a1820[_0x487f92(0xb86)]();}_0x3d2b0f[_0x487f92(0x26d)]();},Spriteset_Battle['prototype'][_0x320868(0x7b8)]=function(_0x1075b4){const _0xb03548=_0x320868;this[_0xb03548(0xb83)](_0x1075b4)?this[_0xb03548(0x318)]()[_0xb03548(0x3bc)](_0x1075b4):this[_0xb03548(0x5d2)][_0xb03548(0x3bc)](_0x1075b4);this[_0xb03548(0xc1f)]&&this[_0xb03548(0xc1f)]['removeChild'](_0x1075b4);this[_0xb03548(0x3ae)][_0xb03548(0x3bc)](_0x1075b4),this[_0xb03548(0x5d2)][_0xb03548(0x3bc)](_0x1075b4),this[_0xb03548(0x31b)][_0xb03548(0x236)](_0x1075b4);if(this['_fauxAnimationSprites'])this[_0xb03548(0x3cc)][_0xb03548(0x236)](_0x1075b4);},VisuMZ['BattleCore']['Spriteset_Battle_updateActors']=Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x957)],Spriteset_Battle[_0x320868(0x5bb)]['updateActors']=function(){const _0x2e4b05=_0x320868;VisuMZ[_0x2e4b05(0x5c8)][_0x2e4b05(0xc56)]['call'](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x9f7)]=function(){const _0x15bbf0=_0x320868;this[_0x15bbf0(0xbe1)][_0x15bbf0(0x6ff)][_0x15bbf0(0x811)](this[_0x15bbf0(0x8a0)][_0x15bbf0(0x1cc)](this)),this[_0x15bbf0(0x7b9)]();if(!this[_0x15bbf0(0xbe1)])return;this[_0x15bbf0(0xbe1)]['opacity']=this[_0x15bbf0(0x8e7)]();},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x8a0)]=function(_0x31b910,_0xcc8af1){const _0x1fe06d=_0x320868;if(VisuMZ[_0x1fe06d(0x5c8)][_0x1fe06d(0x1d7)]['Actor']['PrioritySortActors']){if(_0x31b910['_battler']&&_0xcc8af1[_0x1fe06d(0x4be)]){if(_0x31b910['_battler']['isActor']()&&_0xcc8af1['_battler'][_0x1fe06d(0xb8b)]())return 0x1;else{if(_0xcc8af1[_0x1fe06d(0x4be)][_0x1fe06d(0x94e)]()&&_0x31b910[_0x1fe06d(0x4be)][_0x1fe06d(0xb8b)]())return-0x1;}}}return _0x31b910[_0x1fe06d(0xba4)]!==_0xcc8af1[_0x1fe06d(0xba4)]?_0x31b910['_baseY']-_0xcc8af1[_0x1fe06d(0xba4)]:_0xcc8af1['spriteId']-_0x31b910[_0x1fe06d(0x9b0)];},Spriteset_Battle[_0x320868(0x5bb)]['putActiveBattlerOnTop']=function(){const _0x3de1bd=_0x320868;if(!VisuMZ[_0x3de1bd(0x5c8)]['Settings']['Actor']['PrioritySortActive'])return;const _0x2562c2=BattleManager[_0x3de1bd(0xaad)];if(_0x2562c2){if(_0x2562c2['isActor']()&&!$gameSystem[_0x3de1bd(0x5a9)]())return;if(_0x2562c2===BattleManager[_0x3de1bd(0xb94)]())return;const _0x215435=_0x2562c2[_0x3de1bd(0xb31)]();if(_0x215435&&_0x2562c2['isActor']())this[_0x3de1bd(0xbe1)][_0x3de1bd(0x4f0)](_0x215435);}},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x327)]=function(){const _0x4ad7b9=_0x320868;for(const _0x2ae31d of $gameParty[_0x4ad7b9(0x83b)]()){if(!_0x2ae31d)continue;if(!_0x2ae31d[_0x4ad7b9(0xb31)]())continue;_0x2ae31d['battler']()[_0x4ad7b9(0xb71)]=!![],_0x2ae31d['battler']()[_0x4ad7b9(0x6b0)]();}},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x573)]=function(){const _0x36cb6b=_0x320868;this[_0x36cb6b(0x5da)]=new Sprite(),Spriteset_Battle[_0x36cb6b(0xa03)]?this[_0x36cb6b(0x4f0)](this['_uiContainer']):this[_0x36cb6b(0x277)][_0x36cb6b(0x4f0)](this[_0x36cb6b(0x5da)]),SceneManager['_scene'][_0x36cb6b(0x5da)]=this['_uiContainer'];},Spriteset_Battle[_0x320868(0x5bb)]['createEnemyNames']=function(){const _0x35de3d=_0x320868;if(VisuMZ[_0x35de3d(0x5c8)][_0x35de3d(0x1d7)][_0x35de3d(0x14d)][_0x35de3d(0x89f)])return;this[_0x35de3d(0x83d)]=new Sprite(),BattleManager[_0x35de3d(0x1a5)](this[_0x35de3d(0x83d)]);for(const _0x26c716 of this[_0x35de3d(0x994)]){const _0x4cca61=new Sprite_EnemyName();this['_enemyNameContainer']['addChild'](_0x4cca61),_0x4cca61[_0x35de3d(0x8f8)](_0x26c716);}},Spriteset_Battle['prototype'][_0x320868(0x433)]=function(){const _0x5701ff=_0x320868;if(!this[_0x5701ff(0x335)])return;if(!this['_uiContainer'])return;const _0x3809c4=Spriteset_Battle[_0x5701ff(0xa03)]?this['_damageContainer']['x']:0x0,_0x558db7=Spriteset_Battle[_0x5701ff(0xa03)]?this['_damageContainer']['y']:0x0,_0xc5b6d7=Imported[_0x5701ff(0xa68)]?this[_0x5701ff(0x277)]['x']:0x0,_0x357d1c=Imported[_0x5701ff(0xa68)]?this[_0x5701ff(0x277)]['y']:0x0;this['_uiContainer']['x']=_0x3809c4+_0xc5b6d7,this[_0x5701ff(0x5da)]['y']=_0x558db7+_0x357d1c;},BattleManager[_0x320868(0x1a5)]=function(_0x330029){const _0x3cdaad=_0x320868;if(!SceneManager[_0x3cdaad(0x64a)][_0x3cdaad(0x5da)])return;SceneManager[_0x3cdaad(0x64a)][_0x3cdaad(0x5da)][_0x3cdaad(0x4f0)](_0x330029);},BattleManager[_0x320868(0xa90)]=function(_0x5e814c){const _0x363c8c=_0x320868;if(!SceneManager[_0x363c8c(0x64a)][_0x363c8c(0x5da)])return;SceneManager[_0x363c8c(0x64a)][_0x363c8c(0x5da)]['removeChild'](_0x5e814c);},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x8e7)]=function(){return 0xff;},Spriteset_Battle['prototype'][_0x320868(0x3de)]=function(){return![];},Spriteset_Battle[_0x320868(0x5bb)]['isAnyoneFloating']=function(){const _0x12cefc=_0x320868;return this['battlerSprites']()['some'](_0x342b8b=>_0x342b8b[_0x12cefc(0xb06)]());},Spriteset_Battle[_0x320868(0x5bb)]['isAnyoneJumping']=function(){const _0x252a33=_0x320868;return this[_0x252a33(0x59c)]()[_0x252a33(0x41d)](_0x1ada8c=>_0x1ada8c[_0x252a33(0x130)]());},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x547)]=function(){const _0x4d5fc3=_0x320868;return this['battlerSprites']()['some'](_0x14f202=>_0x14f202[_0x4d5fc3(0x953)]());},Spriteset_Battle[_0x320868(0x5bb)]['isAnyoneSkewing']=function(){const _0x13530f=_0x320868;return this[_0x13530f(0x59c)]()[_0x13530f(0x41d)](_0x445d1c=>_0x445d1c['isSkewing']());},Spriteset_Battle[_0x320868(0x5bb)][_0x320868(0x873)]=function(){return this['battlerSprites']()['some'](_0x134744=>_0x134744['isSpinning']());},Spriteset_Battle['prototype'][_0x320868(0x52a)]=function(){const _0x5e3c9c=_0x320868;return this[_0x5e3c9c(0x59c)]()[_0x5e3c9c(0x41d)](_0x48a7b7=>_0x48a7b7[_0x5e3c9c(0x8bf)]());},VisuMZ[_0x320868(0x5c8)]['Window_ItemList_maxCols']=Window_ItemList[_0x320868(0x5bb)][_0x320868(0x4d8)],Window_ItemList['prototype']['maxCols']=function(){const _0x14d435=_0x320868;return SceneManager['isSceneBattle']()?SceneManager['_scene'][_0x14d435(0x2d1)]()===_0x14d435(0xba8)?VisuMZ[_0x14d435(0x5c8)]['Settings'][_0x14d435(0x759)][_0x14d435(0xba5)]:VisuMZ[_0x14d435(0x5c8)]['Settings'][_0x14d435(0x759)][_0x14d435(0x449)]:VisuMZ[_0x14d435(0x5c8)]['Window_ItemList_maxCols']['call'](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x159)]=Window_SkillList[_0x320868(0x5bb)][_0x320868(0x4d8)],Window_SkillList[_0x320868(0x5bb)][_0x320868(0x4d8)]=function(){const _0x1ca0a6=_0x320868;return SceneManager[_0x1ca0a6(0x96d)]()?SceneManager['_scene'][_0x1ca0a6(0x2d1)]()===_0x1ca0a6(0xba8)?VisuMZ[_0x1ca0a6(0x5c8)][_0x1ca0a6(0x1d7)][_0x1ca0a6(0x759)]['SkillItemBorderCols']:VisuMZ['BattleCore'][_0x1ca0a6(0x1d7)][_0x1ca0a6(0x759)][_0x1ca0a6(0x449)]:VisuMZ['BattleCore'][_0x1ca0a6(0x159)]['call'](this);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x35d)]=Window_Options['prototype'][_0x320868(0x2a6)],Window_Options[_0x320868(0x5bb)][_0x320868(0x2a6)]=function(){const _0x22d1ad=_0x320868;VisuMZ[_0x22d1ad(0x5c8)][_0x22d1ad(0x35d)][_0x22d1ad(0x5a6)](this),this['addAutoBattleCommands'](),this[_0x22d1ad(0x913)]();},Window_Options[_0x320868(0x5bb)][_0x320868(0x628)]=function(){const _0x5da96c=_0x320868;VisuMZ['BattleCore'][_0x5da96c(0x1d7)][_0x5da96c(0x252)][_0x5da96c(0x9e6)]&&(this[_0x5da96c(0xbb3)](),this[_0x5da96c(0x557)]());},Window_Options['prototype'][_0x320868(0x913)]=function(){const _0x57153b=_0x320868;if(!VisuMZ[_0x57153b(0x5c8)][_0x57153b(0x1d7)][_0x57153b(0x1b6)][_0x57153b(0x2e6)])return;const _0x266569=TextManager[_0x57153b(0x711)],_0x409ba6=_0x57153b(0x711);this[_0x57153b(0x154)](_0x266569,_0x409ba6);},Window_Options['prototype'][_0x320868(0xbb3)]=function(){const _0x281c0e=_0x320868,_0x5cd561=TextManager['autoBattleStart'],_0x505e7f=_0x281c0e(0x63f);this[_0x281c0e(0x154)](_0x5cd561,_0x505e7f);},Window_Options[_0x320868(0x5bb)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x172500=_0x320868,_0x5eba22=TextManager[_0x172500(0x86d)],_0x22247e='autoBattleUseSkills';this['addCommand'](_0x5eba22,_0x22247e);},VisuMZ['BattleCore'][_0x320868(0xbfc)]=Window_Options[_0x320868(0x5bb)][_0x320868(0x494)],Window_Options[_0x320868(0x5bb)]['statusText']=function(_0x43714a){const _0x4fc87c=_0x320868,_0x3c6439=this[_0x4fc87c(0x1fb)](_0x43714a);return _0x3c6439==='autoBattleUseSkills'?this[_0x4fc87c(0x876)]():VisuMZ['BattleCore']['Window_Options_statusText'][_0x4fc87c(0x5a6)](this,_0x43714a);},Window_Options[_0x320868(0x5bb)][_0x320868(0x876)]=function(){const _0x4f02f8=_0x320868,_0x103e94=VisuMZ[_0x4f02f8(0x5c8)][_0x4f02f8(0x1d7)][_0x4f02f8(0x252)],_0xbd24fa=this[_0x4f02f8(0x7b7)](_0x4f02f8(0x8ab));return _0xbd24fa?_0x103e94[_0x4f02f8(0x7ae)]:_0x103e94[_0x4f02f8(0x698)];},Window_ShopStatus[_0x320868(0x5bb)][_0x320868(0x763)]=function(){const _0x19b590=_0x320868,_0x1e50f6=DataManager[_0x19b590(0xa5c)](this[_0x19b590(0x333)]),_0x3772dc=VisuMZ['DamageStyles'][_0x1e50f6];if(!_0x3772dc)return this[_0x19b590(0x67d)]();const _0x4f842a=_0x19b590(0x815)[_0x19b590(0x8b0)](this[_0x19b590(0x333)]['damage'][_0x19b590(0x97c)]),_0x4b0d1b=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item']['damage'][_0x19b590(0x97c)]];return _0x3772dc[_0x4f842a][_0x19b590(0x8b0)](_0x4b0d1b);},Window_ShopStatus[_0x320868(0x5bb)][_0x320868(0x84e)]=function(){const _0x4a5109=_0x320868,_0x1a724c=DataManager[_0x4a5109(0xa5c)](this[_0x4a5109(0x333)]),_0x21f1a4=VisuMZ['DamageStyles'][_0x1a724c];if(!_0x21f1a4)return this[_0x4a5109(0x1f2)]();return _0x21f1a4['DamageDisplay'][_0x4a5109(0x5a6)](this);},VisuMZ['BattleCore'][_0x320868(0x2a9)]=Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x136)],Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x136)]=function(_0x341b5c){const _0x5dcb2d=_0x320868;VisuMZ[_0x5dcb2d(0x5c8)]['Window_PartyCommand_initialize']['call'](this,_0x341b5c),this[_0x5dcb2d(0xc0e)](_0x341b5c);},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0xc0e)]=function(_0x3266f9){const _0x3ec663=_0x320868,_0x474af7=new Rectangle(0x0,0x0,_0x3266f9[_0x3ec663(0x529)],_0x3266f9[_0x3ec663(0x351)]);this[_0x3ec663(0xbd5)]=new Window_Base(_0x474af7),this[_0x3ec663(0xbd5)][_0x3ec663(0x385)]=0x0,this[_0x3ec663(0x4f0)](this[_0x3ec663(0xbd5)]),this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0x320868(0xc2b)]=function(){const _0x33ab04=_0x320868;Window_Command[_0x33ab04(0x5bb)][_0x33ab04(0xc2b)]['call'](this);if(this[_0x33ab04(0xbd5)])this[_0x33ab04(0x607)]();},Window_PartyCommand['prototype'][_0x320868(0x607)]=function(){const _0x1a24fc=_0x320868,_0x1c20e5=this[_0x1a24fc(0xbd5)];_0x1c20e5[_0x1a24fc(0x2e5)][_0x1a24fc(0x927)]();const _0x590f57=this[_0x1a24fc(0xa77)](this[_0x1a24fc(0x655)]());if(_0x590f57==='icon'&&this[_0x1a24fc(0x307)]()>0x0){const _0x22589d=this[_0x1a24fc(0x2ac)](this[_0x1a24fc(0x655)]());let _0x1c35f7=this[_0x1a24fc(0x19f)](this[_0x1a24fc(0x655)]());_0x1c35f7=_0x1c35f7[_0x1a24fc(0x550)](/\\I\[(\d+)\]/gi,''),_0x1c20e5[_0x1a24fc(0x2f6)](),this[_0x1a24fc(0x8e2)](_0x1c35f7,_0x22589d),this['commandNameWindowDrawText'](_0x1c35f7,_0x22589d),this[_0x1a24fc(0x97f)](_0x1c35f7,_0x22589d);}},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x8e2)]=function(_0x142b05,_0x3d3470){},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x965)]=function(_0xb0d632,_0x416a53){const _0x573c66=_0x320868,_0x1c2f2e=this['_commandNameWindow'];_0x1c2f2e[_0x573c66(0x8c3)](_0xb0d632,0x0,_0x416a53['y'],_0x1c2f2e[_0x573c66(0x489)],_0x573c66(0xb10));},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x97f)]=function(_0x5e158b,_0x3e81c9){const _0x42aae5=_0x320868,_0x3db1e4=this[_0x42aae5(0xbd5)],_0x521682=$gameSystem[_0x42aae5(0x564)](),_0x3709bf=_0x3e81c9['x']+Math['floor'](_0x3e81c9[_0x42aae5(0x529)]/0x2)+_0x521682;_0x3db1e4['x']=_0x3db1e4[_0x42aae5(0x529)]/-0x2+_0x3709bf,_0x3db1e4['y']=Math[_0x42aae5(0x5a8)](_0x3e81c9['height']/0x2);},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x55a)]=function(){const _0x5e2ed9=_0x320868;this[_0x5e2ed9(0x1a3)](),this[_0x5e2ed9(0x32d)](),this[_0x5e2ed9(0xa98)](),this[_0x5e2ed9(0xacc)](),this[_0x5e2ed9(0x6bd)](),this[_0x5e2ed9(0xa7e)]();},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x1a3)]=function(){const _0x447bbc=_0x320868,_0x37a468=this['commandStyle'](),_0xf13e68=VisuMZ[_0x447bbc(0x5c8)][_0x447bbc(0x1d7)][_0x447bbc(0x24b)][_0x447bbc(0x3ff)],_0x996cff=_0x37a468===_0x447bbc(0xa1e)?TextManager[_0x447bbc(0x7d8)]:_0x447bbc(0x47b)[_0x447bbc(0x8b0)](_0xf13e68,TextManager[_0x447bbc(0x7d8)]),_0x2dbe54=this[_0x447bbc(0x6d4)]();this[_0x447bbc(0x154)](_0x996cff,_0x447bbc(0x7d8),_0x2dbe54);},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x6d4)]=function(){return!![];},Window_PartyCommand[_0x320868(0x5bb)]['addAutoBattleCommand']=function(){const _0x32cb51=_0x320868;if(!this[_0x32cb51(0x4f1)]())return;const _0x520cd7=this[_0x32cb51(0x29a)](),_0x1d0956=VisuMZ[_0x32cb51(0x5c8)]['Settings']['PartyCmd']['CmdIconAutoBattle'],_0x4ec475=_0x520cd7==='text'?TextManager[_0x32cb51(0xbf2)]:_0x32cb51(0x47b)['format'](_0x1d0956,TextManager['autoBattle']),_0x5cd321=this[_0x32cb51(0x3af)]();this[_0x32cb51(0x154)](_0x4ec475,_0x32cb51(0xbf2),_0x5cd321);},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x4f1)]=function(){const _0x1be285=_0x320868;return VisuMZ['BattleCore'][_0x1be285(0x1d7)][_0x1be285(0x24b)]['CommandAddAutoBattle'];},Window_PartyCommand['prototype'][_0x320868(0x3af)]=function(){return!![];},Window_PartyCommand['prototype'][_0x320868(0xa98)]=function(){},Window_PartyCommand['prototype'][_0x320868(0xacc)]=function(){const _0x48eb9b=_0x320868,_0x28ed57=VisuMZ[_0x48eb9b(0x5c8)][_0x48eb9b(0x1d7)][_0x48eb9b(0x24b)][_0x48eb9b(0x777)]??!![];if(!_0x28ed57)return;const _0x54953d=this['commandStyle'](),_0x556d76=VisuMZ[_0x48eb9b(0x5c8)][_0x48eb9b(0x1d7)][_0x48eb9b(0x5b8)]['CmdIconStatus']??0x57,_0x1fe7ce=_0x54953d===_0x48eb9b(0xa1e)?TextManager[_0x48eb9b(0xb15)]:'\x5cI[%1]%2'['format'](_0x556d76,TextManager[_0x48eb9b(0xb15)]),_0x59260e=!![];this[_0x48eb9b(0x154)](_0x1fe7ce,_0x48eb9b(0xb15),_0x59260e);},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x6bd)]=function(){const _0x564455=_0x320868;if(!this['isOptionsCommandAdded']())return;const _0x19a9d1=this[_0x564455(0x29a)](),_0x3e9521=VisuMZ[_0x564455(0x5c8)][_0x564455(0x1d7)][_0x564455(0x24b)]['CmdIconOptions'],_0x4f3454=_0x19a9d1==='text'?TextManager['options']:_0x564455(0x47b)[_0x564455(0x8b0)](_0x3e9521,TextManager[_0x564455(0x735)]),_0x5f1847=this['isOptionsCommandEnabled']();this['addCommand'](_0x4f3454,_0x564455(0x735),_0x5f1847);},Window_PartyCommand['prototype']['isOptionsCommandAdded']=function(){const _0x9cf213=_0x320868;return VisuMZ[_0x9cf213(0x5c8)][_0x9cf213(0x1d7)][_0x9cf213(0x24b)]['CommandAddOptions'];},Window_PartyCommand['prototype'][_0x320868(0x155)]=function(){return!![];},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0xa7e)]=function(){const _0x26826f=_0x320868,_0x453c6e=this[_0x26826f(0x29a)](),_0x55f70d=VisuMZ[_0x26826f(0x5c8)][_0x26826f(0x1d7)][_0x26826f(0x24b)][_0x26826f(0x671)],_0x3ba153=_0x453c6e===_0x26826f(0xa1e)?TextManager[_0x26826f(0x4c9)]:_0x26826f(0x47b)[_0x26826f(0x8b0)](_0x55f70d,TextManager['escape']),_0x527be6=this[_0x26826f(0x132)]();this[_0x26826f(0x154)](_0x3ba153,'escape',_0x527be6);},Window_PartyCommand['prototype'][_0x320868(0x132)]=function(){const _0x5b9495=_0x320868;return BattleManager[_0x5b9495(0x985)]();},Window_PartyCommand[_0x320868(0x5bb)]['itemTextAlign']=function(){const _0x55becf=_0x320868;return VisuMZ['BattleCore'][_0x55becf(0x1d7)][_0x55becf(0x24b)][_0x55becf(0x4d1)];},Window_PartyCommand[_0x320868(0x5bb)]['drawItem']=function(_0x3943d3){const _0x1be94b=_0x320868,_0x302c7d=this[_0x1be94b(0xa77)](_0x3943d3);if(_0x302c7d===_0x1be94b(0xbd1))this[_0x1be94b(0x3b7)](_0x3943d3);else _0x302c7d==='icon'?this[_0x1be94b(0x409)](_0x3943d3):Window_Command[_0x1be94b(0x5bb)][_0x1be94b(0xa71)][_0x1be94b(0x5a6)](this,_0x3943d3);},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x29a)]=function(){const _0x362744=_0x320868;return VisuMZ[_0x362744(0x5c8)][_0x362744(0x1d7)]['PartyCmd']['CmdStyle'];},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0xa77)]=function(_0x8ecd97){const _0x4d017c=_0x320868;if(_0x8ecd97<0x0)return'text';const _0x460873=this[_0x4d017c(0x29a)]();if(_0x460873!=='auto')return _0x460873;else{if(this[_0x4d017c(0x307)]()>0x0){const _0xd2577a=this['commandName'](_0x8ecd97);if(_0xd2577a[_0x4d017c(0x2e0)](/\\I\[(\d+)\]/i)){const _0x4aeb6a=this['itemLineRect'](_0x8ecd97),_0x5cf14e=this[_0x4d017c(0x864)](_0xd2577a)[_0x4d017c(0x529)];return _0x5cf14e<=_0x4aeb6a[_0x4d017c(0x529)]?'iconText':_0x4d017c(0xc08);}}}return _0x4d017c(0xa1e);},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x3b7)]=function(_0x127db6){const _0x420438=_0x320868,_0x5151a4=this['itemLineRect'](_0x127db6),_0x2a1d04=this[_0x420438(0x19f)](_0x127db6),_0x2401b3=this['textSizeEx'](_0x2a1d04)[_0x420438(0x529)];this[_0x420438(0x47d)](this['isCommandEnabled'](_0x127db6));const _0xfa096c=this['itemTextAlign']();if(_0xfa096c==='right')this[_0x420438(0x423)](_0x2a1d04,_0x5151a4['x']+_0x5151a4['width']-_0x2401b3,_0x5151a4['y'],_0x2401b3);else{if(_0xfa096c===_0x420438(0xb10)){const _0x3f8885=_0x5151a4['x']+Math[_0x420438(0x5a8)]((_0x5151a4['width']-_0x2401b3)/0x2);this[_0x420438(0x423)](_0x2a1d04,_0x3f8885,_0x5151a4['y'],_0x2401b3);}else this[_0x420438(0x423)](_0x2a1d04,_0x5151a4['x'],_0x5151a4['y'],_0x2401b3);}},Window_PartyCommand['prototype'][_0x320868(0x409)]=function(_0x4075b2){const _0x17abab=_0x320868;this[_0x17abab(0x19f)](_0x4075b2)[_0x17abab(0x2e0)](/\\I\[(\d+)\]/i);const _0x5c88fc=Number(RegExp['$1'])||0x0,_0x4e0177=this['itemLineRect'](_0x4075b2),_0x41adef=_0x4e0177['x']+Math[_0x17abab(0x5a8)]((_0x4e0177['width']-ImageManager['iconWidth'])/0x2),_0x9527fe=_0x4e0177['y']+(_0x4e0177['height']-ImageManager[_0x17abab(0x1b0)])/0x2;this['drawIcon'](_0x5c88fc,_0x41adef,_0x9527fe);},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x190)]=function(){},Window_PartyCommand[_0x320868(0x5bb)]['activate']=function(){const _0x282174=_0x320868;Window_Command[_0x282174(0x5bb)][_0x282174(0x631)][_0x282174(0x5a6)](this);const _0x1435ca=this[_0x282174(0x2d1)]();_0x1435ca===_0x282174(0xba8)&&this['showHelpWindow']();},Window_PartyCommand[_0x320868(0x5bb)][_0x320868(0x2d1)]=function(){const _0xc32ff0=_0x320868;if(this[_0xc32ff0(0xb9f)])return this[_0xc32ff0(0xb9f)];return this[_0xc32ff0(0xb9f)]=SceneManager['_scene'][_0xc32ff0(0x2d1)](),this[_0xc32ff0(0xb9f)];},Window_PartyCommand[_0x320868(0x5bb)]['updateHelp']=function(){const _0x3c1948=_0x320868,_0x4977fe=VisuMZ[_0x3c1948(0x5c8)]['Settings']['PartyCmd'],_0x165ee0=this[_0x3c1948(0x8ed)]();switch(_0x165ee0){case _0x3c1948(0x7d8):this[_0x3c1948(0xc69)][_0x3c1948(0x377)](_0x4977fe[_0x3c1948(0x847)]);break;case _0x3c1948(0xbf2):this[_0x3c1948(0xc69)][_0x3c1948(0x377)](_0x4977fe[_0x3c1948(0x627)]);break;case _0x3c1948(0x735):this[_0x3c1948(0xc69)][_0x3c1948(0x377)](_0x4977fe[_0x3c1948(0x5f2)]);break;case _0x3c1948(0x4c9):this[_0x3c1948(0xc69)][_0x3c1948(0x377)](_0x4977fe[_0x3c1948(0xc07)]);break;case _0x3c1948(0xb15):this['_helpWindow'][_0x3c1948(0x377)](Window_InBattleStatus[_0x3c1948(0x635)][_0x3c1948(0x350)]);break;default:this[_0x3c1948(0xc69)][_0x3c1948(0x377)]('');break;}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x1aa)]=Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x136)],Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x136)]=function(_0x1e8f51){const _0x31d314=_0x320868;VisuMZ[_0x31d314(0x5c8)][_0x31d314(0x1aa)]['call'](this,_0x1e8f51),this[_0x31d314(0xc0e)](_0x1e8f51);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0xc0e)]=function(_0x50560c){const _0x573960=_0x320868,_0x32a1db=new Rectangle(0x0,0x0,_0x50560c['width'],_0x50560c[_0x573960(0x351)]);this['_commandNameWindow']=new Window_Base(_0x32a1db),this['_commandNameWindow'][_0x573960(0x385)]=0x0,this[_0x573960(0x4f0)](this['_commandNameWindow']),this[_0x573960(0x607)]();},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0xc2b)]=function(){const _0x20291b=_0x320868;Window_Command[_0x20291b(0x5bb)][_0x20291b(0xc2b)][_0x20291b(0x5a6)](this);if(this[_0x20291b(0xbd5)])this[_0x20291b(0x607)]();},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x607)]=function(){const _0x1e1ec9=_0x320868,_0x29e964=this[_0x1e1ec9(0xbd5)];_0x29e964[_0x1e1ec9(0x2e5)][_0x1e1ec9(0x927)]();const _0x3eec66=this[_0x1e1ec9(0xa77)](this[_0x1e1ec9(0x655)]());if(_0x3eec66===_0x1e1ec9(0xc08)&&this[_0x1e1ec9(0x307)]()>0x0){const _0x4f278b=this[_0x1e1ec9(0x2ac)](this['index']());let _0x5a8bfe=this['commandName'](this[_0x1e1ec9(0x655)]());_0x5a8bfe=_0x5a8bfe[_0x1e1ec9(0x550)](/\\I\[(\d+)\]/gi,''),_0x29e964[_0x1e1ec9(0x2f6)](),this['commandNameWindowDrawBackground'](_0x5a8bfe,_0x4f278b),this[_0x1e1ec9(0x965)](_0x5a8bfe,_0x4f278b),this[_0x1e1ec9(0x97f)](_0x5a8bfe,_0x4f278b);}},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x8e2)]=function(_0x477dac,_0x59a202){},Window_ActorCommand['prototype'][_0x320868(0x965)]=function(_0x20e43e,_0x1382ac){const _0x57845f=_0x320868,_0x30816a=this['_commandNameWindow'];_0x30816a['drawText'](_0x20e43e,0x0,_0x1382ac['y'],_0x30816a[_0x57845f(0x489)],_0x57845f(0xb10));},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x97f)]=function(_0x7f4451,_0x419372){const _0x30516b=_0x320868,_0x2c1861=this[_0x30516b(0xbd5)],_0x29b710=$gameSystem[_0x30516b(0x564)](),_0x3946a7=_0x419372['x']+Math[_0x30516b(0x5a8)](_0x419372[_0x30516b(0x529)]/0x2)+_0x29b710;_0x2c1861['x']=_0x2c1861['width']/-0x2+_0x3946a7,_0x2c1861['y']=Math[_0x30516b(0x5a8)](_0x419372['height']/0x2);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x55a)]=function(){const _0x2a38e1=_0x320868;if(!this[_0x2a38e1(0x948)])return;const _0x539ed0=this[_0x2a38e1(0x948)][_0x2a38e1(0x25d)]();for(const _0x9c5e9e of _0x539ed0){this[_0x2a38e1(0xbe6)](_0x9c5e9e[_0x2a38e1(0x2c8)]()[_0x2a38e1(0x761)]());}},Window_ActorCommand['prototype']['makeBattleCommand']=function(_0x30c69f){const _0x5d2c4f=_0x320868;_0x30c69f===_0x5d2c4f(0xb4d)&&this[_0x5d2c4f(0x48d)]();[_0x5d2c4f(0x5f6),_0x5d2c4f(0x6ef)]['includes'](_0x30c69f)&&this[_0x5d2c4f(0xaf9)]();_0x30c69f===_0x5d2c4f(0x2d2)&&this[_0x5d2c4f(0x1cd)]();_0x30c69f===_0x5d2c4f(0x2fc)&&this['addItemCommand']();_0x30c69f===_0x5d2c4f(0xb2a)&&this[_0x5d2c4f(0xacc)]();_0x30c69f===_0x5d2c4f(0xa7a)&&this[_0x5d2c4f(0xa7e)]();_0x30c69f==='AUTO\x20BATTLE'&&this[_0x5d2c4f(0x32d)]();if(_0x30c69f[_0x5d2c4f(0x2e0)](/STYPE: (\d+)/i)){const _0xdce398=Number(RegExp['$1']);this[_0x5d2c4f(0x826)](_0xdce398);}else{if(_0x30c69f[_0x5d2c4f(0x2e0)](/STYPE: (.*)/i)){const _0x39fc92=DataManager[_0x5d2c4f(0x60f)](RegExp['$1']);this[_0x5d2c4f(0x826)](_0x39fc92);}}_0x30c69f==='ALL\x20SKILLS'&&this[_0x5d2c4f(0x765)]();if(_0x30c69f[_0x5d2c4f(0x2e0)](/SKILL: (\d+)/i)){const _0x903f0=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x903f0]);}else{if(_0x30c69f[_0x5d2c4f(0x2e0)](/SKILL: (.*)/i)){const _0x11c449=DataManager[_0x5d2c4f(0x4c8)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x11c449]);}}_0x30c69f===_0x5d2c4f(0x7ad)&&Imported[_0x5d2c4f(0x6f1)]&&this[_0x5d2c4f(0xbc0)](),[_0x5d2c4f(0x484),_0x5d2c4f(0x843)][_0x5d2c4f(0x6d2)](_0x30c69f)&&Imported[_0x5d2c4f(0x899)]&&this[_0x5d2c4f(0x2ef)](),_0x30c69f==='WEAPON\x20SWAP'&&Imported[_0x5d2c4f(0x884)]&&this[_0x5d2c4f(0x559)](!![]),_0x30c69f==='GRID\x20MOVE'&&Imported[_0x5d2c4f(0xb13)]&&this[_0x5d2c4f(0x1db)]();},Window_ActorCommand[_0x320868(0x5bb)]['addAttackCommand']=function(){const _0x38bdb4=_0x320868,_0x1b676d=$dataSkills[this[_0x38bdb4(0x948)][_0x38bdb4(0x9b2)]()];if(!_0x1b676d)return;if(!this[_0x38bdb4(0x6cf)](_0x1b676d))return;const _0x51c2e2=this[_0x38bdb4(0x29a)](),_0x3ff6df=DataManager[_0x38bdb4(0x426)](_0x1b676d),_0x5bb0e7=DataManager[_0x38bdb4(0xa3c)](_0x1b676d),_0x42d5a7=_0x51c2e2==='text'?_0x3ff6df:_0x38bdb4(0x47b)[_0x38bdb4(0x8b0)](_0x5bb0e7,_0x3ff6df);this['addCommand'](_0x42d5a7,_0x38bdb4(0x280),this[_0x38bdb4(0x948)]['canAttack']());},Window_ActorCommand['prototype'][_0x320868(0x1cd)]=function(){const _0x5f4f23=_0x320868,_0x1139e3=$dataSkills[this[_0x5f4f23(0x948)]['guardSkillId']()];if(!_0x1139e3)return;if(!this[_0x5f4f23(0x6cf)](_0x1139e3))return;const _0x1e9bcc=this[_0x5f4f23(0x29a)](),_0xa99f7f=DataManager[_0x5f4f23(0x426)](_0x1139e3),_0x25c667=DataManager['battleCommandIcon'](_0x1139e3),_0x361fd3=_0x1e9bcc===_0x5f4f23(0xa1e)?_0xa99f7f:'\x5cI[%1]%2'[_0x5f4f23(0x8b0)](_0x25c667,_0xa99f7f);this[_0x5f4f23(0x154)](_0x361fd3,_0x5f4f23(0xa12),this['_actor'][_0x5f4f23(0x5ae)]());},Window_ActorCommand['prototype'][_0x320868(0x9e2)]=function(){const _0x3355a8=_0x320868,_0x1ba887=this[_0x3355a8(0x29a)](),_0x1f42f0=VisuMZ['BattleCore']['Settings'][_0x3355a8(0x6c5)][_0x3355a8(0x786)],_0x59422c=_0x1ba887===_0x3355a8(0xa1e)?TextManager[_0x3355a8(0xc47)]:'\x5cI[%1]%2'[_0x3355a8(0x8b0)](_0x1f42f0,TextManager[_0x3355a8(0xc47)]),_0x1eebb1=this['isItemCommandEnabled']();this[_0x3355a8(0x154)](_0x59422c,_0x3355a8(0xc47),_0x1eebb1);},Window_ActorCommand[_0x320868(0x5bb)]['isItemCommandEnabled']=function(){const _0x276f4b=_0x320868;return this[_0x276f4b(0x948)]&&this[_0x276f4b(0x948)][_0x276f4b(0xae6)]();},Window_ActorCommand[_0x320868(0x5bb)]['addSkillCommands']=function(){const _0x199819=_0x320868,_0x3fff67=this[_0x199819(0x948)]['skillTypes']();for(const _0x327a6f of _0x3fff67){this[_0x199819(0x826)](_0x327a6f);}},Window_ActorCommand[_0x320868(0x5bb)]['addSkillTypeCommand']=function(_0xd745dd){const _0x988dbb=_0x320868;let _0x40ac3e=$dataSystem[_0x988dbb(0x612)][_0xd745dd];if(!_0x40ac3e)return;let _0x6cbb0e=_0x40ac3e;const _0x1ffebd=this[_0x988dbb(0x29a)]();if(_0x1ffebd==='text')_0x6cbb0e=_0x6cbb0e['replace'](/\x1I\[(\d+)\]/gi,''),_0x6cbb0e=_0x6cbb0e['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x40ac3e['match'](/\\I\[(\d+)\]/i)){const _0x6cb080=Imported[_0x988dbb(0x49b)]?VisuMZ['SkillsStatesCore']['Settings'][_0x988dbb(0x2e4)]:VisuMZ[_0x988dbb(0x5c8)][_0x988dbb(0x1d7)][_0x988dbb(0x6c5)],_0x1a4668=$dataSystem[_0x988dbb(0xb0e)]['includes'](_0xd745dd),_0x2938f5=_0x1a4668?_0x6cb080['IconStypeMagic']:_0x6cb080[_0x988dbb(0x9b9)];_0x6cbb0e=_0x988dbb(0x47b)[_0x988dbb(0x8b0)](_0x2938f5,_0x40ac3e);}}this['addCommand'](_0x6cbb0e,_0x988dbb(0x5ff),!![],_0xd745dd);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x765)]=function(){const _0x3e1881=_0x320868,_0x11548e=this[_0x3e1881(0x948)][_0x3e1881(0x612)](),_0xfcc00d=this[_0x3e1881(0x948)][_0x3e1881(0x668)]();for(const _0x4346f0 of _0xfcc00d){if(!_0x4346f0)continue;if(Imported[_0x3e1881(0x49b)]){if(this['noSimilarSTypes'](_0x4346f0))continue;if(this['isHiddenSkill'](_0x4346f0))continue;}else{if(!_0x11548e[_0x3e1881(0x6d2)](_0x4346f0[_0x3e1881(0x5fa)]))continue;}this[_0x3e1881(0x48c)](_0x4346f0);}},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x3c6)]=function(_0x28b151){const _0x3a49ba=_0x320868,_0xc2225=this[_0x3a49ba(0x948)][_0x3a49ba(0x612)](),_0x1c123f=_0xc2225[_0x3a49ba(0x477)](_0x10285b=>DataManager['getSkillTypes'](_0x28b151)[_0x3a49ba(0x6d2)](_0x10285b));return _0x1c123f[_0x3a49ba(0x4c1)]<=0x0;},Window_ActorCommand['prototype']['isHiddenSkill']=function(_0x18d76c){const _0x4fa6e8=_0x320868;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ['SkillsStatesCore'][_0x4fa6e8(0x43b)]>=1.24){if(this['_actor']){if(!VisuMZ[_0x4fa6e8(0x8c8)][_0x4fa6e8(0x12f)](this[_0x4fa6e8(0x948)],_0x18d76c))return!![];if(!VisuMZ[_0x4fa6e8(0x8c8)]['CheckVisibleSwitchNotetags'](this['_actor'],_0x18d76c))return!![];if(!VisuMZ['SkillsStatesCore']['CheckVisibleSkillNotetags'](this[_0x4fa6e8(0x948)],_0x18d76c))return!![];}}else{if(!Window_SkillList[_0x4fa6e8(0x5bb)]['checkShowHideBattleNotetags'][_0x4fa6e8(0x5a6)](this,_0x18d76c))return!![];if(!Window_SkillList['prototype'][_0x4fa6e8(0x908)]['call'](this,_0x18d76c))return!![];if(!Window_SkillList['prototype'][_0x4fa6e8(0x2ed)]['call'](this,_0x18d76c))return!![];}}return![];},Window_ActorCommand['prototype'][_0x320868(0x48c)]=function(_0x10e2d3){const _0x9bfd44=_0x320868;if(!_0x10e2d3)return;if(!this['canAddSkillCommand'](_0x10e2d3))return;const _0x338fcc=this['commandStyle'](),_0x25f5c8=DataManager[_0x9bfd44(0x426)](_0x10e2d3),_0x435bab=DataManager[_0x9bfd44(0xa3c)](_0x10e2d3),_0x540ef8=_0x338fcc==='text'?_0x25f5c8:_0x9bfd44(0x47b)[_0x9bfd44(0x8b0)](_0x435bab,_0x25f5c8),_0x103ebb=this[_0x9bfd44(0x948)][_0x9bfd44(0x455)](_0x10e2d3);this['addCommand'](_0x540ef8,_0x9bfd44(0x427),_0x103ebb,_0x10e2d3['id']);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x6cf)]=function(_0x46ef66){const _0x1ff46d=_0x320868,_0xd99044=_0x46ef66[_0x1ff46d(0x418)];if(_0xd99044[_0x1ff46d(0x2e0)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor']['isLearnedSkill'](_0x46ef66['id']))return![];}if(_0xd99044[_0x1ff46d(0x2e0)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x1ff46d(0x948)][_0x1ff46d(0xa46)](_0x46ef66['id']))return![];}const _0x5ed03d=VisuMZ[_0x1ff46d(0x5c8)][_0x1ff46d(0xb0b)](_0x46ef66,'CommandVisible');if(VisuMZ[_0x1ff46d(0x5c8)]['JS'][_0x5ed03d]){if(!VisuMZ[_0x1ff46d(0x5c8)]['JS'][_0x5ed03d]['call'](this,this[_0x1ff46d(0x948)],_0x46ef66))return![];}return VisuMZ[_0x1ff46d(0x5c8)][_0x1ff46d(0x3b4)](_0x46ef66);},VisuMZ[_0x320868(0x5c8)]['CheckSkillCommandShowSwitches']=function(_0x31cbf0){const _0xc540da=_0x320868,_0x2ac8b0=_0x31cbf0[_0xc540da(0x418)];if(_0x2ac8b0[_0xc540da(0x2e0)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3d52c1=JSON[_0xc540da(0x4fd)]('['+RegExp['$1'][_0xc540da(0x2e0)](/\d+/g)+']');for(const _0x3028b9 of _0x3d52c1){if(!$gameSwitches[_0xc540da(0xb4e)](_0x3028b9))return![];}return!![];}if(_0x2ac8b0[_0xc540da(0x2e0)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x50d97b=JSON[_0xc540da(0x4fd)]('['+RegExp['$1'][_0xc540da(0x2e0)](/\d+/g)+']');for(const _0x3d871a of _0x50d97b){if(!$gameSwitches['value'](_0x3d871a))return![];}return!![];}if(_0x2ac8b0['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xab42ab=JSON[_0xc540da(0x4fd)]('['+RegExp['$1'][_0xc540da(0x2e0)](/\d+/g)+']');for(const _0x48111a of _0xab42ab){if($gameSwitches[_0xc540da(0xb4e)](_0x48111a))return!![];}return![];}if(_0x2ac8b0[_0xc540da(0x2e0)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x47ced8=JSON[_0xc540da(0x4fd)]('['+RegExp['$1'][_0xc540da(0x2e0)](/\d+/g)+']');for(const _0x27c775 of _0x47ced8){if(!$gameSwitches[_0xc540da(0xb4e)](_0x27c775))return!![];}return![];}if(_0x2ac8b0[_0xc540da(0x2e0)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x400104=JSON[_0xc540da(0x4fd)]('['+RegExp['$1'][_0xc540da(0x2e0)](/\d+/g)+']');for(const _0x2966dd of _0x400104){if(!$gameSwitches[_0xc540da(0xb4e)](_0x2966dd))return!![];}return![];}if(_0x2ac8b0[_0xc540da(0x2e0)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3aa86d=JSON[_0xc540da(0x4fd)]('['+RegExp['$1'][_0xc540da(0x2e0)](/\d+/g)+']');for(const _0x314149 of _0x3aa86d){if($gameSwitches[_0xc540da(0xb4e)](_0x314149))return![];}return!![];}return!![];},Window_ActorCommand['prototype'][_0x320868(0xacc)]=function(){const _0x22993d=_0x320868,_0x5bba61=this[_0x22993d(0x29a)](),_0x3e9463=VisuMZ[_0x22993d(0x5c8)][_0x22993d(0x1d7)][_0x22993d(0x5b8)][_0x22993d(0x4b3)]??0x57,_0x3b0403=_0x5bba61==='text'?TextManager[_0x22993d(0xb15)]:_0x22993d(0x47b)[_0x22993d(0x8b0)](_0x3e9463,TextManager[_0x22993d(0xb15)]),_0x3c7b80=!![];this[_0x22993d(0x154)](_0x3b0403,_0x22993d(0xb15),_0x3c7b80);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0xa7e)]=function(){const _0xb9f666=_0x320868,_0x2b11ed=this[_0xb9f666(0x29a)](),_0x53d447=VisuMZ[_0xb9f666(0x5c8)][_0xb9f666(0x1d7)][_0xb9f666(0x24b)]['CmdIconEscape'],_0x120bf4=_0x2b11ed===_0xb9f666(0xa1e)?TextManager['escape']:_0xb9f666(0x47b)[_0xb9f666(0x8b0)](_0x53d447,TextManager[_0xb9f666(0x4c9)]),_0x58bf4c=this[_0xb9f666(0x132)]();this[_0xb9f666(0x154)](_0x120bf4,_0xb9f666(0x4c9),_0x58bf4c);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x132)]=function(){const _0x1c2894=_0x320868;return BattleManager[_0x1c2894(0x985)]();},Window_ActorCommand[_0x320868(0x5bb)]['addAutoBattleCommand']=function(){const _0x30ca11=_0x320868,_0x3912cc=this[_0x30ca11(0x29a)](),_0x74bdcf=VisuMZ[_0x30ca11(0x5c8)][_0x30ca11(0x1d7)]['PartyCmd'][_0x30ca11(0x615)],_0x1f8ca8=_0x3912cc===_0x30ca11(0xa1e)?TextManager[_0x30ca11(0xbf2)]:_0x30ca11(0x47b)['format'](_0x74bdcf,TextManager['autoBattle']),_0x64dc8c=this[_0x30ca11(0x3af)]();this[_0x30ca11(0x154)](_0x1f8ca8,_0x30ca11(0xbf2),_0x64dc8c);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x3af)]=function(){return!![];},Window_ActorCommand['prototype'][_0x320868(0x267)]=function(){const _0x313a42=_0x320868;return VisuMZ[_0x313a42(0x5c8)][_0x313a42(0x1d7)][_0x313a42(0x6c5)]['CmdTextAlign'];},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0xa71)]=function(_0x1b65d9){const _0x55cf89=_0x320868,_0x3a29dc=this[_0x55cf89(0xa77)](_0x1b65d9);if(_0x3a29dc===_0x55cf89(0xbd1))this[_0x55cf89(0x3b7)](_0x1b65d9);else _0x3a29dc===_0x55cf89(0xc08)?this[_0x55cf89(0x409)](_0x1b65d9):Window_Command[_0x55cf89(0x5bb)][_0x55cf89(0xa71)][_0x55cf89(0x5a6)](this,_0x1b65d9);this[_0x55cf89(0x32f)](_0x1b65d9);},Window_ActorCommand[_0x320868(0x5bb)]['commandStyle']=function(){const _0x473500=_0x320868;return VisuMZ['BattleCore']['Settings'][_0x473500(0x6c5)][_0x473500(0x8a3)];},Window_ActorCommand['prototype'][_0x320868(0xa77)]=function(_0x490c0d){const _0x1a87a3=_0x320868;if(_0x490c0d<0x0)return _0x1a87a3(0xa1e);const _0x4646b=this['commandStyle']();if(_0x4646b!==_0x1a87a3(0x93c))return _0x4646b;else{if(this['maxItems']()>0x0){const _0x3f87d5=this[_0x1a87a3(0x19f)](_0x490c0d);if(_0x3f87d5['match'](/\\I\[(\d+)\]/i)){const _0x2d2f44=this[_0x1a87a3(0x2ac)](_0x490c0d),_0xe64f4a=this[_0x1a87a3(0x864)](_0x3f87d5)['width'];return _0xe64f4a<=_0x2d2f44[_0x1a87a3(0x529)]?_0x1a87a3(0xbd1):_0x1a87a3(0xc08);}}}return'text';},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x3b7)]=function(_0x4c3525){const _0x38b9e2=_0x320868,_0x136a18=this[_0x38b9e2(0x2ac)](_0x4c3525),_0x58c95c=this[_0x38b9e2(0x19f)](_0x4c3525),_0xe5523e=this[_0x38b9e2(0x864)](_0x58c95c)['width'];this['changePaintOpacity'](this[_0x38b9e2(0x2cf)](_0x4c3525));const _0x3711b7=this[_0x38b9e2(0x267)]();if(_0x3711b7===_0x38b9e2(0x59d))this[_0x38b9e2(0x423)](_0x58c95c,_0x136a18['x']+_0x136a18['width']-_0xe5523e,_0x136a18['y'],_0xe5523e);else{if(_0x3711b7===_0x38b9e2(0xb10)){const _0x59bbe8=_0x136a18['x']+Math[_0x38b9e2(0x5a8)]((_0x136a18['width']-_0xe5523e)/0x2);this[_0x38b9e2(0x423)](_0x58c95c,_0x59bbe8,_0x136a18['y'],_0xe5523e);}else this[_0x38b9e2(0x423)](_0x58c95c,_0x136a18['x'],_0x136a18['y'],_0xe5523e);}},Window_ActorCommand['prototype']['drawItemStyleIcon']=function(_0x4e61a1){const _0x85ddd9=_0x320868;this['commandName'](_0x4e61a1)[_0x85ddd9(0x2e0)](/\\I\[(\d+)\]/i);const _0x4314dd=Number(RegExp['$1'])||0x0,_0x26711f=this['itemLineRect'](_0x4e61a1),_0x47c515=_0x26711f['x']+Math[_0x85ddd9(0x5a8)]((_0x26711f[_0x85ddd9(0x529)]-ImageManager[_0x85ddd9(0x4ef)])/0x2),_0x47456b=_0x26711f['y']+(_0x26711f[_0x85ddd9(0x351)]-ImageManager['iconHeight'])/0x2;this[_0x85ddd9(0x7e5)](_0x4314dd,_0x47c515,_0x47456b);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x32f)]=function(_0x2132a6){const _0xa7436d=_0x320868;if(!(VisuMZ[_0xa7436d(0x5c8)][_0xa7436d(0x1d7)]['ActorCmd'][_0xa7436d(0x6ba)]??!![]))return;const _0x212395=this[_0xa7436d(0x1fb)](_0x2132a6);if(![_0xa7436d(0x280),_0xa7436d(0xa12),_0xa7436d(0x427)][_0xa7436d(0x6d2)](_0x212395))return;const _0x329b14=this[_0xa7436d(0x2ac)](_0x2132a6);let _0x5bfb5b=null;if(_0x212395==='attack')_0x5bfb5b=$dataSkills[this['_actor']['attackSkillId']()];else _0x212395==='guard'?_0x5bfb5b=$dataSkills[this[_0xa7436d(0x948)][_0xa7436d(0xaec)]()]:_0x5bfb5b=$dataSkills[this[_0xa7436d(0x498)][_0x2132a6][_0xa7436d(0x9e3)]];this[_0xa7436d(0x991)](this[_0xa7436d(0x948)],_0x5bfb5b,_0x329b14['x'],_0x329b14['y'],_0x329b14[_0xa7436d(0x529)]);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x991)]=function(_0x3bbf6c,_0x59f671,_0xcb777f,_0x1acc8c,_0x18afe5){const _0x1eb530=_0x320868;if(!_0x59f671)return;Imported[_0x1eb530(0x49b)]?Window_Command['prototype'][_0x1eb530(0x991)][_0x1eb530(0x5a6)](this,_0x3bbf6c,_0x59f671,_0xcb777f,_0x1acc8c,_0x18afe5):Window_SkillList[_0x1eb530(0x5bb)][_0x1eb530(0x991)][_0x1eb530(0x5a6)](this,_0x59f671,_0xcb777f,_0x1acc8c,_0x18afe5);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x190)]=function(){},Window_ActorCommand['prototype'][_0x320868(0x631)]=function(){const _0x5e9a5e=_0x320868;Window_Command['prototype'][_0x5e9a5e(0x631)][_0x5e9a5e(0x5a6)](this);const _0x579603=this['battleLayoutStyle']();_0x579603===_0x5e9a5e(0xba8)&&this[_0x5e9a5e(0x7d5)]();},Window_ActorCommand['prototype'][_0x320868(0x2d1)]=function(){const _0x201ef5=_0x320868;if(this[_0x201ef5(0xb9f)])return this[_0x201ef5(0xb9f)];return this[_0x201ef5(0xb9f)]=SceneManager[_0x201ef5(0x64a)][_0x201ef5(0x2d1)](),this[_0x201ef5(0xb9f)];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x287)]=Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x8ff)],Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x8ff)]=function(_0xa7648e){const _0x257749=_0x320868,_0x53b3cf=this['battleLayoutStyle']();if(_0xa7648e&&['xp',_0x257749(0xa42)]['includes'](_0x53b3cf))this['resizeWindowXPStyle'](_0xa7648e);else _0xa7648e&&['border'][_0x257749(0x6d2)](_0x53b3cf)&&(this[_0x257749(0x98a)](_0xa7648e),this['showHelpWindow']());VisuMZ[_0x257749(0x5c8)][_0x257749(0x287)][_0x257749(0x5a6)](this,_0xa7648e),_0xa7648e&&$gameTroop[_0x257749(0x83b)]()[_0x257749(0x4c1)]>0x0&&_0xa7648e['battler']()&&_0xa7648e[_0x257749(0xb31)]()[_0x257749(0x7ca)]();},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x239)]=function(_0x494f59){const _0x3e21c6=_0x320868,_0x4885ec=VisuMZ[_0x3e21c6(0x5c8)][_0x3e21c6(0x1d7)][_0x3e21c6(0x759)][_0x3e21c6(0x889)],_0x44c80c=Math['round'](Graphics[_0x3e21c6(0x23d)]/0x3),_0x3b89b1=Math['round'](Graphics[_0x3e21c6(0x23d)]/$gameParty[_0x3e21c6(0x20a)]()[_0x3e21c6(0x4c1)]),_0x448286=Math[_0x3e21c6(0x382)](Math[_0x3e21c6(0x24f)](_0x44c80c,_0x3b89b1),_0x4885ec),_0x1568cc=this[_0x3e21c6(0x702)](VisuMZ[_0x3e21c6(0x5c8)]['Settings']['BattleLayout'][_0x3e21c6(0x1cb)]),_0x1a99bd=Math['floor']((Graphics['boxWidth']-Graphics[_0x3e21c6(0x529)])/0x2),_0x46a0c0=Graphics[_0x3e21c6(0x23d)]-_0x1a99bd,_0x5c2b9d=(Math[_0x3e21c6(0xa8c)](_0x3b89b1*_0x494f59[_0x3e21c6(0x655)]())+Math[_0x3e21c6(0xa8c)]((_0x3b89b1-_0x448286)/0x2))[_0x3e21c6(0x4a9)](_0x1a99bd,_0x46a0c0-_0x448286),_0x50f2c8=Math[_0x3e21c6(0xa8c)](SceneManager[_0x3e21c6(0x64a)][_0x3e21c6(0xabb)]['y']-_0x1568cc);this[_0x3e21c6(0x457)](_0x5c2b9d,_0x50f2c8,_0x448286,_0x1568cc),this[_0x3e21c6(0xadd)](),this[_0x3e21c6(0xc2d)](0x1);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x98a)]=function(_0x4a406b){const _0x45fade=_0x320868,_0x436f15=SceneManager['_scene'][_0x45fade(0x52e)]();this[_0x45fade(0x457)](_0x436f15['x'],_0x436f15['y'],_0x436f15['width'],_0x436f15[_0x45fade(0x351)]),this[_0x45fade(0xadd)](),this[_0x45fade(0xc2d)](0x0);},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x723)]=function(){const _0x24a4a6=_0x320868;if(this[_0x24a4a6(0x639)]){const _0x10bb32=this[_0x24a4a6(0x639)]['bitmap'],_0x415108=this[_0x24a4a6(0x529)]-0x8,_0xafedf9=this[_0x24a4a6(0x351)],_0xd879a6=this[_0x24a4a6(0xa1c)],_0x1ae7db=ColorManager[_0x24a4a6(0x8fa)](),_0x3dc4c4=ColorManager['dimColor2']();this['_dimmerSprite']['x']=0x4,_0x10bb32[_0x24a4a6(0x2c5)](_0x415108,_0xafedf9),_0x10bb32['gradientFillRect'](0x0,0x0,_0x415108,_0xd879a6,_0x3dc4c4,_0x1ae7db,!![]),_0x10bb32['fillRect'](0x0,_0xd879a6,_0x415108,_0xafedf9-_0xd879a6*0x2,_0x1ae7db),_0x10bb32[_0x24a4a6(0x7c5)](0x0,_0xafedf9-_0xd879a6,_0x415108,_0xd879a6,_0x1ae7db,_0x3dc4c4,!![]),this[_0x24a4a6(0x639)]['setFrame'](0x0,0x0,_0x415108,_0xafedf9);}},Window_ActorCommand[_0x320868(0x5bb)]['updateHelp']=function(){const _0x75271b=_0x320868;if(!this[_0x75271b(0x948)])return;const _0x23bc20=VisuMZ[_0x75271b(0x5c8)]['Settings'][_0x75271b(0x6c5)],_0x24fa04=this[_0x75271b(0x8ed)]();switch(_0x24fa04){case _0x75271b(0x280):this[_0x75271b(0x297)]($dataSkills[this[_0x75271b(0x948)][_0x75271b(0x9b2)]()]);break;case'guard':this['setHelpWindowItem']($dataSkills[this[_0x75271b(0x948)]['guardSkillId']()]);break;case _0x75271b(0x5ff):const _0x4028b0=_0x23bc20[_0x75271b(0x213)],_0xd6adc7=_0x4028b0[_0x75271b(0x8b0)]($dataSystem[_0x75271b(0x612)][this[_0x75271b(0xa4d)]()]);this['_helpWindow'][_0x75271b(0x377)](_0xd6adc7);break;case'singleSkill':this['setHelpWindowItem']($dataSkills[this[_0x75271b(0xa4d)]()]);break;case _0x75271b(0xc47):this['_helpWindow'][_0x75271b(0x377)](_0x23bc20[_0x75271b(0x1e1)]);break;case _0x75271b(0x4c9):this[_0x75271b(0xc69)][_0x75271b(0x377)](_0x23bc20['HelpEscape']);break;case _0x75271b(0xbf2):this[_0x75271b(0xc69)]['setText'](_0x23bc20['HelpAutoBattle']);break;case _0x75271b(0xb15):this[_0x75271b(0xc69)]['setText'](Window_InBattleStatus['SETTINGS'][_0x75271b(0x350)]);break;default:this['_helpWindow'][_0x75271b(0x377)]('');break;}},Window_ActorCommand[_0x320868(0x5bb)][_0x320868(0x332)]=function(){const _0x2eba22=_0x320868;this['forceSelect'](0x0);if(this[_0x2eba22(0x948)]&&ConfigManager[_0x2eba22(0xb2c)]){const _0x91a649=this[_0x2eba22(0x948)][_0x2eba22(0x49c)]();this[_0x2eba22(0xb57)](_0x91a649);if(_0x91a649==='skill'){const _0x28c563=this[_0x2eba22(0x948)][_0x2eba22(0x248)]();if(_0x28c563){const _0x9db7c0=this[_0x2eba22(0x2ad)](_0x2eba22(0x5ff),_0x28c563[_0x2eba22(0x5fa)]);this[_0x2eba22(0x94a)](_0x9db7c0||0x0);}}else{if(_0x91a649==='singleSkill'){const _0x1be7a0=this[_0x2eba22(0x948)][_0x2eba22(0x248)]();if(_0x1be7a0){const _0x578678=this[_0x2eba22(0x2ad)](_0x2eba22(0x427),_0x1be7a0['id']);this['select'](_0x578678||0x0);}}}}},Window_ActorCommand['prototype'][_0x320868(0x2ad)]=function(_0x3b336f,_0x20a075){const _0x1f46ce=_0x320868;return this[_0x1f46ce(0x498)][_0x1f46ce(0x5fd)](_0x32cc10=>_0x32cc10[_0x1f46ce(0x143)]===_0x3b336f&&_0x32cc10[_0x1f46ce(0x9e3)]===_0x20a075);},VisuMZ[_0x320868(0x5c8)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x136)],Window_BattleStatus['prototype'][_0x320868(0x136)]=function(_0x55b1d9){const _0x35d1fa=_0x320868;VisuMZ['BattleCore'][_0x35d1fa(0x97a)][_0x35d1fa(0x5a6)](this,_0x55b1d9),this[_0x35d1fa(0x6fb)](),this[_0x35d1fa(0x275)]();},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x2d1)]=function(){const _0x207a49=_0x320868;if(this['_battleLayoutStyle'])return this[_0x207a49(0xb9f)];return this[_0x207a49(0xb9f)]=SceneManager['_scene'][_0x207a49(0x2d1)](),this[_0x207a49(0xb9f)];},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x6fb)]=function(){const _0x186d59=_0x320868;this[_0x186d59(0x127)]=this[_0x186d59(0x4aa)]();const _0x1fdee0=VisuMZ[_0x186d59(0x5c8)][_0x186d59(0x1d7)]['BattleLayout'];_0x1fdee0[_0x186d59(0x294)]&&(this[_0x186d59(0x385)]=0x0);},Window_BattleStatus['prototype']['isFrameVisible']=function(){const _0x4d3692=_0x320868,_0x50a3d3=VisuMZ[_0x4d3692(0x5c8)]['Settings'][_0x4d3692(0x759)];if(_0x50a3d3['StatusWindowSkinFilename'])return!![];const _0xbf975b=this[_0x4d3692(0x2d1)]();switch(_0xbf975b){case _0x4d3692(0x69b):case _0x4d3692(0xba8):return!![];break;case'default':case'xp':case _0x4d3692(0xa42):default:return![];break;}},Window_BattleStatus['prototype']['extraHeight']=function(){const _0x430d59=_0x320868;return this[_0x430d59(0x4aa)]()?0x0:0xa;},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x4d8)]=function(){const _0x188284=_0x320868,_0x4fa430=this['battleLayoutStyle']();switch(_0x4fa430){case _0x188284(0x69b):return 0x1;break;case'xp':case _0x188284(0xa42):return $gameParty[_0x188284(0x20a)]()[_0x188284(0x4c1)];break;case'default':default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x221)]=function(){const _0x91eecd=_0x320868,_0x39ff91=this['battleLayoutStyle']();switch(_0x39ff91){case'list':return Window_StatusBase['prototype']['itemHeight'][_0x91eecd(0x5a6)](this);break;case _0x91eecd(0x86a):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus[_0x320868(0x5bb)]['rowSpacing']=function(){const _0x46e46e=_0x320868,_0x296aca=this[_0x46e46e(0x2d1)]();switch(_0x296aca){case _0x46e46e(0x69b):return Window_StatusBase[_0x46e46e(0x5bb)][_0x46e46e(0x3dd)][_0x46e46e(0x5a6)](this);break;case _0x46e46e(0x86a):case'xp':case _0x46e46e(0xa42):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x320868(0x36a)]=function(){const _0x4cb603=_0x320868;this[_0x4cb603(0x4aa)]()?Window_StatusBase[_0x4cb603(0x5bb)]['updatePadding']['call'](this):this[_0x4cb603(0xa1c)]=0x8;},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x4a2)]=function(){const _0x4244a6=_0x320868,_0x3d1bf7=VisuMZ[_0x4244a6(0x5c8)][_0x4244a6(0x1d7)][_0x4244a6(0x759)];_0x3d1bf7['StatusWindowSkinFilename']?this[_0x4244a6(0x495)]=ImageManager[_0x4244a6(0x381)](_0x3d1bf7[_0x4244a6(0x3c5)]):Window_StatusBase[_0x4244a6(0x5bb)][_0x4244a6(0x4a2)][_0x4244a6(0x5a6)](this);},Window_BattleStatus['prototype']['drawItemBackground']=function(_0x2f0705){const _0x9c780c=_0x320868,_0x330a59=VisuMZ[_0x9c780c(0x5c8)]['Settings']['BattleLayout'];if(_0x330a59[_0x9c780c(0x8ca)])return;Window_StatusBase[_0x9c780c(0x5bb)][_0x9c780c(0x855)][_0x9c780c(0x5a6)](this,_0x2f0705);},Window_BattleStatus['prototype'][_0x320868(0x4ce)]=function(){const _0x1e6cde=_0x320868;this[_0x1e6cde(0x77a)]=!![];},Window_BattleStatus[_0x320868(0x5bb)]['update']=function(){const _0x1b2ab8=_0x320868;Window_StatusBase[_0x1b2ab8(0x5bb)][_0x1b2ab8(0x77d)]['call'](this),this[_0x1b2ab8(0x218)](),this[_0x1b2ab8(0xbc7)]();if(this[_0x1b2ab8(0x2d1)]()===_0x1b2ab8(0xba8))this[_0x1b2ab8(0x74d)]();},Window_BattleStatus[_0x320868(0x5bb)]['updateRefresh']=function(){const _0x34ef62=_0x320868;if($gameTemp[_0x34ef62(0x4fe)]())this[_0x34ef62(0x535)](),this['_requestRefresh']=![],$gameTemp[_0x34ef62(0x13c)]();else this[_0x34ef62(0x77a)]&&(this[_0x34ef62(0x77a)]=![],this[_0x34ef62(0xbc2)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0xac0)]=function(){const _0x2c5c2a=_0x320868;Window_StatusBase[_0x2c5c2a(0x5bb)][_0x2c5c2a(0xac0)][_0x2c5c2a(0x5a6)](this);if(!$gameSystem[_0x2c5c2a(0x5a9)]())this['refresh']();},Window_BattleStatus['prototype'][_0x320868(0x190)]=function(){const _0x34c089=_0x320868;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase['prototype'][_0x34c089(0x190)][_0x34c089(0x5a6)](this);},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x73d)]=function(_0x38d779){const _0x437cc0=_0x320868,_0x3be728=this[_0x437cc0(0x2d1)]();switch(_0x3be728){case'xp':case'portrait':break;case'default':case _0x437cc0(0x69b):case'border':default:return Window_StatusBase[_0x437cc0(0x5bb)]['drawBackgroundRect'][_0x437cc0(0x5a6)](this,_0x38d779);break;}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x7cc)]=Window_BattleStatus['prototype'][_0x320868(0xa87)],Window_BattleStatus['prototype']['drawItemImage']=function(_0x4df2ae){const _0x592ddc=_0x320868,_0x39567e=this[_0x592ddc(0x2d1)]();switch(_0x39567e){case _0x592ddc(0x69b):this[_0x592ddc(0x45d)](_0x4df2ae);break;case'xp':this['drawItemImageXPStyle'](_0x4df2ae);break;case _0x592ddc(0xa42):this['drawItemImagePortraitStyle'](_0x4df2ae);break;case _0x592ddc(0x86a):case _0x592ddc(0xba8):default:VisuMZ[_0x592ddc(0x5c8)][_0x592ddc(0x7cc)]['call'](this,_0x4df2ae);break;}},Window_BattleStatus[_0x320868(0x5bb)]['drawItemStatus']=function(_0x448c08){const _0x2078b2=_0x320868,_0x400f4e=this[_0x2078b2(0x2d1)]();if(!$gameSystem['isSideView']())this[_0x2078b2(0xb7f)](_0x448c08);switch(_0x400f4e){case'list':this['drawItemStatusListStyle'](_0x448c08);break;case'xp':case _0x2078b2(0xa42):case _0x2078b2(0x86a):case _0x2078b2(0xba8):default:this[_0x2078b2(0x428)](_0x448c08);break;}},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x9af)]=function(){const _0x14fdaa=_0x320868,_0x137740=this['battleLayoutStyle']();if(['xp'][_0x14fdaa(0x6d2)](_0x137740)&&!$gameSystem['isSideView']()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase['prototype'][_0x14fdaa(0x9af)][_0x14fdaa(0x5a6)](this);},Window_BattleStatus[_0x320868(0x5bb)]['centerFrontViewSprite']=function(_0x5855aa){const _0x437484=_0x320868,_0x36f22d=this[_0x437484(0xb94)](_0x5855aa)[_0x437484(0xb31)]();if(!_0x36f22d)return;const _0x339f98=this['battleLayoutStyle'](),_0x1125df=this[_0x437484(0x7ab)](_0x5855aa);let _0x1ffd50=Math[_0x437484(0xa8c)](_0x1125df['x']+_0x1125df[_0x437484(0x529)]/0x2)+this[_0x437484(0xa1c)];[_0x437484(0x69b)][_0x437484(0x6d2)](_0x339f98)&&(_0x1ffd50=_0x1125df[_0x437484(0x529)]/$gameParty['battleMembers']()[_0x437484(0x4c1)],_0x1ffd50*=_0x5855aa,_0x1ffd50+=_0x1125df[_0x437484(0x529)]/$gameParty[_0x437484(0x20a)]()[_0x437484(0x4c1)]/0x2);let _0x203c1c=Math['round'](this[_0x437484(0x268)](_0x5855aa,_0x36f22d,_0x1125df));_0x36f22d[_0x437484(0x49d)](_0x1ffd50,_0x203c1c),this[_0x437484(0x4b7)](_0x36f22d,0x1),_0x36f22d[_0x437484(0xac0)](),this[_0x437484(0x9b4)](),this[_0x437484(0x378)]();},Window_BattleStatus[_0x320868(0x5bb)]['frontviewSpriteY']=function(_0x4eae79,_0xd2931a,_0x460038){const _0x21d46e=_0x320868,_0x4d82c6=VisuMZ[_0x21d46e(0x5c8)][_0x21d46e(0x1d7)][_0x21d46e(0x759)],_0xad8f1e=this[_0x21d46e(0x2d1)]();if(_0xad8f1e==='xp'){const _0x38d2e5=_0x4d82c6['XPSpriteYLocation'];switch(_0x38d2e5[_0x21d46e(0xc44)]()['trim']()){case _0x21d46e(0x78e):return _0x460038[_0x21d46e(0x351)]-_0xd2931a[_0x21d46e(0x18d)]['height']/0x4;break;case'center':const _0x28dc11=_0x4d82c6['XPActorDefaultHeight'];return(_0x460038[_0x21d46e(0x351)]+(_0xd2931a[_0x21d46e(0x351)]||_0x28dc11))/0x2;break;case'top':return 0x0;case _0x21d46e(0x3e0):default:return this[_0x21d46e(0x962)](_0x460038);break;}}else{if(_0xad8f1e===_0x21d46e(0xa42)){}}return _0xd2931a['height'];},Sprite_Name[_0x320868(0x5bb)][_0x320868(0x788)]=function(){return 0x24;},Sprite_Name[_0x320868(0x5bb)]['redraw']=function(){const _0x1409cb=_0x320868,_0x47348c=this[_0x1409cb(0x3e0)](),_0x1e40ab=this[_0x1409cb(0x92b)](),_0x1cd786=this[_0x1409cb(0x788)]();this['setupFont'](),this[_0x1409cb(0xa25)][_0x1409cb(0x927)](),this[_0x1409cb(0xa25)][_0x1409cb(0x2e8)](_0x47348c,0x4,0x0,_0x1e40ab,_0x1cd786,'left');},Bitmap[_0x320868(0x5bb)][_0x320868(0x2e8)]=function(_0x59f1bf,_0x20292f,_0x20fea7,_0x384afe,_0x40625f,_0xe952f7){const _0x273ac1=_0x320868;TextManager[_0x273ac1(0xc2a)]&&(_0x59f1bf=TextManager['parseLocalizedText'](_0x59f1bf));const _0x150340=this[_0x273ac1(0x70d)],_0x7047e7=_0x150340['globalAlpha'];_0x384afe=_0x384afe||0xffffffff;let _0x1e9c5a=_0x20292f,_0x319e5f=Math[_0x273ac1(0xa8c)](_0x20fea7+0x18/0x2+this[_0x273ac1(0x522)]*0.35);_0xe952f7==='center'&&(_0x1e9c5a+=_0x384afe/0x2),_0xe952f7===_0x273ac1(0x59d)&&(_0x1e9c5a+=_0x384afe),_0x150340[_0x273ac1(0x322)](),_0x150340[_0x273ac1(0x2cd)]=this[_0x273ac1(0x5f5)](),_0x150340[_0x273ac1(0x1f8)]=_0xe952f7,_0x150340['textBaseline']='alphabetic',_0x150340[_0x273ac1(0x946)]=0x1,this[_0x273ac1(0x79d)](_0x59f1bf,_0x1e9c5a,_0x319e5f,_0x384afe),_0x150340[_0x273ac1(0x946)]=_0x7047e7,this[_0x273ac1(0x591)](_0x59f1bf,_0x1e9c5a,_0x319e5f,_0x384afe),_0x150340['restore'](),this['_baseTexture'][_0x273ac1(0x77d)]();},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x962)]=function(_0x32cf41){const _0x4da4b8=_0x320868;return this['basicGaugesY'](_0x32cf41)-this[_0x4da4b8(0x9ad)]();},Window_BattleStatus['prototype'][_0x320868(0x45d)]=function(_0x187009){const _0x44ce9f=_0x320868;if(!VisuMZ[_0x44ce9f(0x5c8)][_0x44ce9f(0x1d7)]['BattleLayout']['ShowFacesListStyle'])return;const _0x31e5b9=this[_0x44ce9f(0xb94)](_0x187009),_0x4fab2e=this['itemRect'](_0x187009);_0x4fab2e[_0x44ce9f(0x529)]=ImageManager['faceWidth'],_0x4fab2e[_0x44ce9f(0x351)]-=0x2,this[_0x44ce9f(0xb28)](_0x31e5b9,_0x4fab2e['x']+0x1,_0x4fab2e['y']+0x1,_0x4fab2e[_0x44ce9f(0x529)],_0x4fab2e[_0x44ce9f(0x351)]);},Window_BattleStatus['prototype'][_0x320868(0x4d2)]=function(_0x53e457){const _0x563a75=_0x320868,_0x3938b1=VisuMZ[_0x563a75(0x5c8)][_0x563a75(0x1d7)][_0x563a75(0x759)],_0x2a1a39=$dataSystem[_0x563a75(0x6cc)]?0x4:0x3,_0x2265aa=_0x2a1a39*0x80+(_0x2a1a39-0x1)*0x8+0x4,_0xc8f717=this['actor'](_0x53e457),_0x539f4f=this[_0x563a75(0x7ab)](_0x53e457);let _0x2e05f4=_0x539f4f['x']+this[_0x563a75(0xa1c)];_0x3938b1[_0x563a75(0x780)]?_0x2e05f4=_0x539f4f['x']+ImageManager[_0x563a75(0xbe7)]+0x8:_0x2e05f4+=ImageManager['iconWidth'];const _0x37d9d8=Math[_0x563a75(0xa8c)](Math[_0x563a75(0x24f)](_0x539f4f['x']+_0x539f4f[_0x563a75(0x529)]-_0x2265aa,_0x2e05f4)),_0x7248fe=Math[_0x563a75(0xa8c)](_0x539f4f['y']+(_0x539f4f[_0x563a75(0x351)]-Sprite_Name[_0x563a75(0x5bb)][_0x563a75(0x788)]())/0x2),_0x1fb80b=Math[_0x563a75(0xa8c)](_0x37d9d8-ImageManager['iconWidth']/0x2-0x4),_0xd04146=Math[_0x563a75(0xa8c)](_0x539f4f['y']+(_0x539f4f['height']-ImageManager[_0x563a75(0x1b0)])/0x2+ImageManager['iconHeight']/0x2);let _0x595609=_0x37d9d8+0x88;const _0x48a008=_0x7248fe;this['placeTimeGauge'](_0xc8f717,_0x37d9d8-0x4+(_0x3938b1[_0x563a75(0xbee)]||0x0),_0x7248fe+(_0x3938b1[_0x563a75(0x389)]||0x0)),this[_0x563a75(0x9c8)](_0xc8f717,_0x37d9d8+(_0x3938b1[_0x563a75(0x3b1)]||0x0),_0x7248fe+(_0x3938b1['NameOffsetY']||0x0)),this[_0x563a75(0x2f0)](_0xc8f717,_0x1fb80b+(_0x3938b1['StateIconOffsetX']||0x0),_0xd04146+(_0x3938b1[_0x563a75(0x546)]||0x0)),this[_0x563a75(0x2a3)](_0xc8f717,'hp',_0x595609+0x88*0x0+(_0x3938b1[_0x563a75(0x85e)]||0x0),_0x48a008+(_0x3938b1['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0xc8f717,'mp',_0x595609+0x88*0x1+(_0x3938b1['MpGaugeOffsetX']||0x0),_0x48a008+(_0x3938b1['MpGaugeOffsetY']||0x0)),$dataSystem[_0x563a75(0x6cc)]&&this[_0x563a75(0x2a3)](_0xc8f717,'tp',_0x595609+0x88*0x2+(_0x3938b1[_0x563a75(0x8e5)]||0x0),_0x48a008+(_0x3938b1[_0x563a75(0x1dd)]||0x0));},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0xc09)]=function(_0x22fad3){const _0x3c6ae0=_0x320868;if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore'][_0x3c6ae0(0x7cc)][_0x3c6ae0(0x5a6)](this,_0x22fad3);},Window_BattleStatus['prototype'][_0x320868(0x428)]=function(_0x18268c){const _0x4218dc=_0x320868,_0x4c5b7e=VisuMZ[_0x4218dc(0x5c8)]['Settings']['BattleLayout'],_0x42915a=this[_0x4218dc(0xb94)](_0x18268c),_0x120e0b=this[_0x4218dc(0x7ab)](_0x18268c),_0x1cdc61=Math[_0x4218dc(0xa8c)](_0x120e0b['x']+(_0x120e0b[_0x4218dc(0x529)]-0x80)/0x2),_0x13f1a3=this[_0x4218dc(0x962)](_0x120e0b);let _0x3dd96b=_0x1cdc61-ImageManager['iconWidth']/0x2-0x4,_0x3cba67=_0x13f1a3+ImageManager[_0x4218dc(0x1b0)]/0x2;_0x3dd96b-ImageManager[_0x4218dc(0x4ef)]/0x2<_0x120e0b['x']&&(_0x3dd96b=_0x1cdc61+ImageManager[_0x4218dc(0x4ef)]/0x2-0x4,_0x3cba67=_0x13f1a3-ImageManager['iconHeight']/0x2);const _0x1bb07c=_0x1cdc61,_0x54acfb=this[_0x4218dc(0x65d)](_0x120e0b);this[_0x4218dc(0x58f)](_0x42915a,_0x1cdc61+(_0x4c5b7e['TpbGaugeOffsetX']||0x0),_0x13f1a3+(_0x4c5b7e[_0x4218dc(0x389)]||0x0)),this[_0x4218dc(0x9c8)](_0x42915a,_0x1cdc61+(_0x4c5b7e[_0x4218dc(0x3b1)]||0x0),_0x13f1a3+(_0x4c5b7e[_0x4218dc(0x77c)]||0x0)),this['placeStateIcon'](_0x42915a,_0x3dd96b+(_0x4c5b7e[_0x4218dc(0xa7f)]||0x0),_0x3cba67+(_0x4c5b7e[_0x4218dc(0x546)]||0x0)),this[_0x4218dc(0x2a3)](_0x42915a,'hp',_0x1bb07c+(_0x4c5b7e[_0x4218dc(0x85e)]||0x0),_0x54acfb+(_0x4c5b7e[_0x4218dc(0x6e3)]||0x0)),this[_0x4218dc(0x2a3)](_0x42915a,'mp',_0x1bb07c+(_0x4c5b7e['MpGaugeOffsetX']||0x0),_0x54acfb+this[_0x4218dc(0x9ad)]()+(_0x4c5b7e[_0x4218dc(0x3e8)]||0x0)),$dataSystem[_0x4218dc(0x6cc)]&&this[_0x4218dc(0x2a3)](_0x42915a,'tp',_0x1bb07c+(_0x4c5b7e[_0x4218dc(0x8e5)]||0x0),_0x54acfb+this[_0x4218dc(0x9ad)]()*0x2+(_0x4c5b7e[_0x4218dc(0x1dd)]||0x0));},Window_BattleStatus[_0x320868(0x5bb)]['showPortraits']=function(_0x488c61){const _0x5df241=_0x320868;if(!VisuMZ[_0x5df241(0x5c8)]['Settings']['BattleLayout'][_0x5df241(0x11e)])return![];if(_0x488c61[_0x5df241(0x82d)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x488c61[_0x5df241(0x762)]();},Game_Actor[_0x320868(0x5bb)]['getBattlePortraitOffsetX']=function(){const _0x16ab26=_0x320868;if(this['actor']()[_0x16ab26(0x418)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x16ab26(0xb94)]()[_0x16ab26(0x418)][_0x16ab26(0x2e0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor['prototype'][_0x320868(0x6b3)]=function(){const _0x47fb43=_0x320868;if(this[_0x47fb43(0xb94)]()[_0x47fb43(0x418)][_0x47fb43(0x2e0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x47fb43(0x418)][_0x47fb43(0x2e0)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x7f6)]=function(_0x3f60f1){const _0x1d0050=_0x320868,_0x1a811a=this[_0x1d0050(0xb94)](_0x3f60f1);if(this[_0x1d0050(0xa74)](_0x1a811a)){const _0x2d319a=_0x1d0050(0x6e6)[_0x1d0050(0x8b0)](_0x1a811a[_0x1d0050(0xb48)]()),_0x4b4d19=this[_0x1d0050(0x959)](_0x2d319a,Sprite),_0x3503e9=_0x1a811a[_0x1d0050(0x37b)]();_0x3503e9!==''?_0x4b4d19[_0x1d0050(0xa25)]=ImageManager[_0x1d0050(0x505)](_0x3503e9):_0x4b4d19[_0x1d0050(0xa25)]=ImageManager[_0x1d0050(0x430)];const _0x56330e=this[_0x1d0050(0x7ab)](_0x3f60f1);_0x4b4d19['anchor']['x']=0.5,_0x4b4d19[_0x1d0050(0x540)]['y']=0x1;let _0x266f1f=Math[_0x1d0050(0xa8c)](_0x56330e['x']+_0x56330e['width']/0x2)+this['padding'];_0x266f1f+=_0x1a811a[_0x1d0050(0x89b)]();let _0x2b254b=Math[_0x1d0050(0xa8c)](this[_0x1d0050(0x351)]);_0x2b254b+=_0x1a811a[_0x1d0050(0x6b3)](),_0x4b4d19['move'](_0x266f1f,_0x2b254b);const _0x4f76df=VisuMZ['BattleCore']['Settings'][_0x1d0050(0x759)]['PortraitScale'];_0x4b4d19[_0x1d0050(0x57d)]['x']=_0x4f76df,_0x4b4d19[_0x1d0050(0x57d)]['y']=_0x4f76df,_0x4b4d19[_0x1d0050(0xac0)]();}else{const _0x26e7ee=this[_0x1d0050(0xbd2)](_0x3f60f1);this[_0x1d0050(0xb28)](_0x1a811a,_0x26e7ee['x'],_0x26e7ee['y'],_0x26e7ee['width'],_0x26e7ee[_0x1d0050(0x351)]);}},Window_BattleStatus[_0x320868(0x5bb)]['createInnerPortrait']=function(_0x181b24,_0x51c9cd){const _0x4581e7=_0x320868,_0x2c29ce=this['_additionalSprites'];if(_0x2c29ce[_0x181b24])return _0x2c29ce[_0x181b24];else{const _0x54b290=new _0x51c9cd();return _0x2c29ce[_0x181b24]=_0x54b290,this[_0x4581e7(0x472)](_0x54b290),this[_0x4581e7(0x472)](this[_0x4581e7(0x51b)]),_0x54b290;}},Window_BattleStatus['prototype'][_0x320868(0x4e1)]=function(){const _0x2c5471=_0x320868;this[_0x2c5471(0x325)](),this['_createEffectsContainer'](),Window_StatusBase['prototype']['_createClientArea']['call'](this),this[_0x2c5471(0xc0a)]();},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x325)]=function(){const _0x160030=_0x320868;this[_0x160030(0x51b)]=new Sprite(),this['_cursorArea']['filters']=[new PIXI[(_0x160030(0xc3f))][(_0x160030(0x273))]()],this[_0x160030(0x51b)][_0x160030(0x99a)]=new Rectangle(),this[_0x160030(0x51b)]['move'](this['_padding'],this['_padding']),this['addChild'](this[_0x160030(0x51b)]);},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x5e2)]=function(){const _0x406722=_0x320868;this[_0x406722(0x3ae)]=new Sprite(),this[_0x406722(0x4f0)](this[_0x406722(0x3ae)]);},Window_BattleStatus[_0x320868(0x5bb)]['updateEffectsContainer']=function(){const _0x1e11ce=_0x320868;this[_0x1e11ce(0x3ae)]&&this[_0x1e11ce(0x4f0)](this[_0x1e11ce(0x3ae)]);},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0xc0a)]=function(){const _0x1cff78=_0x320868;this['_damageContainer']=new Sprite(),this[_0x1cff78(0x4f0)](this[_0x1cff78(0x335)]);},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x214)]=function(){const _0x2a86a4=_0x320868;this['_cursorSprite']=new Sprite();for(let _0x345816=0x0;_0x345816<0x9;_0x345816++){this[_0x2a86a4(0x848)][_0x2a86a4(0x4f0)](new Sprite());}this['_cursorArea'][_0x2a86a4(0x4f0)](this[_0x2a86a4(0x848)]);},Window_BattleStatus[_0x320868(0x5bb)]['_updateClientArea']=function(){const _0x1cb673=_0x320868;Window_StatusBase[_0x1cb673(0x5bb)][_0x1cb673(0x63a)]['call'](this),this['_updateCursorArea']();},Window_BattleStatus['prototype'][_0x320868(0x45f)]=function(){const _0x4e5003=_0x320868,_0x441899=this[_0x4e5003(0x989)];this[_0x4e5003(0x51b)][_0x4e5003(0x457)](_0x441899,_0x441899),this[_0x4e5003(0x51b)]['x']=_0x441899-this[_0x4e5003(0x6ed)]['x'],this[_0x4e5003(0x51b)]['y']=_0x441899-this[_0x4e5003(0x6ed)]['y'],this[_0x4e5003(0x489)]>0x0&&this[_0x4e5003(0x37e)]>0x0?this['_cursorArea'][_0x4e5003(0x6b7)]=this[_0x4e5003(0xa00)]():this[_0x4e5003(0x51b)][_0x4e5003(0x6b7)]=![];},Window_BattleStatus[_0x320868(0x5bb)]['_updateFilterArea']=function(){const _0x22b497=_0x320868;Window_StatusBase[_0x22b497(0x5bb)][_0x22b497(0x93f)][_0x22b497(0x5a6)](this),this[_0x22b497(0x40f)]();},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x40f)]=function(){const _0x53c8f5=_0x320868,_0x42211c=this['_cursorArea'][_0x53c8f5(0x9d4)]['apply'](new Point(0x0,0x0)),_0x289c24=this[_0x53c8f5(0x51b)][_0x53c8f5(0x99a)];_0x289c24['x']=_0x42211c['x']+this[_0x53c8f5(0x6ed)]['x'],_0x289c24['y']=_0x42211c['y']+this[_0x53c8f5(0x6ed)]['y'],_0x289c24['width']=this[_0x53c8f5(0x489)],_0x289c24[_0x53c8f5(0x351)]=this[_0x53c8f5(0x37e)];},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x98d)]=function(_0x41dabc){const _0x400f93=_0x320868;if(this[_0x400f93(0x2d1)]()!==_0x400f93(0xa42))return;this[_0x400f93(0x7f6)](_0x41dabc['index']());},Window_BattleStatus[_0x320868(0x5bb)]['addDamageSprite']=function(_0x3a6098,_0x3ca676){const _0x501bf0=_0x320868;if(!this[_0x501bf0(0x335)])return;if(!_0x3a6098)return;if(!_0x3ca676)return;const _0x33c4cf=this[_0x501bf0(0x7ab)](_0x3ca676[_0x501bf0(0x655)]());_0x33c4cf['x']+=_0x33c4cf['width']/0x2+this[_0x501bf0(0xa1c)],_0x3a6098['x']=_0x33c4cf['x'],_0x3a6098['y']=_0x33c4cf['y'],this['_damageContainer']['addChild'](_0x3a6098);},Window_BattleStatus[_0x320868(0x5bb)]['removeDamageSprite']=function(_0x3ba0b5){const _0x2a4a06=_0x320868;if(!this[_0x2a4a06(0x335)])return;if(!_0x3ba0b5)return;this[_0x2a4a06(0x335)][_0x2a4a06(0x3bc)](_0x3ba0b5);},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x74d)]=function(){const _0x23619e=_0x320868;if(!this[_0x23619e(0x6a2)]())return;if(!this['_borderPortraitSprite'])this[_0x23619e(0xac2)]();this[_0x23619e(0x9f5)](),this[_0x23619e(0xb81)]();},Window_BattleStatus[_0x320868(0x5bb)]['isBorderStylePortraitShown']=function(){const _0x586959=_0x320868;if(this[_0x586959(0xc58)]!==Window_BattleStatus)return![];if(!SceneManager[_0x586959(0x96d)]())return![];return VisuMZ[_0x586959(0x5c8)][_0x586959(0x1d7)][_0x586959(0x759)][_0x586959(0x804)];},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0xac2)]=function(){const _0x490c72=_0x320868;this['_borderPortraitSprite']=new Sprite();const _0x33e310=SceneManager[_0x490c72(0x64a)],_0x552dbb=_0x33e310[_0x490c72(0x6ff)]['indexOf'](_0x33e310['_windowLayer']);_0x33e310[_0x490c72(0x4b7)](this[_0x490c72(0x390)],_0x552dbb),this[_0x490c72(0x390)][_0x490c72(0x540)]['x']=0.5,this[_0x490c72(0x390)][_0x490c72(0x540)]['y']=0x1;const _0x104241=VisuMZ[_0x490c72(0x5c8)][_0x490c72(0x1d7)][_0x490c72(0x759)][_0x490c72(0x470)];this[_0x490c72(0x390)][_0x490c72(0x57d)]['x']=_0x104241,this[_0x490c72(0x390)]['scale']['y']=_0x104241,this[_0x490c72(0x390)]['y']=this['y']+this[_0x490c72(0x351)],this[_0x490c72(0x9e4)]=0x0;},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x972)]=function(){const _0x1c4c6d=_0x320868;return BattleManager[_0x1c4c6d(0x760)]();},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x9f5)]=function(){const _0x526017=_0x320868;this[_0x526017(0x390)][_0x526017(0x6b7)]=this[_0x526017(0x972)]();const _0x309551=BattleManager[_0x526017(0xb94)](),_0x49d05a=_0x309551?_0x309551[_0x526017(0x37b)]()||'':'';if(_0x309551===this[_0x526017(0x390)][_0x526017(0xb94)]&&_0x49d05a===this['_borderPortraitSprite']['lastFilename'])return;this['_borderPortraitSprite']['actor']=_0x309551||this[_0x526017(0x390)][_0x526017(0xb94)],this['_borderPortraitSprite'][_0x526017(0xb6e)]=_0x49d05a;if(!_0x309551)return;else{if(_0x49d05a===''){this[_0x526017(0x390)][_0x526017(0xa25)]=ImageManager[_0x526017(0x430)],this[_0x526017(0x390)]['lastFilename']='';return;}else{const _0x1a4153=ImageManager[_0x526017(0x505)](_0x49d05a);this[_0x526017(0x390)][_0x526017(0x385)]=0x0,_0x1a4153[_0x526017(0xa05)](this['processBorderActor'][_0x526017(0x1cc)](this,_0x1a4153));}}},Window_BattleStatus[_0x320868(0x5bb)]['processBorderActor']=function(_0x6e64bd){const _0x18ac28=_0x320868;this[_0x18ac28(0x9e4)]=0x14,this[_0x18ac28(0x390)][_0x18ac28(0xa25)]=_0x6e64bd;SceneManager[_0x18ac28(0x64a)][_0x18ac28(0x9bf)]()?(this[_0x18ac28(0x390)]['x']=0x0,this[_0x18ac28(0x599)]=Math[_0x18ac28(0x5e5)](_0x6e64bd[_0x18ac28(0x529)]/0x2)):(this[_0x18ac28(0x390)]['x']=this['width'],this[_0x18ac28(0x599)]=this[_0x18ac28(0x529)]*0x3/0x4);this['_borderPortraitSprite']['opacity']=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x18ac28(0x351)];const _0xef10b5=BattleManager[_0x18ac28(0xb94)]();_0xef10b5&&(this[_0x18ac28(0x599)]+=_0xef10b5[_0x18ac28(0x89b)](),this['_borderPortraitSprite']['y']+=_0xef10b5[_0x18ac28(0x6b3)]());},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0xb81)]=function(){const _0x1aa8c0=_0x320868;if(this[_0x1aa8c0(0x9e4)]>0x0){const _0x5c6662=this[_0x1aa8c0(0x9e4)],_0x103f8f=this[_0x1aa8c0(0x390)];_0x103f8f['x']=(_0x103f8f['x']*(_0x5c6662-0x1)+this[_0x1aa8c0(0x599)])/_0x5c6662,_0x103f8f['opacity']=(_0x103f8f['opacity']*(_0x5c6662-0x1)+0xff)/_0x5c6662,this['_borderPortraitDuration']--;}},Window_BattleStatus[_0x320868(0x5bb)]['updateEffectContainers']=function(){const _0x1783cd=_0x320868;return;this['_effectsContainer']&&(this[_0x1783cd(0x3ae)]['x']=this['x'],this[_0x1783cd(0x3ae)]['y']=this['y']),this[_0x1783cd(0x335)]&&(this['_damageContainer']['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x275)]=function(){const _0x12a479=_0x320868,_0x1ca9e1=VisuMZ[_0x12a479(0x5c8)][_0x12a479(0x1d7)]['BattleLayout'];if(_0x1ca9e1[_0x12a479(0x4e9)]){const _0x267452=new Sprite();_0x267452[_0x12a479(0xa25)]=ImageManager['loadSystem'](_0x1ca9e1[_0x12a479(0x4e9)]),_0x267452['x']=_0x1ca9e1[_0x12a479(0xc28)]||0x0,_0x267452['y']=_0x1ca9e1['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x12a479(0x472)](_0x267452),this['_backAttachmentSprite']=_0x267452;}if(_0x1ca9e1[_0x12a479(0x1fd)]){const _0x356bfe=new Sprite();_0x356bfe['bitmap']=ImageManager[_0x12a479(0x381)](_0x1ca9e1[_0x12a479(0x1fd)]),_0x356bfe['x']=_0x1ca9e1['StatusWindowAttachmentFrontOffsetX']||0x0,_0x356bfe['y']=_0x1ca9e1[_0x12a479(0xad3)]||0x0,this[_0x12a479(0x4f0)](_0x356bfe),this['_frontAttachmentSprite']=_0x356bfe;}},Window_BattleStatus[_0x320868(0x5bb)][_0x320868(0x378)]=function(){const _0x5dc9ad=_0x320868;this[_0x5dc9ad(0x728)]&&this[_0x5dc9ad(0x4f0)](this[_0x5dc9ad(0x728)]),this[_0x5dc9ad(0x91d)]&&this[_0x5dc9ad(0x472)](this[_0x5dc9ad(0x91d)]);},Window_BattleActor[_0x320868(0x5bb)][_0x320868(0x314)]=function(){const _0x368d0d=_0x320868;return this[_0x368d0d(0xc5b)]();},Window_BattleActor[_0x320868(0x5bb)][_0x320868(0xc5b)]=function(){const _0x5319e6=_0x320868,_0x577375=BattleManager[_0x5319e6(0x662)]();if(!_0x577375)return!![];if(!_0x577375[_0x5319e6(0xc47)]())return!![];const _0x2b6337=this[_0x5319e6(0xb94)](this[_0x5319e6(0x655)]()),_0x5181d5=_0x577375['item']()[_0x5319e6(0x418)];if(_0x577375[_0x5319e6(0x703)]()){if(_0x2b6337===BattleManager[_0x5319e6(0xb94)]())return![];}if(_0x577375['isForDeadFriend']()){if(!_0x2b6337[_0x5319e6(0x3e3)]())return![];}if(_0x577375[_0x5319e6(0x391)]()){if(!_0x2b6337[_0x5319e6(0x174)]())return![];}return!![];},Window_BattleActor[_0x320868(0x5bb)][_0x320868(0x81c)]=function(_0x20f3dd){const _0x4e4d43=_0x320868;this[_0x4e4d43(0xc10)]=_0x20f3dd;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x842)]=Window_BattleActor[_0x320868(0x5bb)]['processTouch'],Window_BattleActor['prototype'][_0x320868(0xb16)]=function(){const _0x6dc0e4=_0x320868;Window_BattleStatus['prototype'][_0x6dc0e4(0xb16)][_0x6dc0e4(0x5a6)](this),this['_enemyWindowMode']?this[_0x6dc0e4(0x476)]():VisuMZ['BattleCore'][_0x6dc0e4(0x842)][_0x6dc0e4(0x5a6)](this);},Window_BattleActor[_0x320868(0x5bb)][_0x320868(0x476)]=function(){const _0xbdbd14=_0x320868,_0xb220ed=SceneManager[_0xbdbd14(0x64a)][_0xbdbd14(0x62a)];if(!_0xb220ed)return;this['_doubleTouch']=![];const _0x5175db=this[_0xbdbd14(0x28e)]();if(_0x5175db>=0x0){this[_0xbdbd14(0x94a)](_0x5175db);if(TouchInput[_0xbdbd14(0xa2c)]()){const _0x32ae0a=$gameParty[_0xbdbd14(0xb0d)]()[_0x5175db],_0x42559e=_0xb220ed['_enemies'][_0xbdbd14(0x77f)](_0x32ae0a);_0x42559e>=0x0&&(_0xb220ed[_0xbdbd14(0x94a)](_0x42559e),_0xb220ed['processOk']());}}},Window_BattleActor[_0x320868(0x5bb)][_0x320868(0x7bb)]=function(){const _0x2aa9ec=_0x320868;this['_enemyWindowMode']&&(this['_animationCount']++,this[_0x2aa9ec(0x55d)]=!![]);const _0x280721=Window_BattleStatus[_0x2aa9ec(0x5bb)][_0x2aa9ec(0x7bb)]['call'](this);return this[_0x2aa9ec(0xc10)]&&(this[_0x2aa9ec(0x55d)]=![]),_0x280721;},VisuMZ[_0x320868(0x5c8)][_0x320868(0x657)]=Window_BattleActor[_0x320868(0x5bb)][_0x320868(0xac0)],Window_BattleActor[_0x320868(0x5bb)][_0x320868(0xac0)]=function(){const _0x362af4=_0x320868;VisuMZ[_0x362af4(0x5c8)][_0x362af4(0x657)][_0x362af4(0x5a6)](this);const _0x5ad23e=BattleManager[_0x362af4(0x662)]();if(_0x5ad23e){const _0x11a3a5=$gameParty[_0x362af4(0x83b)]();_0x5ad23e['canSingleOrMultipleSelect']()&&_0x11a3a5[_0x362af4(0x4c1)]>0x1&&this[_0x362af4(0x163)](_0x362af4(0x91c),this[_0x362af4(0xa10)]['bind'](this));}},VisuMZ[_0x320868(0x5c8)][_0x320868(0x27e)]=Window_BattleActor[_0x320868(0x5bb)][_0x320868(0x190)],Window_BattleActor[_0x320868(0x5bb)][_0x320868(0x190)]=function(){const _0x35fbab=_0x320868;VisuMZ[_0x35fbab(0x5c8)][_0x35fbab(0x27e)]['call'](this),delete this[_0x35fbab(0x72f)][_0x35fbab(0x9ef)],delete this[_0x35fbab(0x72f)][_0x35fbab(0x91c)];},Window_BattleActor['prototype']['selectAllActors']=function(){const _0x405724=_0x320868,_0x1ce27c=BattleManager[_0x405724(0x662)]();if(_0x1ce27c)_0x1ce27c[_0x405724(0x558)](_0x405724(0x587));this[_0x405724(0x3d0)]();},VisuMZ[_0x320868(0x5c8)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x136)],Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x136)]=function(_0x3d6661){const _0x4f3d49=_0x320868;this[_0x4f3d49(0x758)]=null,VisuMZ['BattleCore'][_0x4f3d49(0xa3b)][_0x4f3d49(0x5a6)](this,_0x3d6661);if(Imported[_0x4f3d49(0xb45)]){if(VisuMZ[_0x4f3d49(0x9e5)][_0x4f3d49(0x43b)]<1.12){let _0x37ff56='';_0x37ff56+='VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20',_0x37ff56+='in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20',_0x37ff56+=_0x4f3d49(0xb24),alert(_0x37ff56),SceneManager['exit']();}}},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x4d8)]=function(){const _0x166a97=_0x320868;return this[_0x166a97(0x307)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x960)]=Window_BattleEnemy[_0x320868(0x5bb)]['show'],Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0xac0)]=function(){const _0x36f85e=_0x320868;VisuMZ[_0x36f85e(0x5c8)][_0x36f85e(0x960)]['call'](this),this['y']=Graphics['height']*0xa,this[_0x36f85e(0x5a2)]()&&this['openBattleActorWindow']();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x286)]=Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x190)],Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x190)]=function(){const _0x10afcb=_0x320868;VisuMZ['BattleCore'][_0x10afcb(0x286)][_0x10afcb(0x5a6)](this),$gameParty[_0x10afcb(0x94a)](null),delete this[_0x10afcb(0x72f)][_0x10afcb(0x9ef)],delete this[_0x10afcb(0x72f)][_0x10afcb(0x91c)];},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0xc53)]=function(){const _0x4ca114=_0x320868;let _0x9df08=$gameTroop[_0x4ca114(0x83b)]();const _0x33b586=BattleManager[_0x4ca114(0x662)]();if(_0x33b586){_0x33b586[_0x4ca114(0x260)]()&&_0x9df08[_0x4ca114(0x4c1)]>0x1&&this[_0x4ca114(0x163)](_0x4ca114(0x9ef),this['selectAllEnemies'][_0x4ca114(0x1cc)](this));if(_0x33b586[_0x4ca114(0x629)]()){const _0xa4b236=$gameParty['aliveMembers']();_0x9df08=_0x9df08[_0x4ca114(0x1c0)](_0xa4b236),_0x33b586['canSingleOrMultipleSelect']()&&_0xa4b236[_0x4ca114(0x4c1)]>0x1&&this[_0x4ca114(0x163)](_0x4ca114(0x91c),this[_0x4ca114(0xa10)][_0x4ca114(0x1cc)](this));}}return _0x9df08;},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0xbc2)]=function(){const _0x20dd4c=_0x320868;this[_0x20dd4c(0xa62)]=this[_0x20dd4c(0xc53)](),this[_0x20dd4c(0xb2e)](),Window_Selectable[_0x20dd4c(0x5bb)][_0x20dd4c(0xbc2)]['call'](this);},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0xb2e)]=function(){const _0xe69ede=_0x320868;this[_0xe69ede(0xa62)][_0xe69ede(0x811)]((_0x112f82,_0x2b9fd8)=>{const _0x133571=_0xe69ede;if(_0x112f82['isActor']()!==_0x2b9fd8[_0x133571(0x94e)]()){if(_0x112f82[_0x133571(0xb8b)]())return-0x1;if(_0x2b9fd8[_0x133571(0xb8b)]())return 0x1;}if(_0x112f82['isActor']()&&_0x2b9fd8[_0x133571(0x94e)]())return _0x112f82[_0x133571(0x655)]()-_0x2b9fd8['index']();return _0x112f82[_0x133571(0xb31)]()[_0x133571(0xb8e)]===_0x2b9fd8[_0x133571(0xb31)]()[_0x133571(0xb8e)]?_0x112f82[_0x133571(0xb31)]()[_0x133571(0xba4)]-_0x2b9fd8[_0x133571(0xb31)]()[_0x133571(0xba4)]:_0x112f82['battler']()[_0x133571(0xb8e)]-_0x2b9fd8[_0x133571(0xb31)]()['_baseX'];}),SceneManager[_0xe69ede(0x19d)]()&&this['_enemies'][_0xe69ede(0x49e)]();},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x413)]=function(){const _0x3bcede=_0x320868,_0x478c50=VisuMZ[_0x3bcede(0x5c8)]['Settings'][_0x3bcede(0x14d)];_0x478c50[_0x3bcede(0x5a0)]?this['autoSelectLastSelected']():this['autoSelectPriority']();},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x53c)]=function(){const _0x49799b=_0x320868,_0x55fa44=BattleManager[_0x49799b(0x662)]();if(_0x55fa44&&_0x55fa44[_0x49799b(0x629)]()){if(_0x55fa44[_0x49799b(0x9d0)]()){if(this[_0x49799b(0x8d4)]&&this[_0x49799b(0xa62)][_0x49799b(0x6d2)](this[_0x49799b(0x8d4)])){const _0x17e163=this[_0x49799b(0xa62)][_0x49799b(0x77f)](this[_0x49799b(0x8d4)]);return this['forceSelect'](_0x17e163);}else return this[_0x49799b(0x4cc)]();}}if(this['_lastEnemy']&&this[_0x49799b(0xa62)][_0x49799b(0x6d2)](this['_lastEnemy'])){const _0x3b6772=this[_0x49799b(0xa62)]['indexOf'](this[_0x49799b(0x758)]);this[_0x49799b(0x7cb)](_0x3b6772);}else this[_0x49799b(0x4cc)]();},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x4cc)]=function(){const _0x5aad5b=_0x320868,_0x41e3d0=BattleManager[_0x5aad5b(0x662)]();if(_0x41e3d0&&_0x41e3d0[_0x5aad5b(0x629)]()){const _0xd1cbd5=$gameParty['aliveMembers']()[0x0];let _0x2cad44=this[_0x5aad5b(0xa62)][_0x5aad5b(0x77f)](_0xd1cbd5);const _0x386c76=_0x41e3d0[_0x5aad5b(0xc47)]()['scope'];if(_0x386c76['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this['forceSelect'](_0x2cad44);return;}else{if(_0x386c76[_0x5aad5b(0x2e0)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this['forceSelect'](_0x2cad44-0x1);return;}}}const _0xb9b0db=VisuMZ['BattleCore'][_0x5aad5b(0x1d7)]['Enemy'];let _0x32a37a=![];$gameSystem[_0x5aad5b(0x5a9)]()?_0x32a37a=_0xb9b0db[_0x5aad5b(0x3d3)]:_0x32a37a=_0xb9b0db[_0x5aad5b(0x411)],this[_0x5aad5b(0x7cb)](_0x32a37a?this[_0x5aad5b(0x307)]()-0x1:0x0);},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x969)]=function(){const _0x3da6ce=_0x320868;Window_Selectable['prototype'][_0x3da6ce(0x969)][_0x3da6ce(0x5a6)](this);if(!this[_0x3da6ce(0x568)]())return;if(this[_0x3da6ce(0x568)]()[_0x3da6ce(0xb8b)]())this[_0x3da6ce(0x758)]=this[_0x3da6ce(0x568)]();if(this[_0x3da6ce(0x568)]()['isActor']())this[_0x3da6ce(0x8d4)]=this[_0x3da6ce(0x568)]();},Window_BattleEnemy[_0x320868(0x5bb)]['select']=function(_0x51194a){const _0x103ee2=_0x320868;Window_Selectable[_0x103ee2(0x5bb)][_0x103ee2(0x94a)][_0x103ee2(0x5a6)](this,_0x51194a),$gameTroop[_0x103ee2(0x94a)](this[_0x103ee2(0x568)]()),$gameParty[_0x103ee2(0x94a)](this[_0x103ee2(0x568)]());if(!this[_0x103ee2(0x568)]())return;if(this[_0x103ee2(0x5a2)]()){const _0x4ebf8a=SceneManager[_0x103ee2(0x64a)][_0x103ee2(0x43c)];this['enemy']()[_0x103ee2(0x94e)]()?_0x4ebf8a[_0x103ee2(0x94a)](this[_0x103ee2(0x568)]()[_0x103ee2(0x655)]()):_0x4ebf8a[_0x103ee2(0xa99)]();}},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x5a2)]=function(){const _0x405ae8=_0x320868;if(!this[_0x405ae8(0x6b7)])return![];if($gameSystem[_0x405ae8(0x5a9)]())return![];const _0xe6f017=SceneManager[_0x405ae8(0x64a)][_0x405ae8(0x2d1)](),_0x456b4c=[_0x405ae8(0x86a),_0x405ae8(0x69b),'xp','portrait',_0x405ae8(0xba8)];return _0x456b4c[_0x405ae8(0x6d2)](_0xe6f017);},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0xbb9)]=function(){const _0x93e0ac=_0x320868,_0x1040b8=SceneManager[_0x93e0ac(0x64a)][_0x93e0ac(0x43c)];_0x1040b8[_0x93e0ac(0xac0)](),_0x1040b8[_0x93e0ac(0x81c)](!![]),_0x1040b8[_0x93e0ac(0xbc2)](),_0x1040b8['deselect']();const _0x137dec=SceneManager[_0x93e0ac(0x64a)][_0x93e0ac(0x2d1)](),_0x218709=['xp',_0x93e0ac(0xa42),'border'];if(_0x218709['includes'](_0x137dec)){const _0x25d600=SceneManager['_scene']['_statusWindow'];_0x25d600[_0x93e0ac(0x57d)]['y']=0x0;}},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0xbdb)]=function(){const _0x18c929=_0x320868,_0x12e3e7=SceneManager[_0x18c929(0x64a)][_0x18c929(0x43c)];_0x12e3e7[_0x18c929(0x190)](),_0x12e3e7[_0x18c929(0x81c)](![]),_0x12e3e7[_0x18c929(0xa99)]();const _0x5e2540=SceneManager[_0x18c929(0x64a)][_0x18c929(0xabb)];_0x5e2540[_0x18c929(0x57d)]['y']=0x1;},Window_BattleEnemy[_0x320868(0x5bb)][_0x320868(0x670)]=function(){const _0x2aba5d=_0x320868,_0x2e7c43=BattleManager[_0x2aba5d(0x662)]();if(_0x2e7c43)_0x2e7c43[_0x2aba5d(0x558)](_0x2aba5d(0xa65));this[_0x2aba5d(0x3d0)]();},Window_BattleEnemy[_0x320868(0x5bb)]['selectAllActors']=function(){const _0x5ac898=_0x320868,_0x1661f4=BattleManager[_0x5ac898(0x662)]();if(_0x1661f4)_0x1661f4[_0x5ac898(0x558)](_0x5ac898(0x587));this[_0x5ac898(0x3d0)]();},Window_BattleEnemy['prototype']['isCurrentItemEnabled']=function(){const _0x291ab5=_0x320868;return this[_0x291ab5(0xc5b)]();},Window_BattleEnemy['prototype'][_0x320868(0xc5b)]=function(){const _0x5c46ee=_0x320868,_0x49b3bd=BattleManager['inputtingAction']();if(!_0x49b3bd)return!![];if(!_0x49b3bd[_0x5c46ee(0xc47)]())return!![];const _0x134469=this['enemy'](),_0x3845c1=_0x49b3bd['item']()[_0x5c46ee(0x418)];if(_0x49b3bd[_0x5c46ee(0x703)]()){if(_0x134469===BattleManager[_0x5c46ee(0xb94)]())return![];}return!![];},Window_BattleItem[_0x320868(0x5bb)]['includes']=function(_0x2bb003){const _0x3377b5=_0x320868;if(!_0x2bb003)return![];return _0x2bb003[_0x3377b5(0xb7e)]===0x0||_0x2bb003['occasion']===0x1;};function Window_AutoBattleCancel(){const _0x55b1ca=_0x320868;this[_0x55b1ca(0x136)](...arguments);}Window_AutoBattleCancel['prototype']=Object['create'](Window_Base[_0x320868(0x5bb)]),Window_AutoBattleCancel[_0x320868(0x5bb)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x320868(0x5bb)][_0x320868(0x136)]=function(_0x3c5f92){const _0x19fd45=_0x320868;Window_Base[_0x19fd45(0x5bb)][_0x19fd45(0x136)]['call'](this,_0x3c5f92),this[_0x19fd45(0xc2d)](this[_0x19fd45(0x72e)]()),this[_0x19fd45(0xbc2)]();},Window_AutoBattleCancel['prototype'][_0x320868(0x72e)]=function(){const _0xffef0e=_0x320868;return VisuMZ[_0xffef0e(0x5c8)][_0xffef0e(0x1d7)][_0xffef0e(0x252)][_0xffef0e(0x55e)];},Window_AutoBattleCancel['prototype'][_0x320868(0xbc2)]=function(){const _0x4ac18b=_0x320868;this[_0x4ac18b(0x2e5)][_0x4ac18b(0x927)]();const _0x2d262d=VisuMZ[_0x4ac18b(0x5c8)][_0x4ac18b(0x1d7)][_0x4ac18b(0x252)][_0x4ac18b(0x30f)],_0x41e25d=_0x2d262d['format'](this[_0x4ac18b(0x636)](),this[_0x4ac18b(0x90d)]()),_0x1f76f6=this[_0x4ac18b(0x864)](_0x41e25d)[_0x4ac18b(0x529)],_0x71f542=Math[_0x4ac18b(0x5a8)]((this[_0x4ac18b(0x489)]-_0x1f76f6)/0x2);this['drawTextEx'](_0x41e25d,_0x71f542,0x0,_0x1f76f6);},Window_AutoBattleCancel[_0x320868(0x5bb)]['okButtonText']=function(){const _0x6c7642=_0x320868;return Imported[_0x6c7642(0x1c8)]?TextManager['getInputButtonString']('ok'):VisuMZ[_0x6c7642(0x5c8)][_0x6c7642(0x1d7)][_0x6c7642(0x252)][_0x6c7642(0x944)];},Window_AutoBattleCancel[_0x320868(0x5bb)][_0x320868(0x90d)]=function(){const _0x4d81be=_0x320868;return Imported[_0x4d81be(0x1c8)]?TextManager[_0x4d81be(0x2c9)](_0x4d81be(0x383)):VisuMZ[_0x4d81be(0x5c8)][_0x4d81be(0x1d7)]['AutoBattle']['AutoBattleCancel'];},Window_AutoBattleCancel[_0x320868(0x5bb)][_0x320868(0x77d)]=function(){const _0x19d780=_0x320868;Window_Base[_0x19d780(0x5bb)][_0x19d780(0x77d)]['call'](this),this[_0x19d780(0x4e7)](),this[_0x19d780(0x874)]();},Window_AutoBattleCancel[_0x320868(0x5bb)]['updateVisibility']=function(){const _0x595157=_0x320868;this[_0x595157(0x6b7)]=BattleManager[_0x595157(0x16d)];},Window_AutoBattleCancel[_0x320868(0x5bb)][_0x320868(0x874)]=function(){const _0x1bb45b=_0x320868;if(!BattleManager[_0x1bb45b(0x16d)])return;(Input[_0x1bb45b(0x8ae)]('ok')||Input[_0x1bb45b(0x8ae)](_0x1bb45b(0x383))||TouchInput['isClicked']()||TouchInput[_0x1bb45b(0x99b)]())&&(SoundManager['playCancel'](),BattleManager['_autoBattle']=![],Input[_0x1bb45b(0x927)](),TouchInput['clear']());};function Window_EnemyName(){const _0x52076c=_0x320868;this[_0x52076c(0x136)](...arguments);}Window_EnemyName[_0x320868(0x5bb)]=Object[_0x320868(0x86c)](Window_StatusBase[_0x320868(0x5bb)]),Window_EnemyName[_0x320868(0x5bb)][_0x320868(0xc58)]=Window_EnemyName,Window_EnemyName[_0x320868(0x5bb)][_0x320868(0x136)]=function(_0x36aa73){const _0x20d07f=_0x320868;this[_0x20d07f(0x9ac)]=_0x36aa73,this[_0x20d07f(0xbb6)]='';const _0x24d80f=new Rectangle(0x0,0x0,Graphics[_0x20d07f(0x23d)],this['lineHeight']()*0x4);Window_StatusBase[_0x20d07f(0x5bb)][_0x20d07f(0x136)][_0x20d07f(0x5a6)](this,_0x24d80f),this['setBackgroundType'](0x2),this['contentsOpacity']=0x0;},Window_EnemyName['prototype'][_0x320868(0x36a)]=function(){const _0x58c58e=_0x320868;this[_0x58c58e(0xa1c)]=0x0;},Window_EnemyName['prototype']['enemy']=function(){const _0x9017b0=_0x320868;return $gameTroop[_0x9017b0(0xb0d)]()[this['_enemyID']];},Window_EnemyName['prototype'][_0x320868(0x77d)]=function(){const _0x50d9ed=_0x320868;Window_StatusBase[_0x50d9ed(0x5bb)]['update']['call'](this),this[_0x50d9ed(0x568)]()&&this[_0x50d9ed(0x568)]()[_0x50d9ed(0x3e0)]()!==this[_0x50d9ed(0xbb6)]&&(this[_0x50d9ed(0xbb6)]=this[_0x50d9ed(0x568)]()[_0x50d9ed(0x3e0)](),this[_0x50d9ed(0xbc2)]()),this[_0x50d9ed(0x785)](),this[_0x50d9ed(0x752)]();},Window_EnemyName[_0x320868(0x5bb)][_0x320868(0x785)]=function(){const _0x2f3886=_0x320868;if(!this['enemy']()){if(this[_0x2f3886(0x1a9)]>0x0)this[_0x2f3886(0x1a9)]-=0x10;}else{if(this[_0x2f3886(0x568)]()[_0x2f3886(0x3e3)]()){if(this[_0x2f3886(0x1a9)]>0x0)this[_0x2f3886(0x1a9)]-=0x10;}else{if(SceneManager[_0x2f3886(0x64a)][_0x2f3886(0x62a)]&&SceneManager[_0x2f3886(0x64a)][_0x2f3886(0x62a)][_0x2f3886(0x55d)]&&SceneManager[_0x2f3886(0x64a)][_0x2f3886(0x62a)][_0x2f3886(0xa62)][_0x2f3886(0x6d2)](this['enemy']())){if(this[_0x2f3886(0x1a9)]<0xff)this['contentsOpacity']+=0x10;}else this[_0x2f3886(0x1a9)]>0x0&&(this[_0x2f3886(0x1a9)]-=0x10);}}},Window_EnemyName[_0x320868(0x5bb)]['updatePosition']=function(){const _0x68599=_0x320868;if(!this[_0x68599(0x568)]())return;SceneManager[_0x68599(0x19d)]()?this['x']=Graphics[_0x68599(0x23d)]-this[_0x68599(0x568)]()[_0x68599(0xb31)]()['_baseX']:this['x']=this[_0x68599(0x568)]()[_0x68599(0xb31)]()[_0x68599(0xb8e)];this['x']-=Math['round'](this['width']/0x2),this['y']=this[_0x68599(0x568)]()[_0x68599(0xb31)]()[_0x68599(0xba4)]-Math['round'](this[_0x68599(0xbfa)]()*1.5);const _0x49210c=VisuMZ[_0x68599(0x5c8)][_0x68599(0x1d7)][_0x68599(0x14d)];this['x']+=_0x49210c[_0x68599(0x3b1)]||0x0,this['y']+=_0x49210c[_0x68599(0x77c)]||0x0;},Window_EnemyName[_0x320868(0x5bb)][_0x320868(0x2f6)]=function(){const _0x3cde84=_0x320868;Window_Base[_0x3cde84(0x5bb)]['resetFontSettings'][_0x3cde84(0x5a6)](this),this[_0x3cde84(0x2e5)]['fontSize']=VisuMZ['BattleCore'][_0x3cde84(0x1d7)][_0x3cde84(0x14d)]['NameFontSize'];},Window_EnemyName[_0x320868(0x5bb)][_0x320868(0xbc2)]=function(){const _0x2ab797=_0x320868;Window_StatusBase['prototype'][_0x2ab797(0xbc2)][_0x2ab797(0x5a6)](this),this['contents'][_0x2ab797(0x927)]();if(!this[_0x2ab797(0x568)]())return;this[_0x2ab797(0xa24)]();},Window_EnemyName[_0x320868(0x5bb)][_0x320868(0xa24)]=function(){const _0x43d35b=_0x320868;this[_0x43d35b(0xbb6)]=this[_0x43d35b(0x568)]()[_0x43d35b(0x3e0)]();const _0x50d1ba=this[_0x43d35b(0x864)](this[_0x43d35b(0xbb6)])[_0x43d35b(0x529)],_0x80955d=Math[_0x43d35b(0xa8c)]((this[_0x43d35b(0x489)]-_0x50d1ba)/0x2);this[_0x43d35b(0x423)](this[_0x43d35b(0xbb6)],_0x80955d,0x0,_0x50d1ba+0x8);},Window_BattleLog['prototype'][_0x320868(0xad2)]=function(){const _0x2714b4=_0x320868;return VisuMZ[_0x2714b4(0x5c8)][_0x2714b4(0x1d7)][_0x2714b4(0xb56)][_0x2714b4(0x7aa)];},Window_BattleLog['prototype']['messageSpeed']=function(){const _0x28c184=_0x320868;return VisuMZ[_0x28c184(0x5c8)][_0x28c184(0x1d7)]['BattleLog']['MessageWait'];},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x1a0)]=function(){const _0x430c9d=_0x320868;return VisuMZ[_0x430c9d(0x5c8)][_0x430c9d(0x1d7)][_0x430c9d(0xb56)][_0x430c9d(0x40d)];},Window_BattleLog[_0x320868(0x5bb)]['isFastForward']=function(){return![];},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x4e2)]=function(_0x349366,_0x5432ae){const _0x2065c8=_0x320868;this[_0x2065c8(0x68e)](_0x2065c8(0xb79)),BattleManager[_0x2065c8(0x4f9)](_0x349366,_0x5432ae),this[_0x2065c8(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x24d)]=function(_0x17ad35,_0x1a6fb1,_0x1a373b){const _0x5f1fcf=_0x320868;this[_0x5f1fcf(0x68e)](_0x5f1fcf(0xb79)),BattleManager[_0x5f1fcf(0x5e0)](_0x17ad35,_0x1a6fb1,_0x1a373b),this[_0x5f1fcf(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xb79)]=function(){const _0x1d0365=_0x320868;this[_0x1d0365(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x205)]=function(_0x2c2ad5){const _0x17a3fe=_0x320868,_0x33277b=Array['prototype'][_0x17a3fe(0xab5)][_0x17a3fe(0x5a6)](arguments,0x1),_0x44a122={'name':_0x2c2ad5,'params':_0x33277b},_0x4ddced=this[_0x17a3fe(0xb8c)][_0x17a3fe(0x200)](_0xd8370b=>_0xd8370b[_0x17a3fe(0x3e0)])[_0x17a3fe(0x77f)]('actionSplicePoint');_0x4ddced>=0x0?this[_0x17a3fe(0xb8c)][_0x17a3fe(0x272)](_0x4ddced,0x0,_0x44a122):this[_0x17a3fe(0xb8c)][_0x17a3fe(0x205)](_0x44a122);},Window_BattleLog[_0x320868(0x5bb)]['unshift']=function(_0x283be){const _0xf1b56b=_0x320868,_0x4d0edc=Array['prototype'][_0xf1b56b(0xab5)][_0xf1b56b(0x5a6)](arguments,0x1);this['_methods'][_0xf1b56b(0x68e)]({'name':_0x283be,'params':_0x4d0edc});},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xc1c)]=function(){const _0x1ca13d=_0x320868;if(!$gameTemp[_0x1ca13d(0x219)]())return;console[_0x1ca13d(0x718)](this['_methods'][_0x1ca13d(0x200)](_0x34f244=>_0x34f244[_0x1ca13d(0x3e0)])[_0x1ca13d(0x7ef)]('\x0a'));},VisuMZ['BattleCore'][_0x320868(0x2b8)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xbc2)],Window_BattleLog[_0x320868(0x5bb)]['refresh']=function(){const _0x2dd61c=_0x320868;this[_0x2dd61c(0x77a)]=!![];},VisuMZ['BattleCore'][_0x320868(0x128)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x77d)],Window_BattleLog['prototype'][_0x320868(0x77d)]=function(){const _0x4316a4=_0x320868;VisuMZ['BattleCore'][_0x4316a4(0x128)][_0x4316a4(0x5a6)](this);if(this[_0x4316a4(0x77a)])this[_0x4316a4(0x453)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x453)]=function(){const _0x2a1c33=_0x320868;this[_0x2a1c33(0x77a)]=![],VisuMZ[_0x2a1c33(0x5c8)][_0x2a1c33(0x2b8)][_0x2a1c33(0x5a6)](this);},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xaa1)]=function(_0x5e455a){const _0xaa1cec=_0x320868;let _0x40a28f=VisuMZ[_0xaa1cec(0x5c8)][_0xaa1cec(0x1d7)][_0xaa1cec(0xb56)][_0xaa1cec(0x2fa)]['toLowerCase']()['trim'](),_0x515f71=this['_lines'][_0x5e455a];if(_0x515f71[_0xaa1cec(0x2e0)](/<LEFT>/i))_0x40a28f=_0xaa1cec(0x60b);else{if(_0x515f71[_0xaa1cec(0x2e0)](/<CENTER>/i))_0x40a28f='center';else _0x515f71['match'](/<RIGHT>/i)&&(_0x40a28f=_0xaa1cec(0x59d));}_0x515f71=_0x515f71[_0xaa1cec(0x550)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x515f71=_0x515f71[_0xaa1cec(0x550)](/\\I\[0\]/gi,'');const _0x3bcdbe=this[_0xaa1cec(0x576)](_0x5e455a);this[_0xaa1cec(0x2e5)]['clearRect'](_0x3bcdbe['x'],_0x3bcdbe['y'],_0x3bcdbe['width'],_0x3bcdbe[_0xaa1cec(0x351)]);const _0x1c8016=this['textSizeEx'](_0x515f71)[_0xaa1cec(0x529)];let _0x21ea75=_0x3bcdbe['x'];if(_0x40a28f===_0xaa1cec(0xb10))_0x21ea75+=(_0x3bcdbe['width']-_0x1c8016)/0x2;else _0x40a28f===_0xaa1cec(0x59d)&&(_0x21ea75+=_0x3bcdbe['width']-_0x1c8016);this['drawTextEx'](_0x515f71,_0x21ea75,_0x3bcdbe['y'],_0x1c8016+0x8);},Window_BattleLog['prototype']['addText']=function(_0x4cdf83){const _0x23bed9=_0x320868;this[_0x23bed9(0x585)][_0x23bed9(0x205)](_0x4cdf83),this[_0x23bed9(0xbc2)](),this[_0x23bed9(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xada)]=function(){const _0x53d85a=_0x320868;let _0x232bee=![];switch(this[_0x53d85a(0x8b3)]){case _0x53d85a(0x772):_0x232bee=this[_0x53d85a(0xa26)][_0x53d85a(0x2f9)]();break;case'movement':_0x232bee=this[_0x53d85a(0xa26)][_0x53d85a(0x7a0)]();break;case'animation':_0x232bee=this[_0x53d85a(0xa26)][_0x53d85a(0x5df)]();break;case'float':_0x232bee=this['_spriteset']['isAnyoneFloating']();break;case'jump':_0x232bee=this[_0x53d85a(0xa26)][_0x53d85a(0x386)]();break;case _0x53d85a(0x385):_0x232bee=this[_0x53d85a(0xa26)][_0x53d85a(0x52a)]();break;}return!_0x232bee&&(this['_waitMode']=''),_0x232bee;},Window_BattleLog['prototype'][_0x320868(0x609)]=function(){const _0x4fe482=_0x320868;this[_0x4fe482(0xa31)](_0x4fe482(0x9a2));},Window_BattleLog['prototype']['waitForFloat']=function(){const _0x2861f2=_0x320868;this[_0x2861f2(0xa31)](_0x2861f2(0x162));},Window_BattleLog['prototype']['waitForJump']=function(){const _0x4eb927=_0x320868;this[_0x4eb927(0xa31)](_0x4eb927(0x2be));},Window_BattleLog['prototype'][_0x320868(0x38a)]=function(){const _0x699598=_0x320868;this[_0x699598(0xa31)](_0x699598(0x385));},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x88c)]=function(){const _0x352dd7=_0x320868,_0x458372=VisuMZ[_0x352dd7(0x5c8)]['Settings'][_0x352dd7(0xb56)];if(!_0x458372[_0x352dd7(0x296)])return;this[_0x352dd7(0x205)](_0x352dd7(0x81f),_0x458372[_0x352dd7(0x544)][_0x352dd7(0x8b0)]($gameTroop[_0x352dd7(0x21d)]())),this[_0x352dd7(0x205)](_0x352dd7(0x5de),_0x458372[_0x352dd7(0x400)]),this[_0x352dd7(0x205)](_0x352dd7(0x927));};var $subject,$action,$targets;Window_BattleLog['prototype'][_0x320868(0x6d7)]=function(_0x11c781,_0x530c29,_0x3690de){const _0x1e9144=_0x320868;$subject=_0x11c781,$action=_0x530c29,$targets=_0x3690de,this['isCustomActionSequence'](_0x530c29)?BattleManager[_0x1e9144(0xc19)]():this['usePremadeActionSequence'](_0x11c781,_0x530c29,_0x3690de);},Window_BattleLog[_0x320868(0x5bb)]['isCustomActionSequence']=function(_0x58e135){const _0x20358b=_0x320868;if(!SceneManager[_0x20358b(0x96d)]())return![];if(!_0x58e135)return![];if(!_0x58e135[_0x20358b(0xc47)]())return![];if(_0x58e135[_0x20358b(0xc47)]()[_0x20358b(0x418)][_0x20358b(0x2e0)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x20358b(0x87f)](_0x58e135[_0x20358b(0xc47)]()))return!![];return![];},Window_BattleLog['prototype']['usePremadeActionSequence']=function(_0x1d63ef,_0x269fdd,_0x3d9f52){const _0x4ab8e5=_0x320868;this[_0x4ab8e5(0xc0d)](_0x1d63ef,_0x269fdd,_0x3d9f52),this[_0x4ab8e5(0x1f5)](_0x1d63ef,_0x269fdd,_0x3d9f52),this[_0x4ab8e5(0x8da)](_0x1d63ef,_0x269fdd,_0x3d9f52);},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x459)]=function(_0x3fd0da,_0x2285d5){const _0x42ba5c=_0x320868,_0x13598a=VisuMZ[_0x42ba5c(0x5c8)]['Settings'][_0x42ba5c(0xb56)];_0x13598a[_0x42ba5c(0x305)]&&this[_0x42ba5c(0x205)](_0x42ba5c(0x81f),_0x42ba5c(0xa55)[_0x42ba5c(0x8b0)](DataManager['battleDisplayText'](_0x2285d5)));if(DataManager[_0x42ba5c(0x7cf)](_0x2285d5)){if(_0x13598a[_0x42ba5c(0x5f4)])this[_0x42ba5c(0x3a4)](_0x2285d5['message1'],_0x3fd0da,_0x2285d5);if(_0x13598a[_0x42ba5c(0x8a5)])this[_0x42ba5c(0x3a4)](_0x2285d5[_0x42ba5c(0xa0f)],_0x3fd0da,_0x2285d5);}else{if(_0x13598a[_0x42ba5c(0x819)])this[_0x42ba5c(0x3a4)](TextManager[_0x42ba5c(0x292)],_0x3fd0da,_0x2285d5);}},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xc0d)]=function(_0x5688ec,_0x7a9b2f,_0x429a5c){const _0x22c7b9=_0x320868,_0x1b6842=_0x7a9b2f[_0x22c7b9(0xc47)]();this[_0x22c7b9(0x459)](_0x5688ec,_0x1b6842),this[_0x22c7b9(0x205)]('applyImmortal',_0x5688ec,_0x429a5c,!![]),this['push'](_0x22c7b9(0xb03),_0x5688ec,_0x7a9b2f),this[_0x22c7b9(0x205)]('waitForMovement'),this[_0x22c7b9(0x205)](_0x22c7b9(0x5c9),_0x5688ec,_0x7a9b2f),this[_0x22c7b9(0x205)](_0x22c7b9(0x609));},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x1f5)]=function(_0x4db603,_0x278f07,_0x2590d4){const _0x34d3bd=_0x320868;if(this[_0x34d3bd(0x274)](_0x278f07))this[_0x34d3bd(0x75f)](_0x4db603,_0x278f07,_0x2590d4);else{if(this['isMeleeMultiTargetAction'](_0x278f07))this[_0x34d3bd(0xa16)](_0x4db603,_0x278f07,_0x2590d4);else _0x278f07['isForRandom']()?this[_0x34d3bd(0xc23)](_0x4db603,_0x278f07,_0x2590d4):this['wholeActionSet'](_0x4db603,_0x278f07,_0x2590d4);}},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x7a5)]=function(_0x878799,_0x1b4559,_0x238478,_0x48972d){const _0x21f8cf=_0x320868;if(_0x1b4559){const _0x3bb894=_0x878799[_0x21f8cf(0xb31)]();this[_0x21f8cf(0x205)](_0x21f8cf(0x2c0),[_0x878799],_0x238478,_0x48972d),this['push']('performMoveToPoint',_0x878799,_0x3bb894['_homeX'],_0x3bb894['_homeY'],_0x48972d,![],_0x21f8cf(0x4ff)),this[_0x21f8cf(0x205)]('requestMotion',[_0x878799],_0x21f8cf(0xa49)),this[_0x21f8cf(0x205)](_0x21f8cf(0x3a5)),this[_0x21f8cf(0x205)](_0x21f8cf(0x235),[_0x878799],_0x21f8cf(0xa13));}},Window_BattleLog['prototype'][_0x320868(0x274)]=function(_0x1f910e){const _0x198525=_0x320868;if(!_0x1f910e[_0x198525(0xa0a)]())return![];if(!_0x1f910e[_0x198525(0xacf)]())return![];if(!_0x1f910e[_0x198525(0x61b)]())return![];return VisuMZ[_0x198525(0x5c8)][_0x198525(0x1d7)][_0x198525(0x32c)][_0x198525(0xb7d)];},Window_BattleLog[_0x320868(0x5bb)]['autoMeleeSingleTargetActionSet']=function(_0x283f5b,_0x13471c,_0x9144cf){const _0x569d1e=_0x320868,_0x290a57=_0x283f5b['getAttackMotion']()[_0x569d1e(0x97c)]<0x2,_0x1db1eb=0x14,_0x200773=0x30;let _0x5d00fe=!![];_0x9144cf[_0x569d1e(0x4c1)]>0x0&&_0x283f5b[_0x569d1e(0x94e)]()===_0x9144cf[0x0]['isActor']()&&(_0x5d00fe=![]);_0x290a57&&_0x5d00fe&&(this['push'](_0x569d1e(0x2c0),[_0x283f5b],_0x200773,_0x1db1eb),this[_0x569d1e(0x205)](_0x569d1e(0x65c),_0x283f5b,_0x9144cf,'front\x20base',_0x1db1eb,!![],_0x569d1e(0x4ff),!![]),this['push']('requestMotion',[_0x283f5b],_0x569d1e(0xa13)),this['push'](_0x569d1e(0x3a5)));let _0x4838a=_0x13471c[_0x569d1e(0x2d9)]()?this[_0x569d1e(0x1b3)](_0x283f5b):0x1;for(let _0x575199=0x0;_0x575199<_0x4838a;_0x575199++){_0x13471c[_0x569d1e(0x2d9)]()&&_0x283f5b[_0x569d1e(0x94e)]()&&this[_0x569d1e(0x205)](_0x569d1e(0xac4),_0x283f5b,_0x575199),_0x13471c[_0x569d1e(0xc47)]()[_0x569d1e(0xb9b)]<0x0?this[_0x569d1e(0xc23)](_0x283f5b,_0x13471c,_0x9144cf):this['wholeActionSet'](_0x283f5b,_0x13471c,_0x9144cf);}_0x13471c[_0x569d1e(0x2d9)]()&&_0x283f5b[_0x569d1e(0x94e)]()&&this[_0x569d1e(0x205)](_0x569d1e(0x709),_0x283f5b),this[_0x569d1e(0x205)]('applyImmortal',_0x283f5b,_0x9144cf,![]),this[_0x569d1e(0x7a5)](_0x283f5b,_0x290a57,_0x200773,_0x1db1eb);},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x97e)]=function(_0x2b37ad){const _0x5b4ed4=_0x320868;if(!_0x2b37ad[_0x5b4ed4(0xa0a)]())return![];if(!_0x2b37ad['isForAll']())return![];if(!_0x2b37ad['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x5b4ed4(0x1d7)][_0x5b4ed4(0x32c)][_0x5b4ed4(0xc02)];},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xa16)]=function(_0x17c941,_0x323659,_0x191539){const _0x31075b=_0x320868,_0xf38f04=_0x17c941['getAttackMotion']()[_0x31075b(0x97c)]<0x2,_0x105e12=0x14,_0x429fdd=0x30;if(_0xf38f04){this['push'](_0x31075b(0x2c0),[_0x17c941],_0x429fdd,_0x105e12);const _0xb323d8=_0x191539[_0x31075b(0x4c1)]>0x1?_0x31075b(0x2b9):_0x31075b(0x756);this[_0x31075b(0x205)](_0x31075b(0x65c),_0x17c941,_0x191539,_0xb323d8,_0x105e12,!![],_0x31075b(0x4ff),!![]),this[_0x31075b(0x205)](_0x31075b(0x235),[_0x17c941],_0x31075b(0xa13)),this['push'](_0x31075b(0x3a5));}let _0x24712e=_0x323659['isAttack']()?this[_0x31075b(0x1b3)](_0x17c941):0x1;for(let _0x2f029e=0x0;_0x2f029e<_0x24712e;_0x2f029e++){_0x323659[_0x31075b(0x2d9)]()&&_0x17c941[_0x31075b(0x94e)]()&&this[_0x31075b(0x205)](_0x31075b(0xac4),_0x17c941,_0x2f029e),this[_0x31075b(0x3ca)](_0x17c941,_0x323659,_0x191539);}_0x323659['isAttack']()&&_0x17c941[_0x31075b(0x94e)]()&&this[_0x31075b(0x205)](_0x31075b(0x709),_0x17c941),this[_0x31075b(0x205)](_0x31075b(0x1a1),_0x17c941,_0x191539,![]),this[_0x31075b(0x7a5)](_0x17c941,_0xf38f04,_0x429fdd,_0x105e12);},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xc23)]=function(_0x377b3d,_0x338c9b,_0x590cae){const _0x5f42e2=_0x320868,_0x3e4a87=_0x338c9b[_0x5f42e2(0xc47)]();for(const _0x41ebda of _0x590cae){if(!_0x41ebda)continue;this['push'](_0x5f42e2(0x63c),_0x377b3d,_0x338c9b),this['push'](_0x5f42e2(0x5de),Sprite_Battler['_motionSpeed']),this[_0x5f42e2(0x205)](_0x5f42e2(0xa04),_0x377b3d,[_0x41ebda],_0x3e4a87[_0x5f42e2(0xb9b)]),this[_0x5f42e2(0x205)]('waitCount',0x18),this[_0x5f42e2(0x205)]('actionEffect',_0x377b3d,_0x41ebda);}},Window_BattleLog[_0x320868(0x5bb)]['wholeActionSet']=function(_0x40cd92,_0x30a7b3,_0xc8a352){const _0x2416ba=_0x320868,_0x3bd3e4=_0x30a7b3[_0x2416ba(0xc47)]();let _0x1a6ed7=_0x30a7b3[_0x2416ba(0x2d9)]()?0x1+_0x40cd92['attackTimesAdd']():0x1;while(_0x1a6ed7--){this[_0x2416ba(0x205)](_0x2416ba(0x63c),_0x40cd92,_0x30a7b3),this['push'](_0x2416ba(0x5de),Sprite_Battler[_0x2416ba(0x402)]),this[_0x2416ba(0x205)](_0x2416ba(0xa04),_0x40cd92,_0xc8a352['clone'](),_0x3bd3e4['animationId']),this['push'](_0x2416ba(0x609));}for(const _0x53e51f of _0xc8a352){if(!_0x53e51f)continue;this['push'](_0x2416ba(0x4e2),_0x40cd92,_0x53e51f);}},Window_BattleLog[_0x320868(0x5bb)]['finishActionSet']=function(_0x114db,_0x12add8,_0x1731e5){const _0x1662d6=_0x320868,_0x5cf5a2=_0x12add8[_0x1662d6(0xc47)]();this[_0x1662d6(0x205)](_0x1662d6(0x1a1),_0x114db,_0x1731e5,![]),this[_0x1662d6(0x205)](_0x1662d6(0xc52)),this[_0x1662d6(0x205)](_0x1662d6(0xbc5)),this['push']('clear'),this['push'](_0x1662d6(0x224),_0x114db),this[_0x1662d6(0x205)]('waitForMovement');},Window_BattleLog[_0x320868(0x5bb)]['endAction']=function(_0x2220ec){$subject=null,$action=null,$targets=[];},VisuMZ[_0x320868(0x5c8)][_0x320868(0x713)]=Window_BattleLog['prototype']['displayCurrentState'],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x905)]=function(_0x2fb30a){const _0x1ce995=_0x320868;if(!VisuMZ['BattleCore'][_0x1ce995(0x1d7)][_0x1ce995(0xb56)][_0x1ce995(0x259)])return;VisuMZ[_0x1ce995(0x5c8)][_0x1ce995(0x713)][_0x1ce995(0x5a6)](this,_0x2fb30a);},Window_BattleLog['prototype']['displayCounter']=function(_0x69a434){const _0x34aad4=_0x320868;this['push'](_0x34aad4(0x903),_0x69a434);VisuMZ[_0x34aad4(0x5c8)][_0x34aad4(0x1d7)][_0x34aad4(0x32c)][_0x34aad4(0xbd4)]&&this[_0x34aad4(0x205)](_0x34aad4(0xa04),_0x69a434,[BattleManager['_subject']],-0x1);if(!VisuMZ[_0x34aad4(0x5c8)]['Settings'][_0x34aad4(0xb56)][_0x34aad4(0x227)])return;this['push'](_0x34aad4(0x81f),TextManager['counterAttack']['format'](_0x69a434[_0x34aad4(0x3e0)]()));const _0x5d444d=VisuMZ[_0x34aad4(0x5c8)][_0x34aad4(0x1d7)][_0x34aad4(0xb56)]['ShowCounterWait']??0x0;if(_0x5d444d>0x0)this[_0x34aad4(0x205)](_0x34aad4(0x5de),_0x5d444d);;},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xa1b)]=function(_0x4d1dd2){const _0xf38b4c=_0x320868;this[_0xf38b4c(0x205)](_0xf38b4c(0x203),_0x4d1dd2);if(!VisuMZ[_0xf38b4c(0x5c8)][_0xf38b4c(0x1d7)][_0xf38b4c(0xb56)][_0xf38b4c(0x51c)])return;this[_0xf38b4c(0x205)](_0xf38b4c(0x81f),TextManager[_0xf38b4c(0xa57)][_0xf38b4c(0x8b0)](_0x4d1dd2[_0xf38b4c(0x3e0)]()));const _0x57030e=VisuMZ[_0xf38b4c(0x5c8)][_0xf38b4c(0x1d7)]['BattleLog'][_0xf38b4c(0x425)]??0x0;if(_0x57030e>0x0)this[_0xf38b4c(0x205)](_0xf38b4c(0x5de),_0x57030e);;},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x26b)]=function(_0x5d08da,_0x1bcf90){const _0x51213c=_0x320868;if(VisuMZ[_0x51213c(0x5c8)][_0x51213c(0x1d7)][_0x51213c(0x32c)][_0x51213c(0x222)]){const _0x5f16b9=_0x1bcf90[_0x51213c(0xc47)]();this[_0x51213c(0x205)]('showAnimation',_0x5d08da,[_0x5d08da],_0x5f16b9[_0x51213c(0xb9b)]);}},Window_BattleLog[_0x320868(0x5bb)]['displaySubstitute']=function(_0x1a2ac9,_0x73effa){const _0x296f47=_0x320868;this[_0x296f47(0x205)](_0x296f47(0x583),_0x1a2ac9,_0x73effa);if(!VisuMZ['BattleCore'][_0x296f47(0x1d7)][_0x296f47(0xb56)][_0x296f47(0x1d6)])return;const _0x19fb2d=_0x1a2ac9['name'](),_0x3a94b0=TextManager[_0x296f47(0x865)][_0x296f47(0x8b0)](_0x19fb2d,_0x73effa[_0x296f47(0x3e0)]());this[_0x296f47(0x205)](_0x296f47(0x81f),_0x3a94b0);const _0x384f63=VisuMZ['BattleCore'][_0x296f47(0x1d7)]['BattleLog'][_0x296f47(0x744)]??0x0;if(_0x384f63>0x0)this[_0x296f47(0x205)](_0x296f47(0x5de),_0x384f63);;},VisuMZ['BattleCore']['Window_BattleLog_displayActionResults']=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x64d)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x64d)]=function(_0x116f9e,_0x2a20b0){const _0x11b5e4=_0x320868;VisuMZ[_0x11b5e4(0x5c8)][_0x11b5e4(0x611)]['call'](this,_0x116f9e,_0x2a20b0);},VisuMZ[_0x320868(0x5c8)][_0x320868(0x4b5)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x65f)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x65f)]=function(_0x441f27){const _0x1da127=_0x320868;if(!VisuMZ['BattleCore'][_0x1da127(0x1d7)][_0x1da127(0xb56)][_0x1da127(0x4d7)])return;VisuMZ['BattleCore'][_0x1da127(0x4b5)][_0x1da127(0x5a6)](this,_0x441f27);},VisuMZ['BattleCore'][_0x320868(0xc5c)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x39c)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x39c)]=function(_0x26839e){const _0x49f65d=_0x320868;if(!VisuMZ[_0x49f65d(0x5c8)][_0x49f65d(0x1d7)][_0x49f65d(0xb56)][_0x49f65d(0x79b)])return;VisuMZ[_0x49f65d(0x5c8)][_0x49f65d(0xc5c)]['call'](this,_0x26839e);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xc55)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x467)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x467)]=function(_0x3d26aa){const _0x1a50f3=_0x320868;!VisuMZ[_0x1a50f3(0x5c8)][_0x1a50f3(0x1d7)][_0x1a50f3(0xb56)][_0x1a50f3(0xa61)]?this[_0x1a50f3(0x205)]('performMiss',_0x3d26aa):VisuMZ[_0x1a50f3(0x5c8)][_0x1a50f3(0xc55)][_0x1a50f3(0x5a6)](this,_0x3d26aa);},VisuMZ['BattleCore'][_0x320868(0x9ae)]=Window_BattleLog['prototype'][_0x320868(0x60d)],Window_BattleLog['prototype'][_0x320868(0x60d)]=function(_0x352481){const _0x44bd06=_0x320868;!VisuMZ[_0x44bd06(0x5c8)][_0x44bd06(0x1d7)]['BattleLog'][_0x44bd06(0xa61)]?_0x352481[_0x44bd06(0x7c7)]()['physical']?this[_0x44bd06(0x205)](_0x44bd06(0x46d),_0x352481):this[_0x44bd06(0x205)]('performMagicEvasion',_0x352481):VisuMZ['BattleCore'][_0x44bd06(0x9ae)]['call'](this,_0x352481);},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x894)]=function(_0x8b3592){const _0x496936=_0x320868;_0x8b3592[_0x496936(0x7c7)]()['hpAffected']&&(_0x8b3592[_0x496936(0x6e7)]=0x0,_0x8b3592[_0x496936(0x7c7)]()['hpDamage']>0x0&&!_0x8b3592[_0x496936(0x7c7)]()[_0x496936(0x3e6)]&&(_0x8b3592[_0x496936(0x6e7)]=_0x8b3592['result']()[_0x496936(0x7de)],this['push'](_0x496936(0x37d),_0x8b3592)),_0x8b3592[_0x496936(0x7c7)]()['hpDamage']<0x0&&this['push'](_0x496936(0x921),_0x8b3592),VisuMZ[_0x496936(0x5c8)][_0x496936(0x1d7)][_0x496936(0xb56)][_0x496936(0x5d4)]&&this[_0x496936(0x205)](_0x496936(0x81f),this[_0x496936(0x27c)](_0x8b3592)));},VisuMZ['BattleCore'][_0x320868(0xb50)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xb1d)],Window_BattleLog[_0x320868(0x5bb)]['displayMpDamage']=function(_0x5a8eed){const _0x514c94=_0x320868;if(!VisuMZ[_0x514c94(0x5c8)][_0x514c94(0x1d7)]['BattleLog'][_0x514c94(0x694)])return;VisuMZ[_0x514c94(0x5c8)][_0x514c94(0xb50)][_0x514c94(0x5a6)](this,_0x5a8eed);},VisuMZ['BattleCore'][_0x320868(0x4f6)]=Window_BattleLog[_0x320868(0x5bb)]['displayTpDamage'],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x82a)]=function(_0x4d2ca2){const _0x346b79=_0x320868;if(!VisuMZ[_0x346b79(0x5c8)]['Settings'][_0x346b79(0xb56)][_0x346b79(0x206)])return;VisuMZ[_0x346b79(0x5c8)][_0x346b79(0x4f6)][_0x346b79(0x5a6)](this,_0x4d2ca2);},Window_BattleLog[_0x320868(0x5bb)]['displayAffectedStatus']=function(_0x409ec1){const _0x35ee2d=_0x320868;_0x409ec1['result']()['isStatusAffected']()&&(this[_0x35ee2d(0x205)](_0x35ee2d(0x62c)),this[_0x35ee2d(0xb80)](_0x409ec1),this[_0x35ee2d(0x973)](_0x409ec1),this[_0x35ee2d(0x205)](_0x35ee2d(0xc52)));},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xa9b)]=function(_0x991e34){const _0x4430c8=_0x320868,_0x3ddfee=_0x991e34['result'](),_0x3340bf=_0x3ddfee[_0x4430c8(0x8a7)]();for(const _0x1e3bdb of _0x3340bf){const _0x532804=_0x991e34[_0x4430c8(0x94e)]()?_0x1e3bdb['message1']:_0x1e3bdb[_0x4430c8(0xa0f)];_0x532804&&VisuMZ[_0x4430c8(0x5c8)][_0x4430c8(0x1d7)]['BattleLog'][_0x4430c8(0xb6b)]&&(this[_0x4430c8(0x205)]('popBaseLine'),this['push']('pushBaseLine'),this['push']('addText',_0x532804[_0x4430c8(0x8b0)](_0x991e34[_0x4430c8(0x3e0)]())),this[_0x4430c8(0x205)]('wait')),_0x1e3bdb['id']===_0x991e34[_0x4430c8(0x220)]()&&this[_0x4430c8(0x205)]('performCollapse',_0x991e34);}},Window_BattleLog['prototype']['displayRemovedStates']=function(_0x1d8885){const _0x47c280=_0x320868;if(!VisuMZ[_0x47c280(0x5c8)][_0x47c280(0x1d7)]['BattleLog'][_0x47c280(0x922)])return;const _0x398235=_0x1d8885['result'](),_0x2e0255=_0x398235[_0x47c280(0xb5f)]();for(const _0x559ca6 of _0x2e0255){_0x559ca6[_0x47c280(0x228)]&&(this[_0x47c280(0x205)](_0x47c280(0x5b0)),this[_0x47c280(0x205)](_0x47c280(0x62c)),this[_0x47c280(0x205)]('addText',_0x559ca6[_0x47c280(0x228)]['format'](_0x1d8885[_0x47c280(0x3e0)]())),this['push'](_0x47c280(0x419)));}},Window_BattleLog['prototype'][_0x320868(0x973)]=function(_0x34312d){const _0x3c068b=_0x320868,_0x10e005=VisuMZ[_0x3c068b(0x5c8)][_0x3c068b(0x1d7)][_0x3c068b(0xb56)],_0x49a70e=_0x34312d['result']();if(_0x10e005[_0x3c068b(0xb58)])this[_0x3c068b(0x9ed)](_0x34312d,_0x49a70e[_0x3c068b(0x19e)],TextManager['buffAdd']);if(_0x10e005[_0x3c068b(0x7bd)])this['displayBuffs'](_0x34312d,_0x49a70e['addedDebuffs'],TextManager[_0x3c068b(0x68a)]);if(_0x10e005[_0x3c068b(0x920)])this[_0x3c068b(0x9ed)](_0x34312d,_0x49a70e['removedBuffs'],TextManager['buffRemove']);},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x9ed)]=function(_0x1cf278,_0x4e7060,_0x4f6dd6){const _0x80724c=_0x320868;for(const _0x3a19a7 of _0x4e7060){const _0xa1d94a=_0x4f6dd6[_0x80724c(0x8b0)](_0x1cf278['name'](),TextManager['param'](_0x3a19a7));this[_0x80724c(0x205)]('popBaseLine'),this[_0x80724c(0x205)]('pushBaseLine'),this['push']('addText',_0xa1d94a),this[_0x80724c(0x205)]('wait');}},VisuMZ[_0x320868(0x5c8)][_0x320868(0xb49)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x927)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x927)]=function(){const _0x295ccd=_0x320868;VisuMZ['BattleCore'][_0x295ccd(0xb49)]['call'](this),this[_0x295ccd(0x7af)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0xb5b)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x62c)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x62c)]=function(){const _0x391a79=_0x320868;VisuMZ[_0x391a79(0x5c8)]['Window_BattleLog_pushBaseLine'][_0x391a79(0x5a6)](this),this[_0x391a79(0x7af)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x403)]=Window_BattleLog['prototype'][_0x320868(0x5b0)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x5b0)]=function(){const _0x5b851b=_0x320868;VisuMZ[_0x5b851b(0x5c8)]['Window_BattleLog_popBaseLine'][_0x5b851b(0x5a6)](this),this['processRefresh'](),this[_0x5b851b(0x7af)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x337)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xa86)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xa86)]=function(_0x24846f){const _0x1c71c5=_0x320868;VisuMZ[_0x1c71c5(0x5c8)][_0x1c71c5(0x337)][_0x1c71c5(0x5a6)](this,_0x24846f),this[_0x1c71c5(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xc52)]=function(){const _0x34b3eb=_0x320868;let _0x22ea4c=0x0;this[_0x34b3eb(0x89d)][_0x34b3eb(0x4c1)]>0x0&&(_0x22ea4c=this[_0x34b3eb(0x89d)][this[_0x34b3eb(0x89d)][_0x34b3eb(0x4c1)]-0x1]),this[_0x34b3eb(0x585)][_0x34b3eb(0x4c1)]>_0x22ea4c?this['wait']():this['callNextMethod']();},VisuMZ['BattleCore'][_0x320868(0x4ee)]=Window_BattleLog['prototype'][_0x320868(0xb03)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0xb03)]=function(_0xb1aa85,_0x3f1f62){const _0x252dc2=_0x320868;VisuMZ[_0x252dc2(0x5c8)]['Window_BattleLog_performActionStart']['call'](this,_0xb1aa85,_0x3f1f62),this[_0x252dc2(0x7af)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x983)]=Window_BattleLog[_0x320868(0x5bb)]['performAction'],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x63c)]=function(_0x3b625a,_0x24034a){const _0x519e96=_0x320868;VisuMZ[_0x519e96(0x5c8)][_0x519e96(0x983)][_0x519e96(0x5a6)](this,_0x3b625a,_0x24034a),this[_0x519e96(0x7af)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x8b4)]=Window_BattleLog[_0x320868(0x5bb)]['performActionEnd'],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x224)]=function(_0x53ff63){const _0x15dd92=_0x320868;VisuMZ[_0x15dd92(0x5c8)][_0x15dd92(0x8b4)][_0x15dd92(0x5a6)](this,_0x53ff63);for(const _0x393534 of BattleManager[_0x15dd92(0x46e)]()){if(!_0x393534)continue;if(_0x393534[_0x15dd92(0x3e3)]())continue;_0x393534['performActionEndMembers']();}this[_0x15dd92(0x7af)]();},VisuMZ[_0x320868(0x5c8)]['Window_BattleLog_performDamage']=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x37d)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x37d)]=function(_0x373e1d){const _0x948269=_0x320868;VisuMZ[_0x948269(0x5c8)][_0x948269(0x424)][_0x948269(0x5a6)](this,_0x373e1d),this['callNextMethod']();},VisuMZ['BattleCore'][_0x320868(0xaca)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x588)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x588)]=function(_0x50d838){const _0x467832=_0x320868;VisuMZ[_0x467832(0x5c8)]['Window_BattleLog_performMiss']['call'](this,_0x50d838),this[_0x467832(0x7af)]();},VisuMZ[_0x320868(0x5c8)]['Window_BattleLog_performRecovery']=Window_BattleLog['prototype']['performRecovery'],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x921)]=function(_0xa798c1){const _0x28a9eb=_0x320868;VisuMZ[_0x28a9eb(0x5c8)][_0x28a9eb(0x230)][_0x28a9eb(0x5a6)](this,_0xa798c1),this['callNextMethod']();},VisuMZ['BattleCore'][_0x320868(0x75b)]=Window_BattleLog[_0x320868(0x5bb)]['performEvasion'],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x46d)]=function(_0x5cc7af){const _0x3d8fc5=_0x320868;VisuMZ[_0x3d8fc5(0x5c8)]['Window_BattleLog_performEvasion']['call'](this,_0x5cc7af),this['callNextMethod']();},VisuMZ['BattleCore'][_0x320868(0xb69)]=Window_BattleLog['prototype'][_0x320868(0x834)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x834)]=function(_0x17da81){const _0x300fb1=_0x320868;VisuMZ[_0x300fb1(0x5c8)][_0x300fb1(0xb69)][_0x300fb1(0x5a6)](this,_0x17da81),this[_0x300fb1(0x7af)]();},VisuMZ['BattleCore'][_0x320868(0x290)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x903)],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x903)]=function(_0x3c2bda){const _0x48cbe9=_0x320868;VisuMZ['BattleCore']['Window_BattleLog_performCounter'][_0x48cbe9(0x5a6)](this,_0x3c2bda),this[_0x48cbe9(0x7af)]();},VisuMZ[_0x320868(0x5c8)][_0x320868(0x664)]=Window_BattleLog['prototype']['performReflection'],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x203)]=function(_0x3a0a4b){const _0x3a5e88=_0x320868;VisuMZ['BattleCore'][_0x3a5e88(0x664)][_0x3a5e88(0x5a6)](this,_0x3a0a4b),this[_0x3a5e88(0x7af)]();},VisuMZ['BattleCore'][_0x320868(0x1a2)]=Window_BattleLog[_0x320868(0x5bb)]['performSubstitute'],Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x583)]=function(_0x33d95e,_0x182c5e){const _0x130f9b=_0x320868;VisuMZ[_0x130f9b(0x5c8)][_0x130f9b(0x1a2)][_0x130f9b(0x5a6)](this,_0x33d95e,_0x182c5e),this[_0x130f9b(0x7af)]();},VisuMZ['BattleCore'][_0x320868(0x620)]=Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x6f9)],Window_BattleLog['prototype']['performCollapse']=function(_0x1c296f){const _0x1b267b=_0x320868;VisuMZ[_0x1b267b(0x5c8)][_0x1b267b(0x620)][_0x1b267b(0x5a6)](this,_0x1c296f),this['callNextMethod']();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x5c9)]=function(_0x3978bd,_0x214ee9){const _0x428c66=_0x320868;_0x3978bd[_0x428c66(0x5c9)](_0x214ee9),this[_0x428c66(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x58b)]=function(_0x46dc3a,_0x18dde7){const _0x1d2d02=_0x320868,_0x1632ea=_0x46dc3a[_0x1d2d02(0xa52)]();_0x1632ea<=0x0?SoundManager[_0x1d2d02(0x261)]():this[_0x1d2d02(0x862)](_0x18dde7,_0x1632ea);},Window_BattleLog['prototype']['applyImmortal']=function(_0x1858fb,_0x504b5a,_0x1c32ce){const _0xc29751=_0x320868,_0x5c1581=[_0x1858fb]['concat'](_0x504b5a);for(const _0x3e7678 of _0x5c1581){if(!_0x3e7678)continue;_0x3e7678[_0xc29751(0x511)](_0x1c32ce);}this[_0xc29751(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)]['waitCount']=function(_0x208769){this['_waitCount']=_0x208769;},Window_BattleLog[_0x320868(0x5bb)]['requestMotion']=function(_0x263bce,_0x42e211){const _0x6992d4=_0x320868;for(const _0x30165e of _0x263bce){if(!_0x30165e)continue;_0x30165e[_0x6992d4(0x235)](_0x42e211);}this['callNextMethod']();},Window_BattleLog['prototype'][_0x320868(0x681)]=function(_0x536971,_0x476e34,_0x726be9,_0x5637d7,_0x584b66,_0x5e5bf0){const _0x5d8e2e=_0x320868;_0x536971[_0x5d8e2e(0x7c4)](_0x476e34,_0x726be9,_0x5637d7,_0x584b66,_0x5e5bf0,-0x1),this[_0x5d8e2e(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x65c)]=function(_0x1f118c,_0x1526ea,_0x1ba26d,_0x310e9b,_0x2dc8d1,_0x4ca947,_0x42d483){const _0x58b0d1=_0x320868,_0xf7fc2e=Math[_0x58b0d1(0x24f)](..._0x1526ea[_0x58b0d1(0x200)](_0x5f1b4a=>_0x5f1b4a[_0x58b0d1(0xb31)]()[_0x58b0d1(0xb8e)]-_0x5f1b4a[_0x58b0d1(0xb31)]()[_0x58b0d1(0x342)]()/0x2)),_0x47ee57=Math[_0x58b0d1(0x382)](..._0x1526ea[_0x58b0d1(0x200)](_0x1a3b6e=>_0x1a3b6e[_0x58b0d1(0xb31)]()[_0x58b0d1(0xb8e)]+_0x1a3b6e[_0x58b0d1(0xb31)]()['mainSpriteWidth']()/0x2)),_0x5b4582=Math[_0x58b0d1(0x24f)](..._0x1526ea[_0x58b0d1(0x200)](_0x40ffac=>_0x40ffac['battler']()[_0x58b0d1(0xba4)]-_0x40ffac[_0x58b0d1(0xb31)]()['mainSpriteHeight']())),_0x39040b=Math[_0x58b0d1(0x382)](..._0x1526ea[_0x58b0d1(0x200)](_0xb9ed12=>_0xb9ed12[_0x58b0d1(0xb31)]()[_0x58b0d1(0xba4)])),_0x2e2f1b=_0x1526ea[_0x58b0d1(0x477)](_0x5e0886=>_0x5e0886[_0x58b0d1(0x94e)]())[_0x58b0d1(0x4c1)],_0x6eb495=_0x1526ea[_0x58b0d1(0x477)](_0x2e189d=>_0x2e189d[_0x58b0d1(0xb8b)]())[_0x58b0d1(0x4c1)];let _0x164758=0x0,_0x2398f4=0x0;if(_0x1ba26d[_0x58b0d1(0x2e0)](/front/i))_0x164758=_0x2e2f1b>=_0x6eb495?_0xf7fc2e:_0x47ee57;else{if(_0x1ba26d['match'](/middle/i))_0x164758=(_0xf7fc2e+_0x47ee57)/0x2,_0x42d483=-0x1;else _0x1ba26d['match'](/back/i)&&(_0x164758=_0x2e2f1b>=_0x6eb495?_0x47ee57:_0xf7fc2e);}if(_0x1ba26d['match'](/head/i))_0x2398f4=_0x5b4582;else{if(_0x1ba26d[_0x58b0d1(0x2e0)](/center/i)){_0x2398f4=(_0x5b4582+_0x39040b)/0x2;if(_0x1f118c[_0x58b0d1(0xb31)]())_0x2398f4+=_0x1f118c[_0x58b0d1(0xb31)]()[_0x58b0d1(0x351)]/0x2;}else _0x1ba26d['match'](/base/i)&&(_0x2398f4=_0x39040b);}_0x1f118c[_0x58b0d1(0x7c4)](_0x164758,_0x2398f4,_0x310e9b,_0x2dc8d1,_0x4ca947,_0x42d483),this[_0x58b0d1(0x7af)]();},Window_BattleLog[_0x320868(0x5bb)][_0x320868(0x2c0)]=function(_0x486e64,_0x34dae5,_0x126e36){const _0x4a656e=_0x320868;for(const _0x5ba02a of _0x486e64){if(!_0x5ba02a)continue;_0x5ba02a[_0x4a656e(0x527)](_0x34dae5,_0x126e36);}this[_0x4a656e(0x7af)]();};function Window_BattleMultiTarget(){const _0x214c8e=_0x320868;this[_0x214c8e(0x136)](...arguments);}Window_BattleMultiTarget[_0x320868(0x5bb)]=Object[_0x320868(0x86c)](Window_Command[_0x320868(0x5bb)]),Window_BattleMultiTarget['prototype'][_0x320868(0xc58)]=Window_BattleMultiTarget,VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x78f)]=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)]['MultiTarget']||{},Window_BattleMultiTarget[_0x320868(0x1df)]=VisuMZ[_0x320868(0x5c8)]['Settings'][_0x320868(0x78f)][_0x320868(0xaa0)]??0x118,Window_BattleMultiTarget['BG_TYPE']=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x78f)][_0x320868(0x562)]??0x2,Window_BattleMultiTarget[_0x320868(0x43a)]=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x78f)]['ShowButton']??!![],Window_BattleMultiTarget[_0x320868(0x5cb)]=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)]['MultiTarget']['AllActorsText']??'All\x20Allies',Window_BattleMultiTarget[_0x320868(0x924)]=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x78f)][_0x320868(0x23e)]??_0x320868(0x4d4),Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x320868(0x5c8)]['Settings']['MultiTarget'][_0x320868(0x7bc)]??0x0,Window_BattleMultiTarget[_0x320868(0xae7)]=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x78f)]['ActorOffsetY']??0x0,Window_BattleMultiTarget[_0x320868(0xb27)]=VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x78f)][_0x320868(0xa69)]??0x0,Window_BattleMultiTarget[_0x320868(0x387)]=VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0x78f)][_0x320868(0x74b)]??0x0,Window_BattleMultiTarget[_0x320868(0x5bb)]['initialize']=function(_0x102da6,_0x3eb71f){const _0xf4f8e=_0x320868;this[_0xf4f8e(0x94c)]=_0x3eb71f,Window_Command[_0xf4f8e(0x5bb)][_0xf4f8e(0x136)][_0xf4f8e(0x5a6)](this,_0x102da6),this[_0xf4f8e(0xc2d)](Window_BattleMultiTarget[_0xf4f8e(0x9d1)]),this['deactivate'](),this[_0xf4f8e(0x190)](),this['deselect']();},Window_BattleMultiTarget[_0x320868(0x5bb)][_0x320868(0xaf5)]=function(){const _0x4d1033=_0x320868;return this[_0x4d1033(0x94c)];},Window_BattleMultiTarget[_0x320868(0x5bb)][_0x320868(0x55a)]=function(){const _0x188f9c=_0x320868;let _0x24ba29=this[_0x188f9c(0xaf5)]()?Window_BattleMultiTarget[_0x188f9c(0x5cb)]:Window_BattleMultiTarget['ALL_ENEMIES'];if(Imported['VisuMZ_0_CoreEngine']&&Window_BattleMultiTarget[_0x188f9c(0x43a)]){this['_buttonKey']=this[_0x188f9c(0xaf5)]()?_0x188f9c(0x91c):_0x188f9c(0x9ef),this['_buttonText']=TextManager['getInputButtonString'](this['_buttonKey']);const _0x110c15=VisuMZ['CoreEngine'][_0x188f9c(0x1d7)][_0x188f9c(0x204)][_0x188f9c(0x209)];_0x24ba29=_0x110c15[_0x188f9c(0x8b0)](this[_0x188f9c(0x6b1)],_0x24ba29);}this[_0x188f9c(0x154)](_0x24ba29,_0x188f9c(0x998));},Window_BattleMultiTarget['prototype']['drawItem']=function(_0x1dc4e3){const _0x16488d=_0x320868,_0x3bd322=this[_0x16488d(0x2ac)](_0x1dc4e3);this[_0x16488d(0xc1d)](),this[_0x16488d(0x47d)](this[_0x16488d(0x2cf)](_0x1dc4e3));const _0x20b5ce=this[_0x16488d(0x19f)](_0x1dc4e3),_0x26b424=this[_0x16488d(0x864)](_0x20b5ce)[_0x16488d(0x529)],_0x1c66af=_0x3bd322['x']+Math[_0x16488d(0x5a8)]((_0x3bd322[_0x16488d(0x529)]-_0x26b424)/0x2);this[_0x16488d(0x423)](_0x20b5ce,_0x1c66af,_0x3bd322['y'],_0x3bd322['width']);},Window_BattleMultiTarget['prototype']['update']=function(){const _0x8f1525=_0x320868;Window_Command[_0x8f1525(0x5bb)]['update'][_0x8f1525(0x5a6)](this),this['updateVisibility'](),this[_0x8f1525(0x515)]();},Window_BattleMultiTarget[_0x320868(0x5bb)][_0x320868(0x4e7)]=function(){this['visible']=this['visibilityState']();},Window_BattleMultiTarget[_0x320868(0x5bb)][_0x320868(0x38c)]=function(){const _0x539b33=_0x320868,_0xe18a21=BattleManager[_0x539b33(0x662)](),_0xe4448=_0xe18a21&&_0xe18a21[_0x539b33(0x260)]();if(!_0xe4448)return![];const _0x1d2f3f=SceneManager[_0x539b33(0x64a)];if(this[_0x539b33(0xaf5)]()){if(_0x1d2f3f['_actorWindow'][_0x539b33(0x55d)]&&_0x1d2f3f[_0x539b33(0x43c)][_0x539b33(0x72f)][_0x539b33(0x91c)])return!![];if(_0x1d2f3f[_0x539b33(0x62a)][_0x539b33(0x55d)]&&_0x1d2f3f[_0x539b33(0x62a)][_0x539b33(0x72f)][_0x539b33(0x91c)])return!![];}else{if(_0x1d2f3f[_0x539b33(0x62a)][_0x539b33(0x55d)]&&_0x1d2f3f[_0x539b33(0x62a)]['_handlers'][_0x539b33(0x9ef)])return!![];}return![];},Window_BattleMultiTarget[_0x320868(0x5bb)][_0x320868(0x515)]=function(){const _0x38e1f5=_0x320868;if(!Imported[_0x38e1f5(0x1c8)])return;this[_0x38e1f5(0x6b1)]!==TextManager[_0x38e1f5(0x2c9)](this[_0x38e1f5(0x548)])&&this[_0x38e1f5(0xbc2)]();},Window_BattleMultiTarget[_0x320868(0x5bb)][_0x320868(0xb16)]=function(){const _0x304496=_0x320868;if(this[_0x304496(0x6b7)]&&TouchInput[_0x304496(0xa2c)]()){const _0x346d38=this[_0x304496(0x28e)]();if(_0x346d38>=0x0){const _0x53e4ca=this[_0x304496(0xaf5)]()?'pagedown':_0x304496(0x9ef);Input['virtualClick'](_0x53e4ca);}}};function Window_DamageCounter(){const _0x58de21=_0x320868;this[_0x58de21(0x136)](...arguments);}Window_DamageCounter[_0x320868(0x5bb)]=Object[_0x320868(0x86c)](Window_Base['prototype']),Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0xc58)]=Window_DamageCounter,Window_DamageCounter[_0x320868(0x635)]={'enabled':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0xa2e)]??!![],'customFontFace':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0x7a7)]??'','textAlign':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0x2fa)]??_0x320868(0x60b),'hitsDmgFmt':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)]['ComboWindow']['hitsDmgFmt']??_0x320868(0x666),'hitsHealFmt':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0x9dc)]??_0x320868(0x936),'totalDmgFmt':VisuMZ[_0x320868(0x5c8)]['Settings'][_0x320868(0xb75)][_0x320868(0x371)]??_0x320868(0x21c),'totalHealFmt':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0x669)]??'\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','fadeShiftX':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0x96b)]??-0x2,'fadeShiftY':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0x740)]??0x0,'positionOffsetX':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0xb75)]['PosOffsetX']??0x0,'positionOffsetY':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0x2cb)]??0x0,'updateDuration':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)]['ComboWindow']['updateDuration']??0x14,'minimumStayDuration':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)]['ComboWindow'][_0x320868(0x980)]??0x28,'minimumHits':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0xb75)][_0x320868(0x4bc)]??0x1,'opacitySpeed':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0xb75)]['opacitySpeed']??0x10},Window_DamageCounter['prototype']['initialize']=function(_0x4940fb){const _0x43a934=_0x320868;this['_visibleDuration']=0x0,Window_Base[_0x43a934(0x5bb)][_0x43a934(0x136)][_0x43a934(0x5a6)](this,_0x4940fb),this[_0x43a934(0x8af)]=_0x4940fb['x'],this[_0x43a934(0x69f)]=_0x4940fb['y'],this['resetCounter'](),this[_0x43a934(0xc2d)](0x2);},Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0x6a9)]=function(){const _0x168fc9=_0x320868;this[_0x168fc9(0x356)]=0x0,this[_0x168fc9(0x50d)]=0x0,this[_0x168fc9(0x645)]=0x0,this['_targetHits']=0x0,this[_0x168fc9(0x672)]=0x0;},Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0x2f6)]=function(){const _0xabfebf=_0x320868;Window_Base['prototype']['resetFontSettings']['call'](this);const _0xada705=Window_DamageCounter[_0xabfebf(0x635)];_0xada705[_0xabfebf(0x9c0)]?this[_0xabfebf(0x2e5)]['fontFace']=_0xada705[_0xabfebf(0x9c0)]:this[_0xabfebf(0x2e5)][_0xabfebf(0x156)]=$gameSystem[_0xabfebf(0x9f8)]();};var $comboWindowReset=function(){const _0x3b4baf=_0x320868;if(!SceneManager[_0x3b4baf(0x96d)]())return;const _0x1dc8b7=SceneManager[_0x3b4baf(0x64a)]['_damageCounterWindow'];if(_0x1dc8b7)_0x1dc8b7[_0x3b4baf(0x6a9)]();};function _0x536b(){const _0x463494=['Sprite_Actor_updateBitmap','ESCAPE','Rate','position','_colorTone','addEscapeCommand','StateIconOffsetX','isCharging','setupBattleback','Parse_Notetags_Action','OffsetY','process_VisuMZ_BattleCore_Notetags','trueRandomTarget','popupDamage','drawItemImage','SwitchMissEvade','Duration','touchUI','enemyHpGaugeRate','round','StatusWindow_BgType','startShakeFlinch','Index','removeChildFromUiContainer','_homeX','ChangeOrderBy','Scene_Battle_createEnemyWindow','formula','ActSeq_Cutin_EndVisualCutinEffectAll','BattleManager_processDefeat','DefeatEvent','addCustomCommands','deselect','BattleCmdList','displayAddedStates','onFloatEnd','ActSeq_Inject_AnimationPauseResume','prepare','BattleManager_endAction_ComboWindow','WindowWidth','drawLineText','setVisibleUI','actorCommandSingleSkill','startInput','valueColor','customDamageFormula','States','AnchorY','damageOffsetY','maxTp','setReturnWindow','drawingAreaWidth','_subject','JS\x20%1START\x20TURN','isActing','LOVE','26140kRRXfJ','CriticalColor','checkSceneBattleTransitionable','battleCamera','slice','_tempEquipCheck','process_VisuMZ_BattleCore_DamageStyles','setupCriticalEffect','getDefeatedEnemies','_allTargets','_statusWindow','power','ArRedFlat','obj','setBattlerMotionTrailData','show','startDamagePopup','createBorderStylePortraitSprite','setBattlerFlip','setActiveWeaponSet','ParseEnemyNotetags','debuffNameFmt','_offsetY','Sprite_Enemy_updateStateSprite','_jumpWholeDuration','Window_BattleLog_performMiss','traitSet','addStatusCommand','processForcedAction','_targetHits','isForOne','PreEndTurnJS','onOpacityEnd','maxLines','StatusWindowAttachmentFrontOffsetY','_displayBattleCoreTransitionErrorMsg','Scene_Battle_onEnemyCancel','ConvertCount','performActionMotions','TpbActiveChangeEnabled','_targetOffsetX','updateWaitMode','Game_Action_makeTargets','gainHalfActionsPTB','createContents','setupBattlebackBattleCore','battleSkew','VisuMZ_3_FrontviewBattleUI','createPageButtons','alive\x20opponents','_returnWindow','_motionCount','Game_Actor_equips','canUseItemCommand','ACTOR_OFFSET_Y','pointX','Scene_Battle_needsInputWindowChangeIBS','createLowerLayer','isOpenAndActive','guardSkillId','onActorOk','ConfigManager_applyData','_speed','_interpreter','163074SZImUW','isStateAffected','face','onBattleStart','forActor','DefaultHardCap','repositionEnemiesByResolution','Game_Action_isForAll','addSkillCommands','_itemWindow','characterName','process_VisuMZ_BattleCore_PluginParams','createCancelButton','comboWindowOffsetY','ActSeq_Mechanics_AtbGauge','_appeared','_regionBattleback1','clearFreezeMotionForWeapons','performActionStart','ActSeq_BattleVoice_PlayCommonLine','processAnimationRequests','isFloating','NameAlwaysHidden','statusWindowRectXPStyle','updateEvent','AttachStateOffsetX','createKeyJS','_targetGrowY','members','magicSkills','applyTargetFilters','center','makeSpeed','Game_Action_executeDamage','VisuMZ_2_BattleGridSystem','requestMotionRefresh','status','processTouch','displayBattleCoreTransitionErrorMsg','loadBattleback2','ATK','dataId','updatePageButtonVisibility','setBattleAngle','displayMpDamage','_targetBattlerKey','_character','speed','registerDefeatedEnemy','battlelog','updateNameTempVisibility','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','ActSeq_Impact_MotionBlurTarget','Game_Temp_requestAnimation','ENEMY_OFFSET_X','drawActorFace','isATB','STATUS','ShowWeapon','commandRemember','itemEffectAddAttackState','sortEnemies','ActSeq_Element_AddElements','VisuMZ_4_IconBalloons','battler','checkTpbInputOpen','MUSIC-NOTE','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','clearBattleCoreAspects','charging','missle','applyDamageCaps','pageOffsetY','drawItemActorFace','autoBattleWindowRect','SvWeaponMass-%1-%2','QUESTION','onDisabledPartyCommandSelection','MP_Rate','svAnchorY','requestDragonbonesAnimation','PreEndActionJS','addActor','_targetSkewY','VisuMZ_2_AggroControlSystem','isDuringNonLoopingMotion','pageButtonX','actorId','Window_BattleLog_clear','_actorMultiTargetWindow','\x20to\x20%1\x20midbattle.','updateAngleCalculations','ATTACK','value','parallaxScrollY','Window_BattleLog_displayMpDamage','StatusWindow_RectJS','Sprite_Battler_setBattler','ActSeq_BattleVoice_PlaySpecialLine','drawActorIcons','PopupShiftY','BattleLog','selectSymbol','ShowAddedBuff','finalizeScale','isUnderAnimation','Window_BattleLog_pushBaseLine','StepDuration','%1EndTurnJS','gainCurrentActionsETB','removedStateObjects','StepDistanceY','onEscapeFailure','onActorCancel','targetObject','isArray','_stateSprite','isWaiting','Game_Action_clear','setBattleCameraPoint','Window_BattleLog_performMagicEvasion','Sprite_Enemy_initVisibility','ShowAddedState','onHomeMoveEnd','process_VisuMZ_BattleCore_PreBattleCommonEvent','lastFilename','skillWindowRect','statesMaxWidth','forceEscapeSprite','abort','alignBattleCoreDamageSprite','FRUSTRATION','ComboWindow','setupBattleCoreAspects','portraitHue','_cancelButton','actionSplicePoint','PostEndBattleJS','Text','TurnsFmt','AutoMeleeSolo','occasion','centerFrontViewSprite','displayChangedStates','updateBorderSprite','Game_Battler_performEvasion','isAnimationShownOnBattlePortrait','ActSeq_Mechanics_AnalyzeWeakness','hasSvBattler','endAnimation','calcWindowHeight','updateSkew','redraw','_floatEasing','isEnemy','_methods','addStateTurns','_baseX','battleUIOffsetY','drawBattlerData','smoothness','_homeDuration','lifeStealTrait','actor','_skewX','ActSeq_Mechanics_BreakShieldReset','_homeWholeDuration','ActSeq_Horror_GlitchRemove','hitsDmgFmt','isTpb','animationId','cutinEnter','CriticalHitFlat','Param','_battleLayoutStyle','FocusX','Game_Battler_makeSpeed','_action','Game_Action_isForOne','_baseY','SkillItemBorderCols','onRegeneratePlayStateAnimation','isDTB','border','isForFriendBattleCore','%1-%2','battleBalloon','createEnemyNames','atbInterrupt','contentsBack','targetObjects','Game_Battler_clearMotion','processDrawEnemyBattler','attackStatesRate','addBattleCoreAutoBattleStartupCommand','ActSeq_Weapon_SetActiveWeapon','toString','_text','Scene_Battle_updateCancelButton','makeActionList','openBattleActorWindow','_back2Sprite','updateStyleOpacity','stepFlinch','ActSeq_Motion_FreezeMotionFrame','ActSeq_Camera_Clamp','canAlterActionCostPTB','addPartyCommand','battleJump','refresh','Scene_Party','Game_Action_setSkill','waitForEffect','_shake','updateEffectContainers','ActSeq_Movement_Float','buffIconIndex','ActSeq_Zoom_Reset','createShadowSprite','addImmortal','ActSeq_Element_NullElements','ActSeq_Horror_TVRemove','ActSeq_Movement_MoveToTarget','turn','iconText','faceRect','RevertAngle','CounterPlayback','_commandNameWindow','alive\x20friends\x20not\x20user','chantStyle','Game_Action_needsSelection','gainStoredBoostPoints','testApply','closeBattleActorWindow','Scene_Battle_commandEscape','_colorFilter','invokeCounterAttack','setupIconTextPopup','selectedBattlers','_battlerContainer','BattleManager_cancelActorInput','%1Event','Direction','attachSpritesToDistortionSprite','makeBattleCommand','faceWidth','canInput','isCustomBattleScope','_activeWeaponSlot','ActSeq_Movement_HomeMoveBy','updateHomeMove','Sprite_Battleback_adjustPosition','TpbGaugeOffsetX','Scene_Battle_createActorCommandWindowIBS','onBattleStartBattleCore','extraPositionY','autoBattle','makeBuffName','makeData','isAnyoneInjectAniPrepping','all\x20targets','value1','alive\x20actors','PostStartActionJS','lineHeight','HEART','Window_Options_statusText','SkewX','Setting','cameraDuration','_floatHeight','Scene_Map_launchBattle','AutoMeleeAoE','itemLifeStealRate','SceneManager_push','applyBattleCoreJS','ARRAYNUM','HelpEscape','icon','drawItemImageXPStyle','_createDamageContainer','states','ActSeq_Movement_HomeReset','setupActionSet','createCommandNameWindow','ActSeq_Mechanics_VariablePopup','_enemyWindowMode','_onceParallelInterpreters','drawActorSimpleStatus','_enemySprite','Sprite_Damage_createChildSprite','updateEventMain','ActSeq_Impact_MotionTrailCreate','AttackAnimation','Sprite_Battler_isMoving','prepareCustomActionSequence','_floatDuration','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','logActionList','resetTextColor','revealNewWeaknesses','_underAnimationContainer','ActSeq_Animation_ShowAnimation','_angleWholeDuration','_tpbNeedsPartyCommand','targetActionSet','_callSceneOptions','MUSIC\x20NOTE','DigitGrouping','finishActorInput','StatusWindowAttachmentBackOffsetX','updateFrame','parseLocalizedText','callUpdateHelp','Normal','setBackgroundType','isBattlerTargeted','Item-%1-%2','svAnchorX','PreApply%1JS','attackAnimationId2','WaitForNewLine','BattleManager_isTpbMainPhase','PreEndBattleJS','DistanceX','Formula','Sprite_Animation_targetSpritePosition','contains','ActSeq_Grid_AddPassiveStatesToNode','freezeTime','isForRandomBattleCore','BattleManager_processAbort','TP_Flat','filters','Game_Troop_expTotal','updateCallMenu','onEnemyCancel','Spriteset_Battle_createBattleField','toLowerCase','adjustPosition_1for1','partyCommandWindowRectDefaultStyle','item','paintOpacity','iconIndex','Game_Battler_regenerateAll','VoiceLine','NewPopupBottom','itemTargetCandidates','makeSuccess','Game_Action_setSubject','ANNOYED','visualCutinPortraitHue','waitForNewLine','validTargets','glitch','Window_BattleLog_displayMiss','Spriteset_Battle_updateActors','makeActionOrders','constructor','BattleManager_abort','isMoving','isActionSelectionValid','Window_BattleLog_displayCritical','ActSeq_Movement_HomeMoveToPoint','uiInputPosition','isTpbCharged','addBattlerStates','loadFaceImages','Game_Troop_setup','ActionCount','playCancel','die','Scene_Battle_start','friendsUnit','removeState','_helpWindow','Game_Action_evalDamageFormula','getEnemyIdWithName','commandEscape','ShowPortraits','originalName','thrust','isSkipPartyCommandWindow','AdjustRect','resetResultSwitches','5558987wqJvWx','_stateIconSprite','isPlaying','frameVisible','Window_BattleLog_update','startMove','createAttachedSprites','Sprite_Actor_setBattler','TargetLocation','drawActorBuffRates','skew','CheckVisibleBattleNotetags','isJumping','regenerateAll','isEscapeCommandEnabled','actorCommandCancelTPB','WaitForZoom','_phase','initialize','canGuardBattleCore','checkCacheKey','_lastAction','applyBattleCoreHitRateJS','CheckActSeqProjectileVersion','clearBattleRefreshRequest','Buffs','BattleManager_endAction','CreateCutinSettings','ActSeq_BattleLog_WaitForNewLine','Users','ActSeq_Impact_Oversaturate','symbol','MAXMP','-%1','ActSeq_Grid_RemovePassiveStatesFromNode','lifeStealRate','_damages','JS\x20BATTLE\x20VICTORY','passiveText','getTraitSetKeys','EscapeSuccessJS','Enemy','ActionStart','uiMenuStyle','PopupShiftX','isActiveTpbReady','getNextSubjectFromPool','ElementStatusCore','addCommand','isOptionsCommandEnabled','fontFace','isNonSubmenuCancel','repeatTargets','Window_SkillList_maxCols','playOnceParallelTroopPage','targetSpritePosition','portraitType','setBattlerBattleCore','battlerKey','Game_Action_executeHpDamage_ComboWindow','_statusType','STB','float','setHandler','PointJS','_bypassCanCounterCheck','isCTB','becomeSTBExploited','freezeFrame','_targetAngle','Game_Action_testApply','ActSeq_Mechanics_DeathBreak','setupZoomBlurImpactFilter','_autoBattle','ARRAYSTR','clearGlobalVariables','displayStartMessages','collapseType','Debuffs','performSTBExploiter','isAlive','anchorX','shouldHideBattleEndPopups','damageText','surprise','jsAccuracy','createDistortionSprite','CopyCombatLog','displayedParams','Sprite_Actor_setActorHome','removeBuff','ActSeq_Grid_AnimationTypeAtNode','clearElementChanges','statusWindowRect','BattleManager_startTurn','ActSeq_Impact_TimeScale','moveBattlerHomeDistance','zoomDuration','jsScaleToFit','createWeather','ActSeq_BattleLog_Refresh','▲%1','EVAL','disarmLifeSteal','onBattleEnd','_shadowSprite','Sprite_Actor_updateShadow','ClearBattleLog','hide','toUseBoostPoints','Game_BattlerBase_initMembers','ShowActorGauge','Sprite_Battler_setHome','ActSeq_Impact_ShockwaveCenterTargets','updateStateIconSprite','addWindow','custom','_weather','isFlipped','Scene_Battle_updateBattleProcess','ParseActorNotetags','isBattleFlipped','addedBuffs','commandName','backColor','applyImmortal','Window_BattleLog_performSubstitute','addFightCommand','current\x20target','addChildToUiContainer','createPartyCommandWindowBattleCore','-----','isMagical','contentsOpacity','Window_ActorCommand_initialize','SLEEP','removeStatesAuto','setMoveEasingType','isSceneChanging','setClickHandler','iconHeight','MaxMP','makeDeepCopy','getDualWieldTimes','troop','HalfActions','HpGauge','textColor','temporaryVisibile','SvMotionIdleMass-%1-%2','ScaleDown','isPartyTpbInputtable','ActSeq_Grid_AddTriggerToNodeJS','getFullActionsPTB','flashDuration','smoothSelect','concat','performShakeFlinch','normalText','Sprite_StateIcon_updateFrame','onTurnEnd','Height','AS\x20TARGET','alive\x20actors\x20not\x20target','VisuMZ_0_CoreEngine','BattleLogRectJS','<CUSTOM\x20ACTION\x20SEQUENCE>','XPActorCommandLines','bind','addGuardCommand','param','updateFlip','MIN_SAFE_INTEGER','SvBattlerMass-%1-%2','CTB','balloonId','JSON','_growDuration','ShowSubstitute','Settings','destroyDamageSprite','growBattler','Skill-%1-%2','addBattleGridMoveCommand','Spriteset_Battle_update','TpGaugeOffsetY','initMembersBattleCore','WIDTH','Scene_Map_initializeAfter','HelpItem','adjustPosition_ScaleToFit','getAttackMotion','Game_Temp_requestBalloon','isAutoBattle','maxBattleMembers','isPartyCommandWindowDisabled','battleUIOffsetX','createDigits','removeActor','Frame','createStateIconSprite','_namesCount','deadMembers','???','isForOpponentBattleCore','PostApply%1JS','getItemDamageAmountTextOriginal','passive','applyBattleCoreCriticalHitRateJS','createEffectActionSet','isCommonEventReserved','setupBlueRedInvertImpactFilter','textAlign','mainSprite','base','commandSymbol','\x5cI[%1]\x5cHEXCOLOR<%3>%2','StatusWindowAttachmentFront','isItem','isBuffAffected','map','VisuMZ_3_BattleAI','ANGER','performReflection','ButtonAssist','push','ShowTpDmg','clearActiveWeaponSlot','BattleManager_onEscapeSuccess','TextFmt','battleMembers','_currentAngle','pageButtons','startActorCommandSelection','getParamBuffAndStateRate','Reveal','ChantStyle','battleZoom','isSkillItemWindowsMiddle','HelpSkillType','_createCursorSprite','itemEffectRecoverMp','weatherPower','gainBravePoints','updateRefresh','isPlaytest','StepDistanceX','normalHelp','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','turnCount','isAnyoneSkewing','endAction','deathStateId','itemHeight','ReflectPlayback','Sprite_Battler_update','performActionEnd','SceneManager_isSceneChanging','stateColor','ShowCounter','message4','loadEnemy','battleProjectiles','ActSeq_Mechanics_EmulateItemEffect','BattleManager_onEscapeFailure','traitObjects','_visualHpGauge_JustDied','Intensity','Window_BattleLog_performRecovery','hpRate','ActSeq_Mechanics_SwapWeapon','clearResult','DefaultSoftScaler','requestMotion','remove','ActSeq_Movement_Jump','_jumpHeight','resizeWindowXPStyle','statusDescription','onEncounterBattleCore','drawComboText','boxWidth','AllEnemiesText','setupFont','next\x20target','applyCritical','addBuff','evaded','_forceAction','isForRandom','logWindowRect','ComboWindow_RectJS','lastBattleSkill','BattleDefeatJS','AnchorX','PartyCmd','clearBattleBalloons','emulateActionEffect','rate','min','LIGHT\x20BULB','ColorManager_mpColor','AutoBattle','Defeat','AllowCollapse','string','pow','actionBattleCoreJS','createMultiTargetWindow','ShowCurrentState','_targetHomeX','clearTargetBattlerKey','TP_Rate','battleCommands','ActSeq_Horror_Clear','Parse_Notetags_Targets','canSingleOrMultipleSelect','playEnemyAttack','isNextSceneBattleTransitionable','SwitchCritical','Scene_Battle_onActorOk','ActSeq_BattleLog_Clear','VisuMZ_2_BattleSystemPTB','itemTextAlign','frontviewSpriteY','noise','_visibleDuration','displayReflectionPlayBack','CalcActionSpeedJS','destroy','WaitForJump','ActSeq_Mechanics_EmulateGuardEffect','ActSeq_Movement_FaceDirection','helpAreaBottom','splice','AlphaFilter','isMeleeSingleTargetAction','createAttachmentSprites','_distortionSprite','_battleField','reserveCommonEvent','getCommonEventIdWithName','isCancelLifeSteal','_battleCoreForcedElements','makeHpDamageText','Scene_Battle_startEnemySelection','Window_BattleActor_hide','hitText','attack','Scene_Battle_onActorCancel','debuffValueFmt','ExtraSettings','ActSeq_Camera_WaitForCamera','none','Window_BattleEnemy_hide','Window_ActorCommand_setup','WaitForCamera','setCommonEvent','switchToWeaponType','portraitFlipHorz','_jumpMaxHeight','_nameTempVisibleDuration','hitIndex','floatBattler','Window_BattleLog_performCounter','process_VisuMZ_BattleCore_CreateRegExp','useItem','ScaleUp','StatusWindowSkinHide','actions','StartTurnShow','setHelpWindowItem','\x5cC[0]','gaugeX','commandStyle','VisuMZ_2_BattleSystemATB','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','_battleCoreBattleResumeAfter','ActSeq_Grid_PushFromTargetNode','ForceExploited','ParseStateNotetags','ActSeq_Movement_WaitForFloat','startActorSelection','placeGauge','setHorrorEffectSettings','svBattlerData','addGeneralOptions','startWeaponAnimation','Game_BattlerBase_eraseState','Window_PartyCommand_initialize','enemyTpGaugeRate','IconIndex','itemLineRect','findSymbolExt','Shadow2','clearMotion','textWidth','pause','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','hidden','isHidden','Game_Map_encounterList','cutinExit','Scene_Battle_isTimeActiveIBS','Window_BattleLog_refresh','front\x20center','DEF','bossCollapse','svBattlerAnchorX','StatusGraphic','jump','ActSeq_Camera_Reset','performJump','ForceExploiter','getBattleMembers','isDeathStateAffected','skillId','resize','CriticalDmgRate','parseForcedGameTroopSettingsBattleCore','toUpperCase','getInputButtonString','Destination','PosOffsetY','WaitForSpin','font','\x5cC[%1]','isCommandEnabled','_forcedBattleLayout','battleLayoutStyle','GUARD','gainFullActionsPTB','Game_Interpreter_command283','startEnemySelection','createTargetsJS','timeScale','Actions','isAttack','isAnyoneInjectAnimating','allowRandomSpeed','Mute','ActSeq_Motion_MotionType','hitRate','ActSeq_Mechanics_BtbGain','match','Scene_Battle_createAllWindows','comboWindowOffsetX','WaitForOpacity','Skills','contents','AddHpGaugeOption','rec','drawTextTopAligned','RequiresDefeat','executeHpDamage','itemWindowRect','startJump','checkShowHideSkillNotetags','addOnceParallelInterpreter','addCombatLogCommand','placeStateIcon','_tempActor','Sprite_Enemy_update','ConvertActionSequenceTarget','BattleSystemSTB','updateBattleVariables','resetFontSettings','needsSelection','ActSeq_Movement_HomeMoveToJsPoint','isEffecting','TextAlign','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','ITEM','measureTextWidth','reduce','motionSpeed','ActSeq_DB_DragonbonesMotionAni','ConfigManager_makeData','Elements','createActorCommandWindowBattleCore','sideview_ui','ActionCenteredName','processBattleCoreJS','maxItems','playCursor','BULB','paramName','command283','declareGlobalVariables','head','BattleManager_makeActionOrders','AutoBattleMsg','getAttackMotionSlot','EnableSoftCap','_cache','+%1\x20MP','isCurrentItemEnabled','createActors','VisuMZ_2_BattleSystemFTB','mainSpriteScaleX','battleStatusWindowAnimationContainer','Scene_Battle_startActorSelection','ActSeq_Impact_BlueRedInvert','_animationSprites','Damage','isNameTemporarilyVisible','changeTurnOrderByCTB','isDebuffAffected','duration','GetParamIcon','save','createBattleUIOffsetX','VisuMZ_3_BattleVoices','_createCursorArea','%1\x20%2','processEscape','_growEasing','STRUCT','EnableDamageCap','_offsetX','ActionSequence','addAutoBattleCommand','ActSeq_Grid_PullToTargetNode','drawSingleSkillCost','startVisualCutin','Game_BattlerBase_refresh','selectLast','_item','BattleManager_checkSubstitute','_damageContainer','battleEnd','Window_BattleLog_popupDamage','isAppeared','state','processRandomizedData','command357','paramBuffRate','_target','stateMotionIndex','requestBattleBalloon','createEnemyWindow','updateShadowScale','mainSpriteWidth','getLastPluginCommandInterpreter','_growY','PreStartActionJS','Spriteset_Battle_createLowerLayer','createRateJS','nameColor','setSkill','updateBattleBalloons','_windowLayer','subject','ActSeq_Movement_HomeMoveToTarget','_hideAllIcons','_bypass_applyBattleCoreHitRateJS','statusHelpDesc','height','ActSeq_Camera_FocusTarget','_customDamageFormula','Immortal','createDamageSprite','_updateDuration','VisuMZ_1_ElementStatusCore','guardHpLifeSteal','applyAngleChange','isCancelTriggered','paySkillCost','getLastHpDamage','Window_Options_addGeneralOptions','AutoAddState','revertTpbCachedActor','recoverAll','_weaponImageId','onSelectAction','eraseState','extraPositionX','onAllActionsEnd','refreshBattlerMotions','user','special','isDisarmLifeSteal','updatePadding','currentMaxValue','createInBattleStatusWindow','mhp','DistanceAdjust','-%1\x20MP','arPenRate','totalDmgFmt','processVictory','skewBattler','Scene_Battle_createHelpWindow','FaceDirection','ShowPopup','setText','updateAttachmentSprites','_homeY','_skewDuration','getBattlePortraitFilename','_flashColor','performDamage','innerHeight','alive\x20enemies','ActSeq_Impact_TimeStop','loadSystem','max','cancel','updateStaticSvBattlerFrames','opacity','isAnyoneJumping','ENEMY_OFFSET_Y','setSubject','TpbGaugeOffsetY','waitForOpacity','setupHpGaugeSprite','visibilityState','extraPositionScaledY','process_VisuMZ_BattleCore_CommonEventKeys','AS\x20USER','_borderPortraitSprite','isForAliveFriend','playOnceParallelInterpreter','alive\x20actors\x20not\x20user','getNextDamagePopup','getWtypeIdWithName','_isBattlerFlipped','EscapeSuccess','$target','Scene_Battle_startPartyCommandSelection','_skewY','_autoBattleWindow','displayCritical','startIcon','setColorTone','onGrowEnd','setCustomDamageFormula','guardLifeSteal','process_VisuMZ_BattleCore_TraitObject_Notetags','WaitForExit','displayItemMessage','waitForMovement','isFTB','Scene_Map_initialize','ActiveTpbOptionsMessage','PreDamageJS','Game_Enemy_transform','allowCollapse','AntiTintUiElements','createAnimationContainer','_effectsContainer','isAutoBattleCommandEnabled','Exploiter','NameOffsetX','_back1Sprite','_actions','CheckSkillCommandShowSwitches','updatePositionBattleCore','isBigCharacter','drawItemStyleIconText','blt','Game_Map_battleback2Name','skillItemWindowRectMiddle','getColor','removeChild','startInjectAnimation','ActSeq_Projectile_Icon','ChargeRate','stateHelpFmt','isOverworld','Radius','_growWholeDuration','battleAnimation','StatusWindowSkinFilename','noSimilarSTypes','Game_BattlerBase_addNewState','performActionEndMembers','DTB','wholeActionSet','_regionBattleback2','_fauxAnimationSprites','Game_Action_itemEffectAddAttackState','ActSeq_Movement_Scale','ComboWindow_DrawJS','processOk','_hpGaugeSprite','normalIcon','SideviewSelect','PopupPosition','offsetY','updateBossCollapse','1292574wYrPzX','MANUAL','scope','stbGainInstant','VisuMZ_2_HorrorEffects','portraitIndex','rowSpacing','isBusy','createCommandVisibleJS','name','launchBattle','canAttackBattleCore','isDead','regenerateAllBattleCore','_forcedHomeX','drain','HitRate','MpGaugeOffsetY','Game_Action_executeMpDamage','MDF','attackAnimationIdSlot','applyHardDamageCap','canBattlerMove','alterBreakShield','updateFloat','actorCommandWindowRect','VisuMZ_3_ActiveChainSkills','setupRgbSplitImpactFilter','inBattle','disperseDamage','WaitForAngle','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','Game_Actor_setup','PostRegenerateJS','RegExp','ActSeq_Skew_WaitForSkew','addDamageSprite','onAngleEnd','battleMove','battlerShadowScaleY','CmdIconFight','StartTurnWait','Game_Action_apply','_motionSpeed','Window_BattleLog_popBaseLine','HP_Flat','addNormalStatus','clearFreezeMotion','Game_Interpreter_updateWaitMode','equipSlots','drawItemStyleIcon','CurrentTurn','battleCameraData','makeUniqueNames','BackColor','PrioritySortActors','_updateCursorFilterArea','FUNC','FrontViewSelect','Interrupt','autoSelect','Sprite_Battler_initMembers','createBattleField','requestAnimation','ActSeq_Mechanics_BoostPointsChange','note','wait','BattlebackScale','Game_Action_isForFriend','PopupOffsetY','some','ActSeq_Motion_RefreshMotion','ActSeq_Animation_CastAnimation','FlashColor','ActSeq_Cutin_AddVisualCutinEffect','_shadowScaleY','drawTextEx','Window_BattleLog_performDamage','ShowReflectWait','battleCommandName','singleSkill','drawItemStatusXPStyle','_executeHpDamage','applyFreezeMotionFrames','mainSpriteScaleY','isTpbMainPhase','processDefeat','setActionState','Shadow','_emptyBitmap','ActSeq_BattleLog_WaitForBattleLog','MotionType','updateUiContainerPosition','Sprite_Actor_createStateSprite','Game_Battler_performActionStart','ActSeq_Mechanics_ActionEffect','\x5cI[%1]\x5cC[%3]%2','repeats','ItemID','SHOW_BUTTON','version','_actorWindow','shouldDisperseDamage','Game_Interpreter_PluginCommand','createTroopNote','animationShouldMirror','▼%1','dead\x20opponents','setupTextPopup','ActSeq_Grid_TeleportToNode','weatherType','checkBattleEnd','battleSpin','JumpToLabel','SkillItemStandardCols','_angleEasing','_skewWholeDuration','resetNameTempVisibility','ActSeq_Animation_BalloonIconSpecific','Game_BattlerBase_isStateResist','nextActiveWeaponSlot','_stateTurns','process_VisuMZ_BattleCore_Action_Notetags','battleCoreTpbMainPhase','processRefresh','ActSeq_Animation_ActionAnimation','canUse','weaponImageId','move','GetActionSequenceSpecialTargetWithFlags','displayAction','EscapeFail','isChanting','ParseWeaponNotetags','drawItemImageListStyle','StateID','_updateCursorArea','BARE\x20HANDS','HITTYPE_MAGICAL','setupOversaturateImpactFilter','_actionBattlers','setupDesaturateImpactFilter','cancelHpLifeSteal','damageFlat','displayMiss','needsActorInputCancel','BattleGridSystem','_jumpDuration','snapForBackground','canMove','performEvasion','allBattleMembers','3202782WZCorv','PortraitScaleBorderStyle','WaitForEffect','addChildToBack','ActSeq_Horror_NoiseRemove','MotionIdle','ActSeq_Inject_AnimationEnd','processEnemyModeTouchBattleCore','filter','hasAspectData','BattleManager_processVictory','refreshMotion','\x5cI[%1]%2','_branch','changePaintOpacity','Game_Battler_onTurnEnd','setupChild','setSTBExploited','Game_Action_makeDamageValueDisperse','_targetHomeY','enemyShowLevel','COMBATLOG','_freezeMotionData','ActSeq_Animation_GuardAnimation','ActSeq_Mechanics_OtbOrder','%1RegenerateJS','innerWidth','selectPreviousCommand','FvAniCenterAll','addSingleSkillCommand','addAttackCommand','_dragonbonesSpriteContainer','targetDistortionSpritePosition','POST-','focus','ActSeq_Mechanics_CtbSpeed','ActSeq_DB_DragonbonesTimeScale','statusText','windowskin','8903960ZaPAFN','isFriendly','_list','Armor-%1-%2','applyGuard','VisuMZ_1_SkillsStatesCore','lastCommandSymbol','setHome','reverse','setHalfActionsPTB','DamageStyles','_damageCounterWindow','loadWindowskin','textAlignment','actor%1-gauge-%2','BattleManager_setup','findTargetSprite','stop','isPreviousSceneBattleTransitionable','clamp','isFrameVisible','_lineHeight','jsCritRateAsTarget','setStateTooltipBattler','itemPadding','ActSeq_Mechanics_HpMpTp','visualCutinPortraitType','svShadow','AsUser','CmdIconStatus','Angle','Window_BattleLog_displayFailure','ShowHide','addChildAt','Game_BattlerBase_allIconsIBS','addTextToCombatLog','buffHelpFmt','Sprite_SvEnemy','minimumHits','_mainSprite','_battler','BoostPoints','applyEasing','length','numRepeats','drawStates','_motion','1:1','isSubjectValidForAnyoneSelect','checkTpbInputClose','getSkillIdWithName','escape','CriticalHitRateJS','randomInt','autoSelectPriority','requestPointAnimation','requestRefresh','effects','Game_Battler_onBattleEnd','CmdTextAlign','drawItemStatusListStyle','encounterList','All\x20Enemies','powerUpColor','ShakeFlinch','ShowFailure','maxCols','setFullActionsPTB','inBattleStatusWindowRect','enemyShowParametersIfBattleTest','damageCounterWindowRect','MP_Flat','startFloat','_index','onStaticEnemyBitmapLoad','_createClientArea','actionEffect','removeImmortal','VisuMZ_3_ActSeqImpact','AspectIcon','_battlePortrait','updateVisibility','_commonEventIDs','StatusWindowAttachmentBack','isBattleMember','updateLastTarget','clearDamagePopup','ActSeq_Mechanics_StbExtraAction','Window_BattleLog_performActionStart','iconWidth','addChild','isAutoBattleCommandAdded','_battlerKeyCache','_buffs','Balloon','gainMp','Window_BattleLog_displayTpDamage','battleSys','BattleManager_startAction','invokeAction','PreRegenerateJS','applyGlobal','Scene_Battle_commandFight','parse','isBattleRefreshRequested','Linear','alterActionCostPTB','applyData','requestBalloon','_skewEasing','%1\x20Aspect','loadPicture','damageOffsetX','negativeLifeSteal','makeTargetSelectionMoreVisible','swing','isPreviousScene','BaseTroopIDs','evalDamageFormula','_totalHits','isAnyProjectilePresent','WaitCount2','loadCharacter','setImmortal','initElementStatusCore','isBattlerGrounded','process_VisuMZ_BattleCore_jsFunctions','updateKeyboardKeys','updateMotionCount','drawGauge','createDamageCounterWindow','PopupDuration','_linkedSprite','_cursorArea','ShowReflect','startTpbTurn','Scene_Battle_terminate','changeBattlebacks','Game_Action_isForDeadFriend','damagePopupPosition','fontSize','turnsFmt','OffsetAdjust','target','drawItemActorSprite','jumpBattler','Scene_Map_updateCallMenu','width','isAnyoneChangingOpacity','compatibilityVisible','createEnemies','animationWait','partyCommandWindowRectBorderStyle','expTotal','ArPenFlat','performLifeSteal','setHue','PostDamageAsUserJS','traits','preparePartyRefresh','createHelpWindow','HitFlat','attackMotions','isSpriteVisible','isCertainHit','loop','autoSelectLastSelected','Game_Action_setItem','alterChange','_battlerName','anchor','MaxHP','isDying','CastMagical','StartTurnMsg','setBattlerFacePoint','StateIconOffsetY','isAnyoneGrowing','_buttonKey','_injectAnimationSprite','%1StartActionJS','BTB','ActSeq_Mechanics_StbRemoveExcessActions','includeState','isPTB','_targetSkewX','replace','onSkewEnd','Scene_QuickLoad','performWeaponAnimation','SyncBuffExpire','Sprite_Battler_updatePosition','parameters','addBattleCoreAutoBattleStyleCommand','setTargetBattlerKey','addWeaponSwapCommand','makeCommandList','PreApplyAsUserJS','ScaleY','active','AutoBattleBgType','%1Damage%2JS','Scene_Battle_helpWindowRect','mpColor','BgType','isTickBased','windowPadding','Scene_Battle_skillWindowRect','missed','Sprite_Enemy_setBattler','enemy','isSpriteVS8dir','ActSeq_Movement_FaceJsPoint','_totalValue','setupShockwaveImpactFilter','initBattlePortrait','HomePosJS','spinBattler','applyVariance','addDebuff','updateHelp','createUIContainer','swapEnemyIDs','pageButtonY','lineRect','_enemyId','battleEffect','isNegativeLifeSteal','getBattlerKeyTargets','HITTYPE_PHYSICAL','disarmMpLifeSteal','scale','abs','NameAlwaysVisible','_forcedBattlers','isForDeadFriend','isSelected','performSubstitute','ActSeq_BattleLog_PopBaseLine','_lines','currentDisplayedValue','all\x20actors','performMiss','ZZZ','forceWeaponAnimation','showEnemyAttackAnimation','ActSeq_Grid_AnimationJsAtNode','changeBattlerOpacity','endIcon','placeTimeGauge','parallaxScrollXinvertEnemy','_drawTextBody','createBattleUIOffsetY','ReflectAnimation','#ffffff','enemyStatus','startSpin','_colorType','_executedValue','_borderPortraitTargetX','LifeStealRegExp','startHomeMove','battlerSprites','right','ActSeq_Mechanics_PtbConvert','chant','LastSelected','pop','meetsSelectFrontviewActorConditions','resetBreakShield','displayType','Game_Action_applyGlobal','call','ActSeq_Weapon_NextActiveWeapon','floor','isSideView','processHandling','Game_Map_battleback1Name','ActSeq_Angle_Reset','setBattleCameraTargets','canGuard','command301_PreBattleEvent','popBaseLine','StartName','ActSeq_Mechanics_EmulateSkillEffect','isBattleCoreTargetScope','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','description','battleback1Name','battleCorePreBattleCommonEvent','InBattleStatus','Sprite_Weapon_loadBitmap','selectNextCommandTpb','prototype','sprite','_pattern','_inBattleStatusWindow','setHelpWindow','MAXHP','getBattlerKeyTargetReplacement','SILENCE','applyForcedGameTroopSettingsBattleCore','setBattleZoom','Scene_Battle_update','multiTargetWindowRect','isConfused','BattleCore','performCastAnimation','animationNextDelay','ALL_ACTORS','drawActorStateTurns','_commonEventQueue','_angleDuration','createAutoBattleWindow','startBattle','Letter','_animationContainer','jsScaleUp','ShowHpDmg','battleCoreResumeLaunchBattle','battleStatusSprite','pageButtonPosition','_inBattleStatusMode','weaponTypes','_uiContainer','Game_System_initialize','_ptbActionCost','ActSeq_Set_FinishAction','waitCount','isAnimationPlaying','emulateAction','buffColor','_createEffectsContainer','battleOpacity','ActSeq_Grid_RemoveTriggerFromNode','ceil','SvWeaponSolo-%1-%2','cancelTargetSelectionVisibility','ActSeq_Set_TargetActionSet','DistanceY','PostApplyAsUserJS','BattleManager_initMembers','endInBattleStatus','ActSeq_Impact_ZoomBlurPoint','ActSeq_Cutin_EndVisualCutinEffectType','Style','mmp','ActSeq_Target_CurrentIndex','HelpOptions','_enemyIDs','ActionSkillMsg1','_makeFontNameText','STYPES','start','createHelpWindowBattleCore','createStatesWindow','stypeId','alive\x20battlers\x20not\x20user','jsOneForOne','findIndex','clearOnceParallelInterpreters','skill','setGuard','attackTimesAdd','battleInjectAni','VisuMZ_2_BattleSystemOTB','setBattlePortrait','BattleStartEvent','_effectDuration','updateCommandNameWindow','fillRect','waitForAnimation','EXCLAMATION','left','795psJoot','displayEvasion','ActSeq_Mechanics_RemoveBuffDebuff','getStypeIdWithName','jsAccuracyAsTarget','Window_BattleLog_displayActionResults','skillTypes','cancelActorInput','clearForcedGameTroopSettingsBattleCore','CmdIconAutoBattle','arRedRate','VisuMZ_2_BattleSystemCTB','Scene_Battle_partyCommandWindowRect','updateSpin','createHpGaugeSprite','isForOpponent','checkExtendTroopCompatibility','Scene_Battle_selectPreviousCommand','FollowTurn','ShakeFlinchDuration','Window_BattleLog_performCollapse','isQueueOptionsMenu','_enemy','ARRAYFUNC','notFocusValid','WaitForSkew','VisuMZ_2_BattleSystemSTB','HelpAutoBattle','addAutoBattleCommands','isForAnyone','_enemyWindow','BattleManager_startInput','pushBaseLine','sliceMin','needsSelectionBattleCore','Enemy-%1-%2','ConvertParams','activate','Status\x20is\x20currently\x20normal.','_battleCoreBattleStartEvent','_enemyMultiTargetWindow','SETTINGS','okButtonText','not\x20focus','drawEnemyBattler','_dimmerSprite','_updateClientArea','ActSeq_Mechanics_EmulateSkillCost','performAction','Game_BattlerBase_meetsUsableItemConditions','STR','autoBattleAtStart','statusWindowRectBorderStyle','Scene_Battle_createActorCommandWindow','dying','NextTurn','buff','_totalDamage','softDamageCap','forceAction','clearBattlerMotionTrailData','ActSeq_Horror_NoiseCreate','_scene','turnOrderChangeOTB','_duration','displayActionResults','setFrame','isStateResist','ActSeq_Impact_ZoomBlurTargetCenter','increaseTotal','processTurn','BattleManager_startBattle','_lastRegenFrameCount','index','hardDamageCap','Window_BattleActor_show','Sprite_Actor_updateFrame','_reflectionTarget','smooth','_escapeRatio','performMoveToTargets','basicGaugesY','Actor-%1-%2','displayFailure','extraHeight','Scene_Battle_stop','inputtingAction','process_VisuMZ_BattleCore_BaseTroops','Window_BattleLog_performReflection','sleep','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','_skillWindow','skills','totalHealFmt','Opacity','isForAliveFriendBattleCore','boxHeight','makeDamageValue','updateStateSpriteBattleCore','_skillIDs','selectAllEnemies','CmdIconEscape','_targetDamage','WaitForFloat','ActSeq_Grid_AddTriggerToNode','Sprite_Actor_update','ActSeq_Zoom_Scale','Scene_Battle_onEnemyOk','_endingBattle','updateWeather','Sprite_AnimationMV_updatePosition','JS\x20%1START\x20BATTLE','PostEndActionJS','getItemDamageAmountLabelOriginal','_showWeapon','loadOtherActorImages','USER-DEFINED\x201','performMoveToPoint','ActSeq_Motion_WaitMotionFrame','isForAnyoneFocusOpponents','_shakeFlinchDuration','isBattleTest','inHomePosition','actionsFmt','playReflection','excludeListing','debuffAdd','ApplyImmortal','setLastBattleSkill','updateScale','unshift','updateShadow','_commonEventKey','DestinationJS','_actorCommandWindow','Targets1','ShowMpDmg','svActor','_battleCoreNoElement','getReturnWindow','StyleOFF','Scene_Battle_itemWindowRect','Scene_Battle_updateStatusWindowPosition','list','Victory','silentHomeMove','missile','_targetY','windowAreaHeight','makeTargets','isBorderStylePortraitShown','faceHeight','BattleManager_onEncounter','helpWindowRect','processAbort','tpbCommandFight','CreateActionSequenceTargets','resetCounter','Game_BattlerBase_canGuard','SkewY','PostDamage%1JS','JS\x20BATTLE\x20DEFEAT','VisuMZ_3_VisualCutinEffect','extendTroopMembers','retreat','_buttonText','ActSeq_Set_SetupAction','getBattlePortraitOffsetY','BindCommonEventKeysForObj','action','ActSeq_Motion_PerformAction','visible','aspect','_inputting','ShowCosts','VisuMZ_4_BreakShields','_endBattle','addOptionsCommand','updateGrow','code','_effectType','tone','VisuMZ_1_MainMenuCore','_forcedHomeY','_svBattlerSprite','ActorCmd','drawItemActorSvBattler','inputting','updateShadowBattleCore','_partyCommandWindow','PostEndTurnJS','BattleAI','optDisplayTp','_shadowScaleX','stateRate','canAddSkillCommand','removeCurrentAction','USER-DEFINED\x205','includes','_partyWindow','isFightCommandEnabled','JS\x20%1END\x20BATTLE','Game_Action_isForOpponent','startAction','dragonbonesData','disarmHpLifeSteal','View\x20battle\x20member\x20status.','CriticalDmgFlat','getAttackWeaponAnimationId','_lastPluginCommandInterpreter','setupBattleCoreData','onEnemyOk','playBattleVoice','Pre','characterIndex','HpGaugeOffsetY','Targets2','_playTestFastMode','actor%1-portrait','_lastHpDamage','getNextSubject','VariableDmg','needsInputWindowChange','Game_Party_removeActor','damagePopupOffsetX','origin','ActSeq_Grid_TraverseToNode','SKILLS','requestFauxAnimation','VisuMZ_2_PartySystem','WaitForAnimation','setEventCallback','Parse_Notetags_TraitObjects','Sprite_Battler_updateMain','createActionSequenceProjectile','currentValue','FlinchDistanceX','performCollapse','Sprite_Actor_moveToStartPosition','initBattleCore','addState','ActSeq_Movement_WaitForOpacity','Game_BattlerBase_param','children','ActSeq_Camera_Offset','getDragonbones','fittingHeight','isForNotUser','Wave','Game_Battler_performMiss','UNTITLED','isTimeActive','executeDamage','clearActiveWeaponSet','AnimationID','criticalDmgRate','Scene_Battle_createCancelButton','context','svbattler','BattleManager_selectNextCommand','flashColor','visualHpGauge','PreApplyAsTargetJS','Window_BattleLog_displayCurrentState','_opacityDuration','_floatWholeDuration','_immortal','onMoveEnd','log','Post','performAttackSlot','makeAutoBattleActions','Game_Map_setupBattleback','_battleBalloonSprites','battleSpriteSkew','OffsetX','isGuard','setupDamagePopup','adjustPosition_ScaleUp','refreshDimmerBitmap','useDigitGrouping','Scene_Battle_createAllWindows_ComboWindow','flipVisualCutinVert','battleAngle','_frontAttachmentSprite','_indent','NameAttachStateIcon','HITTYPE_CERTAIN','freezeMotion','VariableHeal','bgType','_handlers','enemyMpGaugeRate','moveBattlerDistance','isBTB','Game_Action_updateLastTarget','apply','options','cancelLifeSteal','_surprise','ParseArmorNotetags','Exploited','processPostBattleCommonEvents','undecided','buffValueFmt','drawBackgroundRect','MUSICNOTE','setupMotion','fadeShiftY','alive\x20friends','isBattleSys','deactivate','ShowSubstituteWait','isGuardLifeSteal','isSpinning','Sprite_Enemy_updateCollapse','setActiveWeaponSlot','arRedFlat','PreStartBattleJS','EnemyOffsetY','doesPageHaveOnceParallelStart','updateBorderStyle','DefaultStyle','alive\x20enemies\x20not\x20user','_shakeFlinchPower','graphicType','updatePosition','removeHorrorEffect','_armorPenetration','MUSIC','front\x20base','damageRate','_lastEnemy','BattleLayout','ActSeq_Animation_BalloonAnimation','Window_BattleLog_performEvasion','isDisplayEmergedEnemies','itemEffectAddNormalState','ActSeq_Mechanics_PtbAlterCost','autoMeleeSingleTargetActionSet','isInputting','trim','getMenuImage','getItemDamageAmountLabelBattleCore','mainSpriteHeight','addSingleSkillCommands','performTpbActiveCheckSwitch','mpHealingFmt','Game_Battler_performDamage','portraitFilename','Game_Battler_forceAction','ActSeq_Grid_ClearPassiveStatesFromNode','processExtendTroopMembers','isForAll','isActiveTpb','ActSeq_Mechanics_EtbAction','MAT','hpDamageFmt','effect','battleback2Name','_opacityWholeDuration','createMultiTargetWindows','AsTarget','CommandAddStatus','turns','jsAccuracyAsUser','_requestRefresh','FlinchDistanceY','NameOffsetY','update','PreStartTurnJS','indexOf','ShowFacesListStyle','_statesWindow','_attackAnimationId','ActSeq_Movement_Skew','#%1','updateOpacity','CmdIconItem','ScaleX','bitmapHeight','dead\x20friends','enemyId','updateOnceParallelInterpreters','DamageFlat','setBattleImpactTimeScale','bottom','MultiTarget','WaitCount','EndBattlePopups','FlashDuration','applyGlobalCommonEventNotetags','stepBack','sliceMax','ActSeq_Projectile_Animation','alterType','VisuMZ_2_BattleSystemBTB','MOTIONS','setValue','ShowCritical','retrieveBattleBalloon','_drawTextOutline','ActSeq_Movement_WaitForScale','isIncludedInEnemyWindow','isAnyoneMoving','changeTextColor','setItem','Point','Scene_Options_maxCommands','addMeleeReturnActionSet','ActSeq_BattleLog_PushBaseLine','CustomFontFace','startPartyCommandSelection','positionOffsetY','MaxLines','itemRect','_targets','PARTY','StyleON','callNextMethod','LIGHT','ActionEffect','Sprite_Battler_damageOffsetY','Class-%1-%2','okTargetSelectionVisibility','ActSeq_Animation_AttackAnimation2','BattleManager_inputtingAction','getConfigValue','removeAnimationFromContainer','putActiveBattlerOnTop','abnormal','_makeCursorAlpha','ActorOffsetX','ShowAddedDebuff','_weaponSprite','_motionType','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','updateStateSprite','svActorVertCells','partyCommandWindowRectXPStyle','moveBattlerToPoint','gradientFillRect','clearBattleCoreData','result','_eventId','autoBattleStart','stepForward','forceSelect','Window_BattleStatus_drawItemImage','charged','currentAction','isSkill','process_VisuMZ_BattleCore_Failsafes','moveBattlerHomeToPoint','addBattlerAspect','GetActionSequenceSpecialTarget','Game_BattlerBase_canAttack','showHelpWindow','_tpbSceneChangeCacheActor','+%1','fight','_updateColorFilter','drawDebuffs','getSpecificBattlerKeyTarget','drawActorName','updateBattlebackBitmap1','hpDamage','Game_Enemy_setup','getBattlerFromKey','Variable','ActSeq_Animation_PlayAtCoordinate','isOpponent','opponentsUnit','drawIcon','isBattlerFlipped','makeActionListAutoAttack','setupMotionBlurImpactFilter','DualWield','addAnimationSpriteToContainer','ActSeq_Impact_Desaturate','Game_Action_itemTargetCandidates','Sprite_Enemy_updateBossCollapse','command301','join','SmoothImage','ActSeq_Movement_WaitForMovement','meetsUsableItemConditions','updateMain','guardMpLifeSteal','Scene_Battle_selectNextCommand','drawItemImagePortraitStyle','isTurnBased','battleInjectPrep','isSideButtonLayout','checkSubstitute','negativeHpLifeSteal','commandAutoBattle','ActSeq_Movement_FacePoint','_deathStateApplied','makeStateHelpText','_angleRevertOnFinish','changeAtbChargeTime','setStateTurns','PerformAction','ShowPortraitsBorderStyle','angleDuration','Game_Actor_makeActionList','onJumpEnd','_targetFloatHeight','BattleManager_endBattle','NameAlwaysSelectOnly','gaugeRate','ActSeq_Impact_Negative','damage','applyResultSwitches','_animationCount','Game_Action_isForAliveFriend','sort','\x5cI[%2]\x5cC[16]%1\x5cC[0]','CombatLogIcon','VariableID','DamageType%1','terminate','WaitComplete','Actor','ActionItemMsg','_defeatedEnemies','jsScaleDown','setEnemyWindowMode','damagePopupOffsetY','lifeSteaItem','addText','setBattleSkew','makeStateName','Strength','animationBaseDelay','AspectNameFmt','drawActorGraphic','addSkillTypeCommand','wtypeId','Name','PRE-','displayTpDamage','WaitForMovement','BattleSystemBTB','getBattlePortrait','_preBattleCommonEvent','100%','performAttack','Override','setupNegativeImpactFilter','ActSeq_Mechanics_FtbAction','performMagicEvasion','GuardFormulaJS','enemyShowParametersIfDefeated','Parse_Notetags_HelpDescription','_flashDuration','normalColor','processBattleBalloonRequests','aliveMembers','onEscapeSuccess','_enemyNameContainer','removeDamageSprite','NOTE','preemptive','loadBattleback1','Window_BattleActor_processTouch','COMBAT\x20LOG','_targetGrowX','cameraClamp','EscapeFailureJS','HelpFight','_cursorSprite','positionOffsetX','removeOnceParallelInterpreter','getAspectData','IconSet','parallaxScrollYinvertEnemy','getItemDamageAmountTextBattleCore','applyArmorModifiers','createAllWindows','forceMotion','Sprite_Gauge_smoothness','updateTargetPosition','ActSeq_Mechanics_EmulateAttackEffect','drawItemBackground','_battleCoreAddedElements','lukEffectRate','ActSeq_Mechanics_ActiveChainInputDisable','NUM','Game_Temp_initialize','CheckMapBattleEventValid','createJS','_states','HpGaugeOffsetX','CalcEscapeRatioJS','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','gainCurrentActionsFTB','showNormalAnimation','moveToStartPositionBattleCore','textSizeEx','substitute','VisuMZ_3_SideviewBattleUI','split','ActSeq_Animation_ItemAnimation','parallaxHueEnemyModifier','default','updateAction','create','autoBattleStyle','_tempBattler','registerCommand','setActorHome','ActSeq_Angle_WaitForAngle','setupBattleCore','isAnyoneSpinning','updateCancel','updateJump','statusTextAutoBattleStyle','overworldBattleback2Name','_wtypeIDs','criticalHitFlat','BattleVictoryJS','processCancel','AGI','createInnerSprite','ExtDisplayedParams','checkAutoCustomActionSequenceNotetagEffect','mpDamage','svBattlerAnchorY','changeInputWindow','updateSelectionEffect','VisuMZ_2_WeaponSwapSystem','startInBattleStatus','_blendColor','value2','itemHit','CommandWidth','_tpbChargeTime','Scene_Battle_createPartyCommandWindowIBS','startTurn','BravePoints','maxCommands','updateDuration','makeTurnsText','createBattleFieldContainer','isOTB','repositionCancelButtonBorderStyle','displayHpDamage','%1StartBattleJS','motionIdle','WaitForEntrance','BattleManager_checkBattleEnd','VisuMZ_4_CombatLog','battleFloat','getBattlePortraitOffsetX','svActorHorzCells','_baseLineStack','updateBattlebackBitmap2','NameLegacy','compareBattlerSprites','dead\x20enemies','PostDamageJS','CmdStyle','icons','ActionSkillMsg2','Scene_Battle_createAllWindowsIBS','addedStateObjects','tpbActorSwitchConditionsMet','_selectionEffectCount','compareEnemySprite','autoBattleUseSkills','frontview_ui','updatePhase','isTriggered','_targetX','format','expRate','isImmortal','_waitMode','Window_BattleLog_performActionEnd','updateStatusWindowPosition','createEnemyNameContainer','ActSeq_Grid_ActionAnimationAtNode','isShownOnBattlePortrait','updateBitmap','ActSeq_Mechanics_DamagePopup','ActionEndUpdate','setBalloonPose','_performDamageMotion','Game_Battler_onBattleStart','isChangingOpacity','loadSvEnemy','flipVisualCutinHorz','createPartyCommandWindow','drawText','redrawForGaugeRate','DamageRate','alive\x20opponents\x20not\x20target','getStateDisplay','SkillsStatesCore','ActSeq_Movement_BattleStep','StatusWindowSelectableBackHide','updateTargetValue','ActSeq_Mechanics_EnemyEscape','CriticalHitRate','drawDarkRect','playSystemSound','_homeEasing','Game_Action_isForRandom','_opacityEasing','moveToStartPosition','_lastActor','ActSeq_Movement_MoveToJsPoint','_stypeIDs','PreApplyJS','isMVAnimation','makeTargetsBattleCore','finishActionSet','drawBuffs','ActSeq_Movement_WaitForJump','evalDamageFormulaBattleCore','isRepeated','motionType','createSeparateDamagePopups','initVisibility','commandNameWindowDrawBackground','CreateCommonEventKeys','isForOneBattleCore','TpGaugeOffsetX','Scene_Battle_logWindowRect','targetBattlerContainerOpacity','CmdTextAutoBattle','makeTargetSprites','cancelMpLifeSteal','selectNextCommand','BattleEndEvent','currentSymbol','offsetX','executeMpDamage','WeaponTypeID','_logWindow','allIcons','cameraOffsetDuration','isDrain','isDamagePopupRequested','alterCost','Game_Action_setAttack','linkSprite','isGuardWaiting','dimColor1','startGrow','isSkewing','playEnemyDamage','Amp','setup','_pagedownButton','currentClass','ActSeq_Set_WholeActionSet','performCounter','MotionAni','displayCurrentState','_damagePopupArray','unchanged','checkShowHideSwitchNotetags','%1EndActionJS','Game_Action_numRepeats','ActSeq_Movement_FaceTarget','_currentActor','cancelButtonText','onEncounter','_aspectData','gainTp','2415788sbeEil','portraitFlipVert','addShowHpGaugeCommand','ActSeq_BattleLog_AddText','isAnyBattleBalloonPlaying','isBreakStunned','dead\x20battlers','equips','onBattleStartOnceParallels','_targetOpacity','EFFECT_COMMON_EVENT','pagedown','_backAttachmentSprite','regionId','LUK','ShowRemovedBuff','performRecovery','ShowRemovedState','priority','ALL_ENEMIES','createBattleFieldBattleCore','isSTB','clear','gaugeBackColor','battleDisplayText','Scene_Battle_createPartyCommandWindow','bitmapWidth','getHardDamageCap','initMembers','ActSeq_BattleLog_UI','Scale','svBattlerShadowVisible','canAttack','removeAnimation','BreakShields','return\x200','applyItem','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','drawParamData','ActionAnimation','isAffectedByBreakShield','StatusWindow_DrawJS','makeTargetsBattleCoreJS','auto','ParseClassNotetags','collapse','_updateFilterArea','actorCommandEscape','_targetIndex','MotionFrameWait','ActSeq_Cutin_WaitForExit','AutoBattleOK','VisuMZ_3_ActSeqProjectiles','globalAlpha','endBattle','_actor','playOkSound','select','Game_Party_addActor','_forActor','ShuffleArray','isActor','StyleName','setAttack','_forcing','updatePointAnimations','isGrowing','addBattlerBuffsDebuffs','updateShadowPosition','_animation','updateActors','setBattleCameraOffset','createInnerPortrait','setLastPluginCommandInterpreter','ActSeq_Movement_MoveToPoint','Game_Action_setGuard','drawTurnsRemaining','ActorJS','Mirror','Window_BattleEnemy_show','battlerName','nameY','startMotion','hpAffected','commandNameWindowDrawText','ActSeq_Mechanics_BreakShieldChange','pattern','performFlinch','callOkHandler','_tpbState','fadeShiftX','Mechanics','isSceneBattle','prev\x20target','adjustWeaponSpriteOffset','find','refreshRequest','isBorderPortraitSpriteVisible','displayChangedBuffs','hasStaticSvBattler','pauseInjectAnimation','scrollTo','isTpbReady','adjustFlippedBattlefield','changeAtbCastTime','Window_BattleStatus_initialize','AllowRandomSpeed','type','shift','isMeleeMultiTargetAction','commandNameWindowCenter','minimumStayDuration','ActSeq_Mechanics_Multipliers','ActSeq_Mechanics_StateTurnsChangeTo','Window_BattleLog_performAction','ResetOffset','canEscape','updateHpGaugePosition','setTroopPage','updateAttachedSprites','_padding','resizeWindowBorderStyle','removeBattleBalloon','VisualCutinEffect','refreshActorPortrait','getHalfActionsPTB','updateCounter','_frame','drawSkillCost','%1StartTurnJS','ActSeq_Mechanics_CtbOrder','_enemySprites','increaseHits','createBattleBalloon','loadSvActor','selectAll','debuffColor','filterArea','isCancelled','MotionSpeed','ActSeq_BattleLog_DisplayAction','BattleManager_updatePhase','Scene_ItemBase_applyItem','loadBitmap','PopupOffsetX','animation','casting','_buffTurns','ActSeq_Camera_FocusPoint','skillItemWindowRectBorderStyle','ActSeq_ChangeAngle','DamageStyleList','onBattleEndBattleCore','frameDelay','damageContainer','_enemyID','gaugeLineHeight','Window_BattleLog_displayEvasion','refreshCursor','spriteId','JS\x20%1REGENERATE','attackSkillId','FvAniCenterScreen','updateEffectsContainer','sortDamageSprites','CalcEscapeRaiseJS','actorCommandAutoBattle','TRAIT_PARAM','IconStypeNorm','ANGLE','BattleManager_invokeCounterAttack','paramValueByName','command119','createStateSprite','isRightInputMode','customFontFace','close','_multipliers','setBattler','ActSeq_Cutin_WaitForEntrance','ActSeqImpact','createMiss','JS\x20%1END\x20ACTION','placeActorName','vertCells','GroupDigits','helpAreaHeight','adjustPosition','setSvBattlerSprite','ParseSkillNotetags','_flinched','isForAnyoneFocusFriends','BG_TYPE','_active','%1▲','worldTransform','battleVoices','createChildSprite','Game_Interpreter_command301','ActionEnd','exit','Turns','HP_Rate','hitsHealFmt','VisuMZ_3_BoostAction','isUndecided','removeBuffsAuto','Game_Action_executeHpDamage','hue','addItemCommand','ext','_borderPortraitDuration','AggroControlSystem','AddOption','svBattlerName','JS\x20%1START\x20ACTION','JS\x20%1DAMAGE\x20%2','_flipScaleX','MeleeDistance','CoreEngine','displayBuffs','normal','pageup','buffNameFmt','isAlwaysHidden','_performActionEnd','_hue','PostStartTurnJS','prepareBorderActor','_pageupButton','updateBattlerContainer','numberFontFace','isAlwaysVisible','AspectColor','VisuMZ_2_DragonbonesUnion','anchorY','statesWindowRect','ActSeq_Animation_ChangeBattlePortrait','USER-DEFINED\x203','isOpen','invokeMagicReflection','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','ANTI_TINT_UI','showAnimation','addLoadListener','FvAniEachTarget','enemyHiddenParameter','addExtendedTroopMembers','_growX','isPhysical','itemEffectRecoverHp','NameDamageVisibility','spell','ParseItemNotetags','message2','selectAllActors','hitType','guard','walk','FlinchDuration','createEnemySprite','autoMeleeMultiTargetActionSet','ActSeq_Grid_AnimationIDAtNode','_actionInputIndex','applySoftDamageCap','hasBeenDefeatedBefore','displayReflection','padding','isAtbCastingState','text','CriticalHitMultiplier','battleGrow','PrioritySortActive','ResetFocus','dead','drawEnemyName','bitmap','_spriteset','partyCommandWindowRect','drawActorLevel','createActorCommandWindow','changeCtbCastTime','autoRemovalTiming','isClicked','weapons','Enable','targetsForFriends','parent','setWaitMode','EasingType','ArPenRate','isVisualHpGaugeDisplayed','PostStartBattleJS','adjustPosition_ScaleDown','pages','FaceAway','critical','pointY','Window_BattleEnemy_initialize','battleCommandIcon','random','createMainSprite','WaitCount1','nextActor','setBlendColor','portrait','shadow','_battleBalloonQueue','BindCommonEventKeysForGroup','hasSkill','changeWeather','updateCancelButton','evade','FocusY','isOnCurrentMap','battlerSmoothImage','currentExt','WaitForProjectile','ActSeq_Mechanics_WaitForEffect','_updateTargetValue','_canLose','attackAnimationId1','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','helpWindowRectBorderStyle','<CENTER>%1','Sprite_Battler_startMove','magicReflection','Width','updateShadowVisibility','drawActorClass','processActorCommandCancelTPB','getDamageStyle','isForFriend','callOptions','HelpStatus','ActSeq_Grid_MoveTargetsInDirection','ShowMissEvasion','_enemies','addNewState','gainHp','all\x20enemies','Sprite_Enemy_createStateIconSprite','VisuMZ_2_BattleSystemETB','VisuMZ_3_ActSeqCamera','EnemyOffsetX','updateShakeFlinch','_cacheTextWidth','open','Targets','isValid','refreshStatusWindow','ActSeq_ChangeSkew','drawItem','isAtbChargingState','numTargets','showPortraits','Sprite_Actor_initMembers','VisuMZ_1_MessageCore','commandStyleCheck','_svBattlerData'];_0x536b=function(){return _0x463494;};return _0x536b();}Window_DamageCounter[_0x320868(0x5bb)]['increaseHits']=function(_0x5c45fd){const _0x274ee8=_0x320868;this['_targetHits']+=Math[_0x274ee8(0xa8c)](_0x5c45fd);const _0x3cd57a=Window_DamageCounter['SETTINGS'];this[_0x274ee8(0x356)]=_0x3cd57a[_0x274ee8(0x88f)],this[_0x274ee8(0xace)]>=_0x3cd57a[_0x274ee8(0x4bc)]&&(this[_0x274ee8(0x26a)]=_0x3cd57a['minimumStayDuration']);};var $comboWindowIncreaseHits=function(_0x4948bb){const _0x1696ed=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x175db0=SceneManager[_0x1696ed(0x64a)]['_damageCounterWindow'];if(_0x175db0)_0x175db0[_0x1696ed(0x995)](_0x4948bb);};function _0x3e02(_0x57b383,_0x2d0aa0){const _0x536b26=_0x536b();return _0x3e02=function(_0x3e02e8,_0x3129fb){_0x3e02e8=_0x3e02e8-0x11d;let _0x56f295=_0x536b26[_0x3e02e8];return _0x56f295;},_0x3e02(_0x57b383,_0x2d0aa0);}Window_DamageCounter['prototype'][_0x320868(0x651)]=function(_0xb336ec){const _0x6b240=_0x320868;this['_targetDamage']+=Math[_0x6b240(0xa8c)](_0xb336ec);const _0x2e664a=Window_DamageCounter[_0x6b240(0x635)];this[_0x6b240(0x356)]=_0x2e664a['updateDuration'],this['_targetHits']>=_0x2e664a['minimumHits']&&(this[_0x6b240(0x26a)]=_0x2e664a[_0x6b240(0x980)]);};var $comboWindowIncreaseDamage=function(_0x131823){const _0x3413f7=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0xf8c718=SceneManager[_0x3413f7(0x64a)][_0x3413f7(0x4a1)];if(_0xf8c718)_0xf8c718[_0x3413f7(0x651)](_0x131823);},$comboWindowIncreaseHealing=function(_0x13e89c){const _0x20ff23=_0x320868;if(!SceneManager['isSceneBattle']())return;const _0x1f1a89=SceneManager[_0x20ff23(0x64a)][_0x20ff23(0x4a1)];if(_0x1f1a89)_0x1f1a89[_0x20ff23(0x651)](-_0x13e89c);};VisuMZ[_0x320868(0x5c8)][_0x320868(0x725)]=Scene_Battle[_0x320868(0x5bb)][_0x320868(0x850)],Scene_Battle[_0x320868(0x5bb)]['createAllWindows']=function(){const _0x5e2c49=_0x320868;this[_0x5e2c49(0x518)](),VisuMZ[_0x5e2c49(0x5c8)][_0x5e2c49(0x725)][_0x5e2c49(0x5a6)](this);},Scene_Battle['prototype'][_0x320868(0x518)]=function(){const _0x180aa9=_0x320868;if(!Window_DamageCounter[_0x180aa9(0x635)]['enabled'])return;const _0x5c8ea5=this['damageCounterWindowRect'](),_0x5a6c19=new Window_DamageCounter(_0x5c8ea5);this[_0x180aa9(0x197)](_0x5a6c19),this[_0x180aa9(0x4a1)]=_0x5a6c19;},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x4dc)]=function(){const _0x40a723=_0x320868;if(VisuMZ['BattleCore'][_0x40a723(0x1d7)][_0x40a723(0xb75)][_0x40a723(0x247)])return VisuMZ['BattleCore'][_0x40a723(0x1d7)]['ComboWindow'][_0x40a723(0x247)][_0x40a723(0x5a6)](this);const _0x5d3440=Math[_0x40a723(0x5e5)](Graphics[_0x40a723(0x529)]/0x4),_0xbc3753=this['calcWindowHeight'](0x2,!![]),_0x709a61=0x0+this[_0x40a723(0x2e2)](),_0x2dcd42=Math['round'](Graphics[_0x40a723(0x66c)]*0x1/0x3)+this['comboWindowOffsetY']();return new Rectangle(_0x709a61,_0x2dcd42,_0x5d3440,_0xbc3753);},Scene_Battle[_0x320868(0x5bb)][_0x320868(0x2e2)]=function(){const _0x33bf05=_0x320868;return Window_DamageCounter[_0x33bf05(0x635)][_0x33bf05(0x849)];},Scene_Battle[_0x320868(0x5bb)][_0x320868(0xafe)]=function(){const _0x3dd0be=_0x320868;return Window_DamageCounter[_0x3dd0be(0x635)][_0x3dd0be(0x7a9)];},Window_DamageCounter[_0x320868(0x5bb)]['update']=function(){const _0x4b522f=_0x320868;Window_Base[_0x4b522f(0x5bb)][_0x4b522f(0x77d)][_0x4b522f(0x5a6)](this),this[_0x4b522f(0x98f)](),this[_0x4b522f(0x785)]();},Window_DamageCounter['prototype'][_0x320868(0x98f)]=function(){const _0x2041a2=_0x320868;if(this[_0x2041a2(0x356)]<=0x0)return;const _0x3344c5=this['_updateDuration'];this[_0x2041a2(0x50d)]=this[_0x2041a2(0xace)],this[_0x2041a2(0x645)]=(this[_0x2041a2(0x645)]*(_0x3344c5-0x1)+this['_targetDamage'])/_0x3344c5,this[_0x2041a2(0x356)]--,this[_0x2041a2(0x356)]<=0x0&&(this[_0x2041a2(0x50d)]=this[_0x2041a2(0xace)],this['_totalDamage']=this[_0x2041a2(0x672)]),this[_0x2041a2(0xbc2)]();},Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0x785)]=function(){const _0x474829=_0x320868,_0x294382=Window_DamageCounter['SETTINGS'],_0x5e24ce=this[_0x474829(0x38c)](),_0x4e4eb2=_0x294382['opacitySpeed']||0x1;if(_0x5e24ce&&this[_0x474829(0x1a9)]<0xff)this['contentsOpacity']+=_0x4e4eb2;else!_0x5e24ce&&this['contentsOpacity']>0x0&&(this[_0x474829(0x1a9)]-=_0x4e4eb2,this['x']+=_0x294382[_0x474829(0x96b)]||0x0,this['y']+=_0x294382[_0x474829(0x740)]||0x0);},Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0x38c)]=function(){const _0x5b4cd5=_0x320868,_0x3d801f=Window_DamageCounter[_0x5b4cd5(0x635)];if(this[_0x5b4cd5(0xace)]>=_0x3d801f['minimumHits'])return!![];if(this['_visibleDuration']-->0x0)return!![];return![];},VisuMZ['BattleCore'][_0x320868(0x15f)]=Game_Action[_0x320868(0x5bb)][_0x320868(0x2ea)],Game_Action[_0x320868(0x5bb)][_0x320868(0x2ea)]=function(_0x55deb5,_0x47bb6f){const _0x5c748a=_0x320868;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x47bb6f),VisuMZ['BattleCore'][_0x5c748a(0x15f)][_0x5c748a(0x5a6)](this,_0x55deb5,_0x47bb6f);},VisuMZ[_0x320868(0x5c8)][_0x320868(0xa9f)]=BattleManager[_0x320868(0x21f)],BattleManager['endAction']=function(){const _0x52801a=_0x320868;$comboWindowReset(),VisuMZ[_0x52801a(0x5c8)][_0x52801a(0xa9f)][_0x52801a(0x5a6)](this);},Window_DamageCounter[_0x320868(0x5bb)]['refresh']=function(){const _0x3ba500=_0x320868;this[_0x3ba500(0x2e5)]['clear'](),this['drawComboText'](),this['x']=this[_0x3ba500(0x8af)],this['y']=this['_targetY'];},Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0x4a3)]=function(){const _0x104517=_0x320868,_0x5869f3=Window_DamageCounter['SETTINGS'];return _0x5869f3[_0x104517(0x1f8)]||_0x104517(0x60b);},Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0x27f)]=function(){const _0x2124f1=_0x320868,_0x1d2ee9=Window_DamageCounter['SETTINGS'];let _0x5f2127=this[_0x2124f1(0x645)]>=0x0?_0x1d2ee9[_0x2124f1(0xb99)]:_0x1d2ee9[_0x2124f1(0x9dc)];return _0x5f2127[_0x2124f1(0x8b0)](Math['abs'](Math[_0x2124f1(0x5e5)](this['_totalHits'])));},Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0x177)]=function(){const _0x2dbb41=_0x320868,_0x3e6af9=Window_DamageCounter[_0x2dbb41(0x635)];let _0x43e59c=this[_0x2dbb41(0x645)]>=0x0?_0x3e6af9[_0x2dbb41(0x371)]:_0x3e6af9[_0x2dbb41(0x669)];return _0x43e59c[_0x2dbb41(0x8b0)](Math['abs'](Math[_0x2dbb41(0xa8c)](this['_totalDamage'])));},Window_DamageCounter[_0x320868(0x5bb)][_0x320868(0x23c)]=function(){const _0x3ef27a=_0x320868;if(VisuMZ[_0x3ef27a(0x5c8)][_0x3ef27a(0x1d7)]['ComboWindow']['ComboWindow_DrawJS'])return VisuMZ['BattleCore']['Settings']['ComboWindow'][_0x3ef27a(0x3cf)][_0x3ef27a(0x5a6)](this);let _0x473f6e=0x0,_0x568822=0x0;const _0x57e5eb=this[_0x3ef27a(0x27f)](),_0x5913b8=this[_0x3ef27a(0x864)](_0x57e5eb);if(this[_0x3ef27a(0x4a3)]()===_0x3ef27a(0x59d))_0x473f6e=this['innerWidth']-this[_0x3ef27a(0x4ae)]()-_0x5913b8[_0x3ef27a(0x529)];else this[_0x3ef27a(0x4a3)]()==='center'?_0x473f6e=Math[_0x3ef27a(0x5a8)]((this['innerWidth']-_0x5913b8[_0x3ef27a(0x529)])/0x2):_0x473f6e=this[_0x3ef27a(0x4ae)]();this['drawTextEx'](_0x57e5eb,_0x473f6e,_0x568822),_0x568822+=Math['ceil'](this['lineHeight']()*0x2/0x3);const _0x499541=this['damageText'](),_0x54e293=this[_0x3ef27a(0x864)](_0x499541);if(this['textAlignment']()===_0x3ef27a(0x59d))_0x473f6e=this[_0x3ef27a(0x489)]-this[_0x3ef27a(0x4ae)]()-_0x54e293[_0x3ef27a(0x529)];else this['textAlignment']()==='center'?_0x473f6e=Math[_0x3ef27a(0x5a8)]((this[_0x3ef27a(0x489)]-_0x54e293['width'])/0x2):_0x473f6e=this['itemPadding']();this['drawTextEx'](_0x499541,_0x473f6e,_0x568822);};function Window_InBattleStatus(){const _0x5e911b=_0x320868;this[_0x5e911b(0x136)](...arguments);}Window_InBattleStatus[_0x320868(0x5bb)]=Object[_0x320868(0x86c)](Window_StatusBase[_0x320868(0x5bb)]),Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xc58)]=Window_InBattleStatus,Window_InBattleStatus['SETTINGS']={'bgType':VisuMZ[_0x320868(0x5c8)]['Settings'][_0x320868(0x5b8)][_0x320868(0xa8d)]??0x0,'statusGraphic':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0x2bd)]??_0x320868(0xaf3),'statusHelpDesc':VisuMZ[_0x320868(0x5c8)]['Settings']['InBattleStatus'][_0x320868(0xa5f)]??_0x320868(0x6da),'pageButtons':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0x20c)]??!![],'pageButtonPosition':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)]['InBattleStatus'][_0x320868(0x5d7)]??_0x320868(0x60b),'pageOffsetX':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)]['pageOffsetX']??0x0,'pageOffsetY':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0xb39)]??0x0,'buffValueFmt':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0x73c)]??_0x320868(0x189),'debuffValueFmt':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)]['InBattleStatus'][_0x320868(0x282)]??_0x320868(0x441),'enemyStatus':VisuMZ[_0x320868(0x5c8)]['Settings']['InBattleStatus'][_0x320868(0x595)]??!![],'enemyShowLevel':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0x483)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0xa07)]??_0x320868(0x1ef),'enemyShowParametersAlways':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)]['enemyShowParametersAlways']??![],'enemyShowParametersIfBattleTest':VisuMZ['BattleCore'][_0x320868(0x1d7)]['InBattleStatus'][_0x320868(0x4db)]??!![],'enemyShowParametersIfDefeated':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0x5b8)]['enemyShowParametersIfDefeated']??!![]},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x136)]=function(_0x1260bc){const _0x4d70b0=_0x320868;Window_StatusBase[_0x4d70b0(0x5bb)][_0x4d70b0(0x136)]['call'](this,_0x1260bc),this['setBackgroundType'](Window_InBattleStatus[_0x4d70b0(0x635)][_0x4d70b0(0x72e)]),this[_0x4d70b0(0xa15)](),this[_0x4d70b0(0x5f9)](),this['createPageButtons']();},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x9c3)]=function(_0xef2b3e){const _0x185b9d=_0x320868;this[_0x185b9d(0x4be)]=_0xef2b3e,this[_0x185b9d(0xbc2)](),this['_statesWindow']&&this['_statesWindow'][_0x185b9d(0x9c3)](_0xef2b3e);},Window_InBattleStatus['prototype'][_0x320868(0xa6c)]=function(){const _0x28cca7=_0x320868;Window_StatusBase['prototype'][_0x28cca7(0xa6c)][_0x28cca7(0x5a6)](this);if(this[_0x28cca7(0x781)])this['_statesWindow'][_0x28cca7(0xa6c)]();this[_0x28cca7(0xb1b)](),Imported['VisuMZ_3_StateTooltips']&&SceneManager[_0x28cca7(0x4ad)](null);},Window_InBattleStatus['prototype'][_0x320868(0x9c1)]=function(){const _0xab8e9b=_0x320868;Window_StatusBase[_0xab8e9b(0x5bb)][_0xab8e9b(0x9c1)][_0xab8e9b(0x5a6)](this);if(this['_statesWindow'])this[_0xab8e9b(0x781)][_0xab8e9b(0x9c1)]();},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xaab)]=function(_0x1c33ca){const _0x4d6b4f=_0x320868;this[_0x4d6b4f(0xae3)]=_0x1c33ca;},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x697)]=function(){const _0x34a2ea=_0x320868;return this[_0x34a2ea(0xae3)]||SceneManager[_0x34a2ea(0x64a)][_0x34a2ea(0x6d3)];},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xc61)]=function(){const _0x1ab907=_0x320868;Window_StatusBase[_0x1ab907(0x5bb)][_0x1ab907(0xc61)][_0x1ab907(0x5a6)](this),this[_0x1ab907(0x67f)]();},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x67f)]=function(){const _0x4191b7=_0x320868;for(const _0x205250 of $gameParty[_0x4191b7(0xb0d)]()){if(!_0x205250)continue;_0x205250[_0x4191b7(0xafb)]()&&ImageManager[_0x4191b7(0x510)](_0x205250[_0x4191b7(0xafb)]()),_0x205250[_0x4191b7(0x961)]()&&ImageManager['loadSvActor'](_0x205250[_0x4191b7(0x961)]()),Imported[_0x4191b7(0x6c2)]&&_0x205250[_0x4191b7(0x762)]()&&ImageManager[_0x4191b7(0x505)](_0x205250[_0x4191b7(0x762)]());}},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xa15)]=function(){const _0x1b0f79=_0x320868;this[_0x1b0f79(0xc13)]=new Sprite(),this[_0x1b0f79(0xc13)][_0x1b0f79(0x540)]['x']=0.5,this[_0x1b0f79(0xc13)][_0x1b0f79(0x540)]['y']=0x1,this['addChild'](this[_0x1b0f79(0xc13)]);},Window_InBattleStatus['prototype'][_0x320868(0x5f9)]=function(){const _0x131af8=_0x320868,_0x2bfccd=this['statesWindowRect'](),_0x15547f=new Window_InBattleStatusStates(_0x2bfccd);this['addChild'](_0x15547f),_0x15547f[_0x131af8(0x5bf)](SceneManager[_0x131af8(0x64a)]['_helpWindow']),this[_0x131af8(0x781)]=_0x15547f;},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x9fd)]=function(){const _0x571361=_0x320868,_0x45dec4=Window_InBattleStatusStates[_0x571361(0x635)]['maxWidth'],_0x257da7=Math[_0x571361(0x24f)](_0x45dec4,Math['floor'](this[_0x571361(0x529)]/0x2)),_0xf1be8e=Graphics[_0x571361(0x23d)]>0x44c?this[_0x571361(0x351)]:this[_0x571361(0xbfa)]()*0x4+this[_0x571361(0xa1c)]*0x2,_0x3dd199=this[_0x571361(0x529)]-_0x257da7,_0x439882=this[_0x571361(0x351)]-_0xf1be8e;return new Rectangle(_0x3dd199,_0x439882,_0x257da7,_0xf1be8e);},Window_InBattleStatus['prototype'][_0x320868(0xae1)]=function(){const _0x50367b=_0x320868;if(!ConfigManager[_0x50367b(0xa8a)])return;if(!Window_InBattleStatus[_0x50367b(0x635)]['pageButtons'])return;this[_0x50367b(0x9f6)]=new Sprite_Button(_0x50367b(0x9ef)),this[_0x50367b(0x9f6)]['x']=this[_0x50367b(0xb47)]()+Window_InBattleStatus['SETTINGS']['pageOffsetX'],this[_0x50367b(0x9f6)]['y']=this[_0x50367b(0x575)]()+Window_InBattleStatus['SETTINGS']['pageOffsetY'];const _0xe3e45b=this['_pageupButton']['x']+this[_0x50367b(0x9f6)][_0x50367b(0x529)];this[_0x50367b(0x900)]=new Sprite_Button(_0x50367b(0x91c)),this[_0x50367b(0x900)]['x']=_0xe3e45b+0x4,this[_0x50367b(0x900)]['y']=this[_0x50367b(0x9f6)]['y'],this['addChild'](this['_pageupButton']),this[_0x50367b(0x4f0)](this['_pagedownButton']),this['_pageupButton']['setClickHandler'](this['previousActor'][_0x50367b(0x1cc)](this)),this['_pagedownButton'][_0x50367b(0x1af)](this['nextActor'][_0x50367b(0x1cc)](this));},Window_InBattleStatus['prototype'][_0x320868(0xb47)]=function(){const _0x664d69=_0x320868;if(Graphics[_0x664d69(0x23d)]>0x44c&&Graphics[_0x664d69(0x66c)]>0x2bc){if(Window_InBattleStatus[_0x664d69(0x635)]['pageButtonPosition']==='left'){let _0x409a9f=Math[_0x664d69(0x5e5)]((-this['x']-0x64)/0x2);if(_0x409a9f>=-0x64)_0x409a9f=this[_0x664d69(0xa1c)];return _0x409a9f;}else{const _0xca4cf0=Graphics[_0x664d69(0x23d)]-this['x']-this[_0x664d69(0x529)];let _0x5662a3=Math['floor']((_0xca4cf0-0x64)/0x2)+this[_0x664d69(0x529)];return _0x5662a3;}}else return this[_0x664d69(0x529)]-0x64-this[_0x664d69(0xa1c)]/0x2;},Window_InBattleStatus['prototype'][_0x320868(0x575)]=function(){const _0x71884e=_0x320868;return Graphics['boxWidth']>0x44c&&Graphics['boxHeight']>0x2bc?this[_0x71884e(0x351)]-0x30-this[_0x71884e(0xa1c)]:0x30+this[_0x71884e(0xa1c)];},Window_InBattleStatus[_0x320868(0x5bb)]['previousActor']=function(){const _0x4a7ada=_0x320868;let _0xf66f59=this['getBattleMembers']();if(_0xf66f59[_0x4a7ada(0x4c1)]<=0x1&&!Window_InBattleStatus[_0x4a7ada(0x635)][_0x4a7ada(0x595)])return;let _0x2536f2=_0xf66f59[_0x4a7ada(0x77f)](this[_0x4a7ada(0x4be)]);_0x2536f2--;_0x2536f2<0x0&&(Window_InBattleStatus[_0x4a7ada(0x635)][_0x4a7ada(0x595)]&&(_0xf66f59=this[_0x4a7ada(0x2c2)](!![])),_0x2536f2=_0xf66f59[_0x4a7ada(0x4c1)]-0x1);const _0x539256=_0xf66f59[_0x2536f2];this['setBattler'](_0x539256),SoundManager[_0x4a7ada(0x308)]();},Window_InBattleStatus[_0x320868(0x5bb)]['nextActor']=function(){const _0x2bcf4b=_0x320868;let _0x4335d0=this[_0x2bcf4b(0x2c2)]();if(_0x4335d0[_0x2bcf4b(0x4c1)]<=0x1&&!Window_InBattleStatus[_0x2bcf4b(0x635)]['enemyStatus'])return;let _0x301056=_0x4335d0[_0x2bcf4b(0x77f)](this[_0x2bcf4b(0x4be)]);_0x301056++;_0x301056>=_0x4335d0[_0x2bcf4b(0x4c1)]&&(Window_InBattleStatus[_0x2bcf4b(0x635)][_0x2bcf4b(0x595)]&&(_0x4335d0=this[_0x2bcf4b(0x2c2)](!![])),_0x301056=0x0);const _0x92ffae=_0x4335d0[_0x301056];this[_0x2bcf4b(0x9c3)](_0x92ffae),SoundManager[_0x2bcf4b(0x308)]();},Window_InBattleStatus[_0x320868(0x5bb)]['getBattleMembers']=function(_0x3c2673){const _0x3d1f0f=_0x320868;let _0x5e771c=[];const _0x2e76ed=_0x3c2673?this[_0x3d1f0f(0x4be)][_0x3d1f0f(0x7e4)]():this[_0x3d1f0f(0x4be)][_0x3d1f0f(0xc67)]();return _0x2e76ed===$gameParty?_0x5e771c=$gameParty[_0x3d1f0f(0x20a)]():_0x5e771c=$gameTroop[_0x3d1f0f(0x83b)](),_0x5e771c[_0x3d1f0f(0x236)](null);},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x77d)]=function(){const _0x2d4e6e=_0x320868;Window_Base[_0x2d4e6e(0x5bb)][_0x2d4e6e(0x77d)][_0x2d4e6e(0x5a6)](this),this[_0x2d4e6e(0x5aa)]();},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x5aa)]=function(){const _0x488101=_0x320868;if(this[_0x488101(0xaeb)]()){if(this[_0x488101(0x35a)]())return this['processCancel']();if(Input[_0x488101(0x8de)]('right'))return this[_0x488101(0xa40)]();if(Input[_0x488101(0x8de)]('left'))return this['previousActor']();}},SoundManager['playCursor']=function(){const _0x2ff814=_0x320868;this[_0x2ff814(0x8cf)](0x0);},Window_InBattleStatus['prototype']['isOpenAndActive']=function(){const _0x2d2de1=_0x320868;return this[_0x2d2de1(0xa00)]()&&this[_0x2d2de1(0x6b7)];},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x35a)]=function(){const _0x2acd77=_0x320868;if(Input[_0x2acd77(0x8ae)](_0x2acd77(0x383)))return!![];if(TouchInput['isCancelled']())return!![];return![];},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x87b)]=function(){const _0x3deb75=_0x320868;SoundManager[_0x3deb75(0xc64)](),this[_0x3deb75(0x743)](),this[_0x3deb75(0x781)]&&(this['_statesWindow']['deselect'](),this[_0x3deb75(0x781)][_0x3deb75(0x743)]()),SceneManager['_scene'][_0x3deb75(0x5ec)]();},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xb1b)]=function(){const _0x1f5f07=_0x320868;if(!this[_0x1f5f07(0x9f6)])return;if(!this[_0x1f5f07(0x900)])return;const _0x427257=$gameParty[_0x1f5f07(0x20a)]()[_0x1f5f07(0x4c1)]>0x0||Window_InBattleStatus[_0x1f5f07(0x635)][_0x1f5f07(0x595)];this[_0x1f5f07(0x9f6)][_0x1f5f07(0x6b7)]=_0x427257,this[_0x1f5f07(0x900)][_0x1f5f07(0x6b7)]=_0x427257;},Window_InBattleStatus[_0x320868(0x5bb)]['refresh']=function(){const _0x1b102f=_0x320868;Window_StatusBase[_0x1b102f(0x5bb)][_0x1b102f(0xbc2)]['call'](this);if(this[_0x1b102f(0xc13)])this[_0x1b102f(0xc13)]['hide']();this[_0x1b102f(0x2e5)][_0x1b102f(0x927)](),this['contentsBack'][_0x1b102f(0x927)]();if(!this[_0x1b102f(0x4be)])return;this[_0x1b102f(0xb90)]();},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xb90)]=function(){const _0x41f8d5=_0x320868;if(VisuMZ[_0x41f8d5(0x5c8)][_0x41f8d5(0x1d7)][_0x41f8d5(0x5b8)][_0x41f8d5(0x93a)])return VisuMZ[_0x41f8d5(0x5c8)][_0x41f8d5(0x1d7)]['InBattleStatus'][_0x41f8d5(0x93a)]['call'](this);{const _0x204125=this['colSpacing']()/0x2,_0x4b2518=ImageManager[_0x41f8d5(0x6a3)],_0x1f32c4=_0x4b2518/0x2-this['lineHeight']()*1.5;this[_0x41f8d5(0x825)](this['_battler'],_0x204125+0x1,0x0,ImageManager[_0x41f8d5(0xbe7)],_0x4b2518),this[_0x41f8d5(0xc12)](this[_0x41f8d5(0x4be)],_0x204125+0xb4,_0x1f32c4);}{let _0x484551=this[_0x41f8d5(0xaac)](),_0x20803e=0x0,_0x59cc97=Math[_0x41f8d5(0x5e5)](this[_0x41f8d5(0xaac)]()/0x2),_0x347341=0x0;const _0x5c977d=this['displayedParams']();let _0x2627ec=_0x20803e;const _0xb3d1db=this[_0x41f8d5(0x37e)]-ImageManager[_0x41f8d5(0x6a3)],_0x4473d4=Math['ceil'](_0x5c977d['length']/0x2)*this[_0x41f8d5(0xbfa)]();let _0x430943=Math['ceil']((_0xb3d1db-_0x4473d4)/0x2)+ImageManager['faceHeight'],_0x1a1a55=Math[_0x41f8d5(0x5a8)](_0x484551/0x2);this[_0x41f8d5(0x781)]['y']!==0x0&&(this[_0x41f8d5(0x781)]['y']=_0x430943);for(const _0x3a93be of _0x5c977d){this[_0x41f8d5(0x8ce)](_0x2627ec,_0x430943,_0x1a1a55,this['lineHeight']()),this['drawParamData'](_0x3a93be,_0x2627ec,_0x430943,_0x1a1a55),_0x347341++,_0x347341%0x2===0x0?(_0x2627ec=_0x20803e,_0x430943+=this[_0x41f8d5(0xbfa)]()):_0x2627ec=_0x59cc97;}}},Window_InBattleStatus['prototype'][_0x320868(0x751)]=function(){const _0x12c3bb=_0x320868;return VisuMZ[_0x12c3bb(0x5c8)]['Settings'][_0x12c3bb(0x5b8)][_0x12c3bb(0x2bd)];},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x825)]=function(_0x42ea72,_0x367848,_0x37f6a6,_0x22cafe,_0x531058){const _0x43c545=_0x320868;if(_0x42ea72[_0x43c545(0x94e)]())switch(this['graphicType']()){case _0x43c545(0x285):break;case _0x43c545(0x5bc):this[_0x43c545(0x526)](_0x42ea72,_0x367848,_0x37f6a6+0x1,_0x22cafe,_0x531058-0x2);break;case _0x43c545(0x70e):this[_0x43c545(0x6c6)](_0x42ea72,_0x367848,_0x37f6a6+0x1,_0x22cafe,_0x531058-0x2);break;default:this[_0x43c545(0xb3a)](_0x42ea72,_0x367848,_0x37f6a6,_0x22cafe,_0x531058);break;}else this[_0x43c545(0x638)](_0x42ea72,_0x367848,_0x37f6a6,_0x22cafe,_0x531058);},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xb3a)]=function(_0x5da540,_0x5b00aa,_0x22ca99,_0x49ff86,_0x1f1f20){const _0x41bb52=_0x320868;_0x49ff86=_0x49ff86||ImageManager[_0x41bb52(0xbe7)],_0x1f1f20=_0x1f1f20||ImageManager[_0x41bb52(0x6a3)];const _0x1eeb86=ImageManager[_0x41bb52(0xbe7)],_0x52bc48=_0x1f1f20-0x2,_0x1d2fb9=_0x5b00aa+Math[_0x41bb52(0x5a8)]((_0x49ff86-_0x1eeb86)/0x2);this['constructor']===Window_MenuStatus&&this['changePaintOpacity'](_0x5da540[_0x41bb52(0x4ea)]()),this[_0x41bb52(0xb28)](_0x5da540,_0x1d2fb9,_0x22ca99,_0x1eeb86,_0x52bc48),this[_0x41bb52(0x47d)](!![]);},Window_InBattleStatus[_0x320868(0x5bb)]['drawItemActorSprite']=function(_0x821e16,_0x2f759b,_0x14c63e,_0x3be854,_0x27ba61){const _0x492a8d=_0x320868;_0x3be854=_0x3be854||ImageManager[_0x492a8d(0xbe7)],_0x27ba61=_0x27ba61||ImageManager[_0x492a8d(0x6a3)];const _0x254df9=_0x821e16[_0x492a8d(0xafb)](),_0x446ba7=_0x821e16[_0x492a8d(0x6e2)](),_0x34b44b=ImageManager[_0x492a8d(0x510)](_0x254df9),_0x46e632=ImageManager[_0x492a8d(0x3b6)](_0x254df9),_0x44be2d=_0x34b44b[_0x492a8d(0x529)]/(_0x46e632?0x3:0xc),_0xcfcdc0=_0x34b44b[_0x492a8d(0x351)]/(_0x46e632?0x4:0x8),_0x2cc0c6=_0x3be854,_0x49fc4d=_0x27ba61-0x2,_0x5d95d8=_0x2f759b+Math['floor'](_0x2cc0c6/0x2),_0xf233bb=_0x14c63e+Math[_0x492a8d(0x5e5)]((_0x27ba61+_0xcfcdc0)/0x2);this[_0x492a8d(0xc58)]===Window_MenuStatus&&this['changePaintOpacity'](_0x821e16['isBattleMember']());const _0x38272c=Math[_0x492a8d(0x24f)](_0x3be854,_0x44be2d),_0x1757c4=Math[_0x492a8d(0x24f)](_0x27ba61,_0xcfcdc0),_0x3bec60=Math['floor'](_0x2f759b+Math[_0x492a8d(0x382)](_0x3be854-_0x44be2d,0x0)/0x2),_0x5df33d=Math[_0x492a8d(0x5a8)](_0x14c63e+Math[_0x492a8d(0x382)](_0x27ba61-_0xcfcdc0,0x0)/0x2),_0x7beab2=_0x46e632?0x0:_0x446ba7,_0x5a1591=(_0x7beab2%0x4*0x3+0x1)*_0x44be2d,_0x263cd1=Math[_0x492a8d(0x5a8)](_0x7beab2/0x4)*0x4*_0xcfcdc0;this[_0x492a8d(0x2e5)][_0x492a8d(0x3b8)](_0x34b44b,_0x5a1591,_0x263cd1,_0x38272c,_0x1757c4,_0x3bec60,_0x5df33d),this[_0x492a8d(0x47d)](!![]);},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x6c6)]=function(_0xcf26a8,_0x4e81f0,_0x34e348,_0x2f7033,_0x5a4814,_0x5d8603){const _0x5eb261=_0x320868;_0x2f7033=_0x2f7033||ImageManager[_0x5eb261(0xbe7)],_0x5a4814=_0x5a4814||ImageManager[_0x5eb261(0x6a3)];const _0xca5b0=ImageManager[_0x5eb261(0x997)](_0x5d8603?_0xcf26a8[_0x5eb261(0x9e7)]():_0xcf26a8[_0x5eb261(0x961)]()),_0x28a6b3=_0xca5b0[_0x5eb261(0x529)]/ImageManager[_0x5eb261(0x89c)],_0x4d10ce=_0xca5b0[_0x5eb261(0x351)]/ImageManager[_0x5eb261(0x7c2)],_0x2be612=_0x2f7033,_0x470273=_0x5a4814-0x2,_0x4190c4=_0x4e81f0+Math[_0x5eb261(0x5a8)](_0x2be612/0x2),_0x4feecf=_0x34e348+Math[_0x5eb261(0x5e5)]((_0x5a4814+_0x4d10ce)/0x2);this[_0x5eb261(0xc58)]===Window_MenuStatus&&this[_0x5eb261(0x47d)](_0xcf26a8[_0x5eb261(0x4ea)]());const _0x4c4004=_0xcf26a8['hasStaticSvBattler']&&_0xcf26a8[_0x5eb261(0x974)](),_0x169d5a=0x0,_0x3e6414=0x0,_0x5bc9a2=_0x4c4004?_0xca5b0[_0x5eb261(0x529)]:_0x28a6b3,_0xbddf86=_0x4c4004?_0xca5b0[_0x5eb261(0x351)]:_0x4d10ce,_0x73bf3c=Math[_0x5eb261(0x24f)](0x1,_0x2f7033/_0x5bc9a2,_0x5a4814/_0xbddf86),_0xc93ef7=_0x73bf3c*_0x5bc9a2,_0xa03328=_0x73bf3c*_0xbddf86,_0x3ffe0b=Math['floor'](_0x4e81f0+Math[_0x5eb261(0x382)](_0x2f7033-_0xc93ef7,0x0)/0x2),_0x3ffbea=Math['floor'](_0x34e348+Math[_0x5eb261(0x382)](_0x5a4814-_0xa03328,0x0)/0x2);this[_0x5eb261(0x2e5)]['blt'](_0xca5b0,_0x169d5a,_0x3e6414,_0x5bc9a2,_0xbddf86,_0x3ffe0b,_0x3ffbea,_0xc93ef7,_0xa03328),this[_0x5eb261(0x47d)](!![]);},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x638)]=function(_0x5befe0,_0x198f83,_0x3b98d2,_0x291536,_0x1a49e7){const _0x3e88fd=_0x320868;if(_0x5befe0[_0x3e88fd(0xb85)]()){this['drawItemActorSvBattler'](_0x5befe0,_0x198f83,_0x3b98d2+0x1,_0x291536,_0x1a49e7-0x2,!![]);return;}const _0x355cb5=_0x5befe0[_0x3e88fd(0x961)](),_0x52e9ae=$gameSystem['isSideView']()?ImageManager[_0x3e88fd(0x8c0)](_0x355cb5):ImageManager[_0x3e88fd(0x229)](_0x355cb5);_0x52e9ae[_0x3e88fd(0xa05)](this[_0x3e88fd(0xbb1)][_0x3e88fd(0x1cc)](this,_0x5befe0,_0x52e9ae,_0x198f83,_0x3b98d2,_0x291536,_0x1a49e7));},Window_InBattleStatus[_0x320868(0x5bb)]['processDrawEnemyBattler']=function(_0x2c6192,_0x2ba4d4,_0x5d9d6d,_0x4ec4e4,_0x4995cf,_0x2d0004){const _0x100d43=_0x320868;if(this[_0x100d43(0x4be)]!==_0x2c6192)return;this['_enemySprite'][_0x100d43(0xac0)](),this[_0x100d43(0xc13)][_0x100d43(0xa25)]=new Bitmap(_0x4995cf,_0x2d0004);const _0x4f0425=_0x4995cf,_0x7855d1=_0x2d0004,_0x581dc1=Math[_0x100d43(0x24f)](_0x4f0425,_0x7855d1),_0x3ddafe=this[_0x100d43(0xc13)][_0x100d43(0xa25)],_0x542eb5=Math[_0x100d43(0x24f)](0x1,_0x581dc1/_0x2ba4d4[_0x100d43(0x529)],_0x581dc1/_0x2ba4d4['height']),_0x15162b=_0x2ba4d4[_0x100d43(0x529)]*_0x542eb5,_0x2f0e65=_0x2ba4d4['height']*_0x542eb5,_0x486cf5=Math[_0x100d43(0xa8c)]((_0x4f0425-_0x15162b)/0x2),_0x4c4d2b=Math['round']((_0x7855d1-_0x2f0e65)/0x2);_0x3ddafe['blt'](_0x2ba4d4,0x0,0x0,_0x2ba4d4[_0x100d43(0x529)],_0x2ba4d4[_0x100d43(0x351)],_0x486cf5,_0x4c4d2b,_0x15162b,_0x2f0e65),this['_enemySprite'][_0x100d43(0x540)]['x']=0.5,this['_enemySprite'][_0x100d43(0x540)]['y']=0x1,this['_enemySprite']['x']=_0x5d9d6d+_0x4995cf/0x2+this['padding'],this[_0x100d43(0xc13)]['y']=_0x4ec4e4+_0x2d0004+this[_0x100d43(0xa1c)],this[_0x100d43(0xc13)]['setHue'](this['_battler']['battlerHue']());},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x7dc)]=function(_0x26fd87,_0x3a263a,_0x1a095c,_0x57ce1a){const _0x2cb086=_0x320868;if(_0x26fd87[_0x2cb086(0xb8b)]())_0x57ce1a=this[_0x2cb086(0x489)]-_0x3a263a;Window_StatusBase['prototype'][_0x2cb086(0x7dc)][_0x2cb086(0x5a6)](this,_0x26fd87,_0x3a263a,_0x1a095c,_0x57ce1a);},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xa5a)]=function(_0x576047,_0x113a41,_0x319d5f,_0x28629f){const _0xa3660f=_0x320868;if(!_0x576047[_0xa3660f(0x94e)]())return;Window_StatusBase[_0xa3660f(0x5bb)][_0xa3660f(0xa5a)][_0xa3660f(0x5a6)](this,_0x576047,_0x113a41,_0x319d5f,_0x28629f);},Window_InBattleStatus[_0x320868(0x5bb)]['drawActorLevel']=function(_0x5187dd,_0x546eae,_0x42c6ad){const _0x836c60=_0x320868;if(_0x5187dd[_0x836c60(0xb8b)]()&&!Window_InBattleStatus['SETTINGS'][_0x836c60(0x483)])return;Window_StatusBase[_0x836c60(0x5bb)][_0x836c60(0xa28)][_0x836c60(0x5a6)](this,_0x5187dd,_0x546eae,_0x42c6ad);},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xb54)]=function(_0x41ec34,_0x23f337,_0x3a8cf5,_0x3b83b9){const _0x17b352=_0x320868;_0x41ec34[_0x17b352(0x34e)]=!![],Window_StatusBase['prototype'][_0x17b352(0xb54)][_0x17b352(0x5a6)](this,_0x41ec34,_0x23f337,_0x3a8cf5,_0x3b83b9),_0x41ec34[_0x17b352(0x34e)]=undefined;},VisuMZ[_0x320868(0x5c8)]['Game_BattlerBase_allIconsIBS']=Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x8f2)],Game_BattlerBase[_0x320868(0x5bb)]['allIcons']=function(){const _0x4ef1b5=_0x320868;if(this['_hideAllIcons'])return[];return VisuMZ[_0x4ef1b5(0x5c8)][_0x4ef1b5(0x4b8)]['call'](this);},Window_InBattleStatus['prototype']['placeGauge']=function(_0x4527fd,_0x25d702,_0x44caf7,_0x2a5395){const _0x576886=_0x320868,_0x258f94=_0x576886(0x4a4)[_0x576886(0x8b0)](_0x4527fd[_0x576886(0x15e)](),_0x25d702);let _0x2573ff=![];if(_0x4527fd[_0x576886(0xb8b)]()){const _0x292105=Window_InBattleStatus[_0x576886(0x635)];if(_0x25d702==='hp'&&_0x292105[_0x576886(0xa8b)])_0x2573ff=!![];if(_0x25d702==='mp'&&_0x292105[_0x576886(0x730)])_0x2573ff=!![];if(_0x25d702==='tp'&&_0x292105[_0x576886(0x2aa)])_0x2573ff=!![];}const _0x5274e2=this[_0x576886(0x87d)](_0x258f94,_0x2573ff?Sprite_GaugeRate:Sprite_Gauge);_0x5274e2[_0x576886(0x8ff)](_0x4527fd,_0x25d702),_0x5274e2[_0x576886(0x457)](_0x44caf7,_0x2a5395),_0x5274e2[_0x576886(0xac0)]();},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0xaac)]=function(){const _0x2df3e8=_0x320868,_0x144533=this[_0x2df3e8(0x781)]?this[_0x2df3e8(0x781)][_0x2df3e8(0x529)]:0x0;return this[_0x2df3e8(0x489)]-_0x144533+this[_0x2df3e8(0xa1c)]*0x2;},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x17c)]=function(){const _0x882198=_0x320868;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x882198(0x9ec)][_0x882198(0x1d7)][_0x882198(0xb9e)][_0x882198(0x87e)]:[_0x882198(0x541),_0x882198(0x1b1),'ATK',_0x882198(0x2ba),_0x882198(0x770),_0x882198(0x3ea),_0x882198(0x87c),_0x882198(0x91f)];},Window_InBattleStatus[_0x320868(0x5bb)][_0x320868(0x937)]=function(_0xebf7b3,_0x498b28,_0x2a2aae,_0x262fb1){const _0x2d9edc=_0x320868,_0x1a4c83=Window_InBattleStatus['SETTINGS'],_0x4dcd39=Imported[_0x2d9edc(0x1c8)];this[_0x2d9edc(0x2f6)]();let _0x2db358='',_0x45c8f1=0x0,_0x496caf=[_0x2d9edc(0x5c0),_0x2d9edc(0x144),_0x2d9edc(0xb19),_0x2d9edc(0x2ba),_0x2d9edc(0x770),_0x2d9edc(0x3ea),'AGI',_0x2d9edc(0x91f)][_0x2d9edc(0x77f)](String(_0xebf7b3)[_0x2d9edc(0x2c8)]()[_0x2d9edc(0x761)]());if(_0x4dcd39)_0x2db358=TextManager[_0x2d9edc(0x30a)](_0xebf7b3),_0x45c8f1=VisuMZ[_0x2d9edc(0x321)](_0xebf7b3);else{if(_0x496caf>=0x0&&_0x496caf<0x8)_0x2db358=TextManager['param'](_0x496caf);}if(_0x496caf>=0x0&&_0x496caf<0x8){const _0x260caf=this[_0x2d9edc(0x4be)][_0x2d9edc(0x4f3)][_0x496caf];this[_0x2d9edc(0x4be)][_0x2d9edc(0xbc9)](_0x260caf,_0x496caf)!==0x0&&(_0x45c8f1=this['_battler'][_0x2d9edc(0xbc9)](_0x260caf,_0x496caf));}if(_0x2db358){let _0xe66e9d=_0x2d9edc(0x812)[_0x2d9edc(0x8b0)](_0x2db358,_0x45c8f1);_0x262fb1<=0xd4&&(_0xe66e9d='\x5cC[16]%1\x5cC[0]'[_0x2d9edc(0x8b0)](_0x2db358));const _0x1edbba=_0x262fb1<=0xd4?'\x20':'\x20\x20';this['drawTextEx'](_0x1edbba+_0xe66e9d,_0x498b28,_0x2a2aae);}this[_0x2d9edc(0xc1d)]();let _0x9dd3e6='';_0x4dcd39?_0x9dd3e6=this[_0x2d9edc(0x4be)][_0x2d9edc(0x9bc)](_0xebf7b3,!![]):_0x9dd3e6=String(this[_0x2d9edc(0x4be)][_0x2d9edc(0x1ce)](_0x496caf));if(this[_0x2d9edc(0x4be)][_0x2d9edc(0xb8b)]()){let _0x1dd9ee=!![];if(_0x1a4c83['enemyShowParametersAlways'])_0x1dd9ee=![];if(_0x1a4c83[_0x2d9edc(0x4db)]&&BattleManager['isBattleTest']())_0x1dd9ee=![];if(_0x1a4c83[_0x2d9edc(0x836)]&&$gameSystem[_0x2d9edc(0xab9)]()[_0x2d9edc(0x6d2)](this['_battler']['enemyId']()))_0x1dd9ee=![];_0x1dd9ee&&(_0x9dd3e6=_0x1a4c83[_0x2d9edc(0xa07)]);}if(_0x496caf>=0x0&&_0x496caf<0x8){if(this['_battler'][_0x2d9edc(0x20e)](_0x496caf)>0x1)_0x9dd3e6=_0x1a4c83[_0x2d9edc(0x73c)][_0x2d9edc(0x8b0)](_0x9dd3e6),Imported[_0x2d9edc(0x49b)]?this[_0x2d9edc(0x7a1)](ColorManager[_0x2d9edc(0x5e1)]()):this[_0x2d9edc(0x7a1)](ColorManager[_0x2d9edc(0x4d5)]());else this[_0x2d9edc(0x4be)][_0x2d9edc(0x20e)](_0x496caf)<0x1&&(_0x9dd3e6=_0x1a4c83[_0x2d9edc(0x282)][_0x2d9edc(0x8b0)](_0x9dd3e6),Imported['VisuMZ_1_SkillsStatesCore']?this['changeTextColor'](ColorManager[_0x2d9edc(0x999)]()):this[_0x2d9edc(0x7a1)](ColorManager['powerDownColor']()));}if(String(_0x9dd3e6)){const _0x300a4a=_0x262fb1<=0xd4?'\x20':'\x20\x20';this['drawText'](_0x9dd3e6+_0x300a4a,_0x498b28,_0x2a2aae,_0x262fb1,_0x2d9edc(0x59d));}},Window_InBattleStatus[_0x320868(0x5bb)]['drawDarkRect']=function(_0x173e03,_0x129be6,_0x1e2928,_0x266500){const _0x3ee901=_0x320868;_0x266500=_0x266500||this[_0x3ee901(0xbfa)](),this[_0x3ee901(0xbae)]['paintOpacity']=0xa0;const _0x20fd6e=ColorManager[_0x3ee901(0x928)]();this[_0x3ee901(0xbae)][_0x3ee901(0x608)](_0x173e03+0x1,_0x129be6+0x1,_0x1e2928-0x2,_0x266500-0x2,_0x20fd6e),this[_0x3ee901(0xbae)][_0x3ee901(0xc48)]=0xff;},Game_BattlerBase[_0x320868(0x5bb)][_0x320868(0x20e)]=function(_0x40dd56){const _0x5b816e=_0x320868;let _0xcca0bd=0x1;_0xcca0bd*=this[_0x5b816e(0x33c)](_0x40dd56);for(const _0x4c7b34 of this[_0x5b816e(0xc0b)]()){if(!_0x4c7b34)continue;for(const _0x1b4448 of _0x4c7b34[_0x5b816e(0x534)]){if(!_0x1b4448)continue;if(_0x1b4448['code']!==Game_BattlerBase[_0x5b816e(0x9b8)])continue;if(_0x1b4448[_0x5b816e(0xb1a)]!==_0x40dd56)continue;_0xcca0bd*=_0x1b4448[_0x5b816e(0xb4e)];}}return _0xcca0bd;};function Window_InBattleStatusStates(){const _0x4666c8=_0x320868;this[_0x4666c8(0x136)](...arguments);}Window_InBattleStatusStates[_0x320868(0x5bb)]=Object[_0x320868(0x86c)](Window_Command[_0x320868(0x5bb)]),Window_InBattleStatusStates[_0x320868(0x5bb)]['constructor']=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x320868(0x635)]={'maxWidth':VisuMZ[_0x320868(0x5c8)]['Settings']['InBattleStatus'][_0x320868(0xb70)]??0x180,'drawStates':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)]['drawStates']??!![],'drawBuffs':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0x8db)]??!![],'drawDebuffs':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)]['drawDebuffs']??!![],'normalIcon':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0x3d2)]??0x54,'normalText':VisuMZ[_0x320868(0x5c8)]['Settings'][_0x320868(0x5b8)][_0x320868(0x1c2)]??_0x320868(0xc2c),'normalHelp':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0x21b)]??_0x320868(0x632),'stateHelpFmt':VisuMZ['BattleCore']['Settings'][_0x320868(0x5b8)][_0x320868(0x3c0)]??_0x320868(0x326),'buffNameFmt':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0x5b8)]['buffNameFmt']??_0x320868(0x9d3),'buffHelpFmt':VisuMZ['BattleCore'][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0x4ba)]??_0x320868(0x860),'debuffNameFmt':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0xac6)]??'%1▼','debuffHelpFmt':VisuMZ['BattleCore']['Settings'][_0x320868(0x5b8)]['debuffHelpFmt']??'Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','actionsFmt':VisuMZ[_0x320868(0x5c8)]['Settings'][_0x320868(0x5b8)][_0x320868(0x687)]??'\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','turnsFmt':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)][_0x320868(0xb7c)]??'\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','passiveText':VisuMZ[_0x320868(0x5c8)][_0x320868(0x1d7)][_0x320868(0x5b8)]['passiveText']??'\x5cC[4](Passive)'},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x136)]=function(_0x496111){const _0x44ea16=_0x320868;this['_battler']=null,Window_Command[_0x44ea16(0x5bb)][_0x44ea16(0x136)][_0x44ea16(0x5a6)](this,_0x496111),this[_0x44ea16(0x743)](),this[_0x44ea16(0xa99)](),this[_0x44ea16(0xc2d)](0x2);},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x9c3)]=function(_0xcb93fb){const _0x14c2c7=_0x320868;this['_battler']=_0xcb93fb||null,this[_0x14c2c7(0xbc2)](),this[_0x14c2c7(0x1bf)](0x0),this[_0x14c2c7(0x976)](0x0,0x0),this[_0x14c2c7(0x631)]();},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x949)]=function(){},Window_InBattleStatusStates[_0x320868(0x5bb)]['makeCommandList']=function(){const _0xe6896=_0x320868;if(!this[_0xe6896(0x4be)])return;this[_0xe6896(0x7d2)](),this[_0xe6896(0xc60)](),this['addBattlerBuffsDebuffs'](),this[_0xe6896(0x405)]();},Window_InBattleStatusStates['prototype'][_0x320868(0x7d2)]=function(){const _0x19a0c8=_0x320868;if(!this[_0x19a0c8(0x4be)][_0x19a0c8(0xb8b)]())return;if(!this[_0x19a0c8(0x4be)][_0x19a0c8(0x478)]())return;const _0x108d1a=this[_0x19a0c8(0x4be)][_0x19a0c8(0x84b)]()[_0x19a0c8(0x3e0)],_0x3e26cc=this[_0x19a0c8(0x4be)][_0x19a0c8(0x84b)]()[_0x19a0c8(0xc49)],_0x8041f9=this[_0x19a0c8(0x4be)][_0x19a0c8(0x84b)]()['nameColor'];let _0x3d41d2='';_0x8041f9[_0x19a0c8(0x2e0)](/#(.*?)/gi)&&Imported[_0x19a0c8(0xa76)]?_0x3d41d2=_0x19a0c8(0x1fc)[_0x19a0c8(0x8b0)](_0x3e26cc,_0x108d1a,_0x8041f9):_0x3d41d2=_0x19a0c8(0x437)[_0x19a0c8(0x8b0)](_0x3e26cc,_0x108d1a,_0x8041f9),this[_0x19a0c8(0x154)](_0x3d41d2,_0x19a0c8(0x6b8),!![]);},Window_InBattleStatusStates[_0x320868(0x5bb)]['addBattlerStates']=function(){const _0x155611=_0x320868;if(!Window_InBattleStatusStates[_0x155611(0x635)][_0x155611(0x4c3)])return;for(const _0x3daf8e of this[_0x155611(0x4be)]['states']()){if(!this['includeState'](_0x3daf8e))continue;const _0x29a170=this[_0x155611(0x821)](_0x3daf8e);this[_0x155611(0x154)](_0x29a170,_0x155611(0x339),!![],_0x3daf8e['id']);}},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x54d)]=function(_0x5d956a){const _0x16f5ef=_0x320868;if(!_0x5d956a)return![];if(_0x5d956a[_0x16f5ef(0x3e0)][_0x16f5ef(0x761)]()==='')return![];if(_0x5d956a[_0x16f5ef(0x3e0)][_0x16f5ef(0x6d2)](_0x16f5ef(0x1a7)))return![];if(_0x5d956a[_0x16f5ef(0xc49)]<=0x0)return![];if(_0x5d956a[_0x16f5ef(0x689)])return![];return!![];},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x821)]=function(_0x98d805){const _0x4046d7=_0x320868;let _0xe4348c=_0x98d805['iconIndex'],_0x51d5be=_0x98d805[_0x4046d7(0x3e0)],_0x1fed62='0';return Imported[_0x4046d7(0x49b)]&&Imported[_0x4046d7(0xa76)]&&(_0x1fed62=String(ColorManager['stateColor'](_0x98d805))),_0x1fed62['match'](/#(.*?)/gi)?_0x4046d7(0x1fc)[_0x4046d7(0x8b0)](_0xe4348c,_0x51d5be,_0x1fed62):_0x4046d7(0x437)['format'](_0xe4348c,_0x51d5be,_0x1fed62);},Window_InBattleStatusStates['prototype'][_0x320868(0x954)]=function(){const _0x33b02f=_0x320868;for(let _0x4e561a=0x0;_0x4e561a<0x8;_0x4e561a++){const _0xe54223=this[_0x33b02f(0xbf3)](_0x4e561a);if(!_0xe54223)continue;this[_0x33b02f(0x154)](_0xe54223,'buff',!![],_0x4e561a);}},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0xbf3)]=function(_0x57b479){const _0x4cfeb3=_0x320868;if(!this['_battler'][_0x4cfeb3(0x1ff)](_0x57b479)&&!this[_0x4cfeb3(0x4be)][_0x4cfeb3(0x31f)](_0x57b479))return'';const _0x24415f=Window_InBattleStatusStates['SETTINGS'];if(this[_0x4cfeb3(0x4be)]['isBuffAffected'](_0x57b479)&&!_0x24415f[_0x4cfeb3(0x8db)])return'';if(this[_0x4cfeb3(0x4be)][_0x4cfeb3(0x31f)](_0x57b479)&&!_0x24415f[_0x4cfeb3(0x7da)])return'';const _0x5a974b=this[_0x4cfeb3(0x4be)][_0x4cfeb3(0x4f3)][_0x57b479];let _0x482646=this[_0x4cfeb3(0x4be)][_0x4cfeb3(0xbc9)](_0x5a974b,_0x57b479),_0x36c11f=TextManager[_0x4cfeb3(0x1ce)](_0x57b479);_0x5a974b>0x0?_0x36c11f=_0x24415f[_0x4cfeb3(0x9f0)]['format'](_0x36c11f):_0x36c11f=_0x24415f[_0x4cfeb3(0xac6)][_0x4cfeb3(0x8b0)](_0x36c11f);let _0x52142f=0x0;return Imported['VisuMZ_1_SkillsStatesCore']&&(_0x52142f=_0x5a974b>0x0?ColorManager[_0x4cfeb3(0x5e1)]():ColorManager[_0x4cfeb3(0x999)]()),String(_0x52142f)[_0x4cfeb3(0x2e0)](/#(.*?)/gi)?_0x4cfeb3(0x1fc)[_0x4cfeb3(0x8b0)](_0x482646,_0x36c11f,_0x52142f):_0x4cfeb3(0x437)[_0x4cfeb3(0x8b0)](_0x482646,_0x36c11f,_0x52142f);},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x405)]=function(){const _0x3d057d=_0x320868;if(this['_list']['length']>0x0)return;const _0x5e73dd=Window_InBattleStatusStates[_0x3d057d(0x635)],_0x1cb2c9=_0x5e73dd[_0x3d057d(0x3d2)],_0x366130=_0x5e73dd[_0x3d057d(0x1c2)],_0xd4dbc7=_0x3d057d(0x47b)[_0x3d057d(0x8b0)](_0x1cb2c9,_0x366130);this[_0x3d057d(0x154)](_0xd4dbc7,_0x3d057d(0x9ee));},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0xa71)]=function(_0x54de6d){const _0x1e7f68=_0x320868,_0x5cc137=this[_0x1e7f68(0x2ac)](_0x54de6d);this[_0x1e7f68(0x47d)](0xff),this[_0x1e7f68(0x423)](this[_0x1e7f68(0x19f)](_0x54de6d),_0x5cc137['x'],_0x5cc137['y']),this[_0x1e7f68(0x95d)](_0x54de6d,_0x5cc137);},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x95d)]=function(_0x5ad2fe,_0x174d45){const _0x2eeffb=_0x320868;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;const _0x4b41d8=this[_0x2eeffb(0x1fb)](_0x5ad2fe),_0xf482e3=_0x174d45['x']+0x2;if(_0x4b41d8==='state'){const _0x115d7b=$dataStates[this['_list'][_0x5ad2fe][_0x2eeffb(0x9e3)]||0x0];this[_0x2eeffb(0x5cc)](this[_0x2eeffb(0x4be)],_0x115d7b,_0xf482e3,_0x174d45['y']),this['drawActorStateData'](this['_battler'],_0x115d7b,_0xf482e3,_0x174d45['y']);}else{if(_0x4b41d8===_0x2eeffb(0x644)){const _0xf18d4c=this['_list'][_0x5ad2fe][_0x2eeffb(0x9e3)];this['drawActorBuffTurns'](this[_0x2eeffb(0x4be)],_0xf18d4c,_0xf482e3,_0x174d45['y']),this[_0x2eeffb(0x12d)](this['_battler'],_0xf18d4c,_0xf482e3,_0x174d45['y']);}}},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x572)]=function(){const _0x4b6b71=_0x320868,_0x3df57c=this[_0x4b6b71(0x8ed)]();let _0x58eb1e='';if(_0x3df57c===_0x4b6b71(0x6b8))_0x58eb1e=this['_battler'][_0x4b6b71(0x84b)]()[_0x4b6b71(0x5b5)];else{if(_0x3df57c===_0x4b6b71(0x339))_0x58eb1e=this[_0x4b6b71(0x7ff)]();else{if(_0x3df57c===_0x4b6b71(0x644))_0x58eb1e=this['makeBuffHelpText']();else _0x3df57c==='normal'&&(_0x58eb1e=Window_InBattleStatusStates[_0x4b6b71(0x635)][_0x4b6b71(0x21b)]);}}_0x58eb1e?this[_0x4b6b71(0xc69)][_0x4b6b71(0x377)](_0x58eb1e):this[_0x4b6b71(0xc69)][_0x4b6b71(0x927)]();},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x7ff)]=function(){const _0xcd5f5a=_0x320868,_0x5c53e9=Window_InBattleStatusStates[_0xcd5f5a(0x635)],_0x5acf37=this[_0xcd5f5a(0xa4d)]();let _0x3afb99='';const _0x472d82=$dataStates[_0x5acf37]||null;if(_0x472d82){const _0x451baf=_0x5c53e9[_0xcd5f5a(0x3c0)];let _0x1d3272=_0x472d82[_0xcd5f5a(0x23a)]||_0x472d82[_0xcd5f5a(0x5b5)]||'';Imported[_0xcd5f5a(0x49b)]&&(_0x1d3272=_0x1d3272[_0xcd5f5a(0x8b0)](this[_0xcd5f5a(0x4be)][_0xcd5f5a(0x8c7)](_0x5acf37)));let _0x4d8f56=_0xcd5f5a(0x1f3);if(this[_0xcd5f5a(0x4be)][_0xcd5f5a(0xaf2)](_0x5acf37)){if(_0x472d82[_0xcd5f5a(0xa2b)]===0x0)_0x4d8f56=_0xcd5f5a(0x285);if(_0x472d82[_0xcd5f5a(0xa2b)]===0x1)_0x4d8f56=_0xcd5f5a(0x295);if(_0x472d82[_0xcd5f5a(0xa2b)]===0x2)_0x4d8f56=_0xcd5f5a(0x778);}const _0x2a3f1a=this[_0xcd5f5a(0x4be)][_0xcd5f5a(0x450)][_0x5acf37]||0x0;let _0x5a02aa=_0xcd5f5a(0x298);Imported[_0xcd5f5a(0x49b)]&&Imported[_0xcd5f5a(0xa76)]&&(_0x5a02aa=ColorManager[_0xcd5f5a(0x226)](_0x472d82),_0x5a02aa[_0xcd5f5a(0x2e0)](/#(.*?)/gi)?_0x5a02aa='\x5cHEXCOLOR<%1>'['format'](_0x5a02aa):_0x5a02aa=_0xcd5f5a(0x2ce)[_0xcd5f5a(0x8b0)](_0x5a02aa)),_0x3afb99=_0x451baf[_0xcd5f5a(0x8b0)](_0x1d3272,this['makeTurnsText'](_0x4d8f56,_0x2a3f1a,_0x5a02aa));}return _0x3afb99;},Window_InBattleStatusStates[_0x320868(0x5bb)]['makeBuffHelpText']=function(){const _0xb73dec=_0x320868,_0x8c826=Window_InBattleStatusStates['SETTINGS'],_0x3b5b08=this[_0xb73dec(0xa4d)]();let _0x4b39ca='';const _0x29441a=this[_0xb73dec(0x4be)]['isBuffAffected'](_0x3b5b08),_0x40f075=_0x29441a?_0xb73dec(0x4ba):'debuffHelpFmt',_0x532573=_0x8c826[_0x40f075];let _0x4eeae9='\x5cC[0]';Imported[_0xb73dec(0x49b)]&&Imported[_0xb73dec(0xa76)]&&(_0x4eeae9=_0x29441a?ColorManager[_0xb73dec(0x5e1)]():ColorManager[_0xb73dec(0x999)](),_0x4eeae9[_0xb73dec(0x2e0)](/#(.*?)/gi)?_0x4eeae9='\x5cHEXCOLOR<%1>'[_0xb73dec(0x8b0)](_0x4eeae9):_0x4eeae9=_0xb73dec(0x2ce)[_0xb73dec(0x8b0)](_0x4eeae9));const _0xb14e66=this[_0xb73dec(0x4be)][_0xb73dec(0x9a4)][_0x3b5b08]||0x0;return _0x4b39ca=_0x532573[_0xb73dec(0x8b0)](TextManager['param'](_0x3b5b08),Math[_0xb73dec(0x5a8)](this[_0xb73dec(0x4be)][_0xb73dec(0x33c)](_0x3b5b08)*0x64)+'%',_0x4eeae9,this[_0xb73dec(0x890)]('turns',_0xb14e66,_0x4eeae9)),_0x4b39ca;},Window_InBattleStatusStates[_0x320868(0x5bb)][_0x320868(0x890)]=function(_0x1f699f,_0x9ad638,_0x374a43){const _0x4f7665=_0x320868,_0x2628f4=Window_InBattleStatusStates[_0x4f7665(0x635)];let _0x568b48=_0x2628f4[_0x4f7665(0x14a)];if(_0x1f699f===_0x4f7665(0x295))_0x568b48=_0x2628f4[_0x4f7665(0x687)];if(_0x1f699f===_0x4f7665(0x778))_0x568b48=_0x2628f4[_0x4f7665(0x523)];if(_0x1f699f===_0x4f7665(0x285))return'';return _0x568b48[_0x4f7665(0x8b0)](_0x9ad638,_0x374a43);};